{
  "version": 3,
  "sources": ["../../@moviemasher/moviemasher.js/esm/moviemasher.js"],
  "sourcesContent": ["const isCustomEvent = (value) => (value instanceof CustomEvent);\n\nconst throwError = (value, expected, name = \"value\") => {\n    const type = typeof value;\n    const typeName = type === 'object' ? value.constructor.name : type;\n    console.error(\"throwError\", value);\n    throw new Error(`${name} is \"${value}\" (${typeName}) instead of ${expected}`);\n};\n\nconst isObject = (value) => typeof value === 'object';\nfunction assertObject(value, name) {\n    if (!isObject(value))\n        throwError(value, 'Object', name);\n}\nconst isString = (value) => (typeof value === 'string');\nfunction assertString(value, name) {\n    if (!isString(value))\n        throwError(value, 'String', name);\n}\nconst isUndefined = (value) => typeof value === 'undefined';\nconst isNumberOrNaN = (value) => typeof value === 'number';\nfunction assertNumber(value, name) {\n    if (!isNumberOrNaN(value))\n        throwError(value, 'Number', name);\n}\nconst isBoolean = (value) => typeof value === 'boolean';\nfunction assertBoolean(value, name) {\n    if (!isBoolean(value))\n        throwError(value, \"Boolean\", name);\n}\nconst isMethod = (value) => typeof value === 'function';\nconst isDefined = (value) => !isUndefined(value);\nfunction assertDefined(value, name) {\n    if (!isDefined(value))\n        throwError(value, 'defined', name);\n}\nconst isNan = (value) => isNumberOrNaN(value) && Number.isNaN(value);\nconst isNumber = (value) => isNumberOrNaN(value) && !Number.isNaN(value);\nconst isInteger = (value) => Number.isInteger(value);\nconst isFloat = (value) => isNumber(value) && !isInteger(value);\nconst isPositive = (value) => isNumber(value) && value >= 0;\nfunction assertPositive(value, name) {\n    if (!isPositive(value))\n        throwError(value, '>= 0', name);\n}\nconst isBelowOne = (value) => isNumber(value) && value < 1;\nconst isAboveZero = (value) => isNumber(value) && value > 0;\nfunction assertAboveZero(value, name) {\n    if (!isAboveZero(value))\n        throwError(value, '> zero', name);\n}\nconst isArray = (value) => (isDefined(Array.isArray) ? Array.isArray(value) : value instanceof Array);\nfunction assertArray(value, name) {\n    if (!isArray(value))\n        throwError(value, 'Array', name);\n}\nconst length = (value) => !!value.length;\nconst isPopulatedString = (value) => isString(value) && length(String(value));\nfunction assertPopulatedString(value, name = 'value') {\n    if (!isPopulatedString(value))\n        throwError(value, 'populated string', name);\n}\nconst isPopulatedArray = (value) => (isArray(value) && length(value));\nfunction assertPopulatedArray(value, name = 'value') {\n    if (!isPopulatedArray(value))\n        throwError(value, 'populated array', name);\n}\nconst isPopulatedObject = (value) => (isObject(value) && length(Object.keys(value)));\nfunction assertPopulatedObject(value, name = 'value') {\n    if (!isPopulatedObject(value))\n        throwError(value, 'populated array', name);\n}\nconst isNumeric = (value) => ((isNumber(value) || isPopulatedString(value)) && !isNan(Number(value)));\nfunction assertTrue(value, name = 'value') {\n    if (!value)\n        throwError(value, 'true', name);\n}\nconst isRgb = (value) => {\n    return isObject(value) && \"r\" in value && \"g\" in value && \"b\" in value;\n};\nfunction assertRgb(value, name) {\n    if (!isRgb(value))\n        throwError(value, 'Rgb', name);\n}\nconst isTime = (value) => {\n    return isObject(value) && \"isRange\" in value;\n};\nfunction assertTime(value, name) {\n    if (!isTime(value))\n        throwError(value, \"Time\", name);\n}\nconst isTimeRange = (value) => {\n    return isTime(value) && value.isRange;\n};\nfunction assertTimeRange(value, name) {\n    if (!isTimeRange(value))\n        throwError(value, \"TimeRange\", name);\n}\nconst isValue = (value) => {\n    return isNumber(value) || isString(value);\n};\nconst isTrueValue = (value) => {\n    if (!isValue(value))\n        return false;\n    if (isNumeric(value))\n        return !!Number(value);\n    return isPopulatedString(value);\n};\nfunction assertValue(value, name) {\n    if (!isValue(value))\n        throwError(value, \"Value\", name);\n}\nconst isValueObject = (value) => {\n    return isObject(value) && Object.values(value).every(value => isValue(value));\n};\nfunction assertValueObject(value, name) {\n    if (!isValueObject(value))\n        throwError(value, \"ValueObject\", name);\n}\n\nvar DroppingPosition;\n(function (DroppingPosition) {\n    DroppingPosition[\"At\"] = \"at\";\n    DroppingPosition[\"After\"] = \"after\";\n    DroppingPosition[\"Before\"] = \"before\";\n    DroppingPosition[\"None\"] = \"none\";\n})(DroppingPosition || (DroppingPosition = {}));\nvar LayerType;\n(function (LayerType) {\n    LayerType[\"Mash\"] = \"mash\";\n    LayerType[\"Folder\"] = \"folder\";\n})(LayerType || (LayerType = {}));\nconst LayerTypes = Object.values(LayerType);\nconst isLayerType = (value) => {\n    return LayerTypes.includes(value);\n};\nfunction assertLayerType(value) {\n    if (!isLayerType(value))\n        throw new Error('expected LayerType');\n}\nvar ActionType;\n(function (ActionType) {\n    ActionType[\"AddClipToTrack\"] = \"addClipToTrack\";\n    ActionType[\"AddEffect\"] = \"addEffect\";\n    ActionType[\"AddLayer\"] = \"addLayer\";\n    ActionType[\"AddTrack\"] = \"addTrack\";\n    ActionType[\"Change\"] = \"change\";\n    ActionType[\"ChangeMultiple\"] = \"changeMultiple\";\n    ActionType[\"ChangeFrame\"] = \"changeFrame\";\n    ActionType[\"ChangeGain\"] = \"changeGain\";\n    ActionType[\"MoveClip\"] = \"moveClip\";\n    ActionType[\"MoveEffect\"] = \"moveEffect\";\n    ActionType[\"MoveLayer\"] = \"moveLayer\";\n    ActionType[\"RemoveClip\"] = \"removeClip\";\n    ActionType[\"RemoveLayer\"] = \"removeLayer\";\n})(ActionType || (ActionType = {}));\nvar EditType;\n(function (EditType) {\n    EditType[\"Mash\"] = \"mash\";\n    EditType[\"Cast\"] = \"cast\";\n})(EditType || (EditType = {}));\nconst EditTypes = Object.values(EditType);\nconst isEditType = (value) => {\n    return EditTypes.includes(value);\n};\nfunction assertEditType(value, name) {\n    if (!isEditType(value))\n        throwError(value, 'EditType', name);\n}\nvar AVType;\n(function (AVType) {\n    AVType[\"Audio\"] = \"audio\";\n    AVType[\"Both\"] = \"both\";\n    AVType[\"Video\"] = \"video\";\n})(AVType || (AVType = {}));\nvar SelectType;\n(function (SelectType) {\n    SelectType[\"Cast\"] = \"cast\";\n    SelectType[\"Clip\"] = \"clip\";\n    SelectType[\"Container\"] = \"container\";\n    SelectType[\"Content\"] = \"content\";\n    SelectType[\"Effect\"] = \"effect\";\n    SelectType[\"Layer\"] = \"layer\";\n    SelectType[\"Mash\"] = \"mash\";\n    SelectType[\"None\"] = \"none\";\n    SelectType[\"Track\"] = \"track\";\n})(SelectType || (SelectType = {}));\nconst SelectTypes = Object.values(SelectType);\nconst isSelectType = (value) => {\n    return SelectTypes.includes(value);\n};\nfunction assertSelectType(value, name) {\n    if (!isSelectType(value))\n        throwError(value, 'SelectType', name);\n}\nconst ClipSelectTypes = [SelectType.Content, SelectType.Container];\nconst isClipSelectType = (type) => {\n    return isSelectType(type) && ClipSelectTypes.includes(type);\n};\nvar OutputFormat;\n(function (OutputFormat) {\n    OutputFormat[\"AudioConcat\"] = \"wav\";\n    OutputFormat[\"Flv\"] = \"flv\";\n    OutputFormat[\"Hls\"] = \"hls\";\n    OutputFormat[\"Jpeg\"] = \"jpeg\";\n    OutputFormat[\"Mdash\"] = \"mdash\";\n    OutputFormat[\"Mp3\"] = \"mp3\";\n    OutputFormat[\"Mp4\"] = \"mp4\";\n    OutputFormat[\"Png\"] = \"image2\";\n    OutputFormat[\"Rtmp\"] = \"rtmp\";\n    OutputFormat[\"VideoConcat\"] = \"yuv4mpegpipe\";\n})(OutputFormat || (OutputFormat = {}));\nvar StreamingFormat;\n(function (StreamingFormat) {\n    StreamingFormat[\"Hls\"] = \"hls\";\n    StreamingFormat[\"Mdash\"] = \"mdash\";\n    StreamingFormat[\"Rtmp\"] = \"rtmp\";\n})(StreamingFormat || (StreamingFormat = {}));\nvar OutputType;\n(function (OutputType) {\n    OutputType[\"Audio\"] = \"audio\";\n    OutputType[\"Image\"] = \"image\";\n    OutputType[\"ImageSequence\"] = \"imagesequence\";\n    OutputType[\"Video\"] = \"video\";\n    OutputType[\"Waveform\"] = \"waveform\";\n})(OutputType || (OutputType = {}));\nconst OutputTypes = Object.values(OutputType);\nvar FillType;\n(function (FillType) {\n    FillType[\"Color\"] = \"color\";\n    FillType[\"Fill\"] = \"fill\";\n})(FillType || (FillType = {}));\nconst FillTypes = Object.values(FillType);\nconst isFillType = (type) => {\n    return FillTypes.includes(type);\n};\nvar GraphFileType;\n(function (GraphFileType) {\n    GraphFileType[\"Svg\"] = \"svg\";\n    GraphFileType[\"SvgSequence\"] = \"svgsequence\";\n    GraphFileType[\"Txt\"] = \"txt\";\n    // Object = 'object'\n})(GraphFileType || (GraphFileType = {}));\nconst GraphFileTypes = Object.values(GraphFileType);\nconst isGraphFileType = (type) => {\n    return isPopulatedString(type) && GraphFileTypes.includes(type);\n};\nvar LoadType;\n(function (LoadType) {\n    LoadType[\"Audio\"] = \"audio\";\n    LoadType[\"Font\"] = \"font\";\n    LoadType[\"Image\"] = \"image\";\n    LoadType[\"Video\"] = \"video\";\n})(LoadType || (LoadType = {}));\nconst LoadTypes = Object.values(LoadType);\nconst isLoadType = (type) => {\n    return isPopulatedString(type) && LoadTypes.includes(type);\n};\nfunction assertLoadType(value, name) {\n    if (!isLoadType(value))\n        throwError(value, \"LoadType\", name);\n}\nconst UploadTypes = LoadTypes.filter(type => type !== LoadType.Font);\nconst isUploadType = (type) => {\n    return isLoadType(type) && UploadTypes.includes(type);\n};\nvar DefinitionType;\n(function (DefinitionType) {\n    DefinitionType[\"Audio\"] = \"audio\";\n    DefinitionType[\"Clip\"] = \"clip\";\n    DefinitionType[\"Container\"] = \"container\";\n    DefinitionType[\"Content\"] = \"content\";\n    DefinitionType[\"Effect\"] = \"effect\";\n    DefinitionType[\"Filter\"] = \"filter\";\n    DefinitionType[\"Font\"] = \"font\";\n    DefinitionType[\"Image\"] = \"image\";\n    DefinitionType[\"Video\"] = \"video\";\n    DefinitionType[\"VideoSequence\"] = \"videosequence\";\n})(DefinitionType || (DefinitionType = {}));\nconst DefinitionTypes = Object.values(DefinitionType);\nconst isDefinitionType = (type) => {\n    return DefinitionTypes.includes(type);\n};\nfunction assertDefinitionType(value, message = '') {\n    if (!isDefinitionType(value))\n        throw new Error(`expected '${value}' to be DefinitionType ${message}`);\n}\nconst SizingDefinitionTypes = [DefinitionType.Container, DefinitionType.Image, DefinitionType.Video, DefinitionType.VideoSequence];\nconst isSizingDefinitionType = (type) => {\n    return isDefinitionType(type) && SizingDefinitionTypes.includes(type);\n};\nconst TimingDefinitionTypes = [DefinitionType.Audio, DefinitionType.Video, DefinitionType.VideoSequence];\nconst isTimingDefinitionType = (type) => {\n    return isDefinitionType(type) && TimingDefinitionTypes.includes(type);\n};\nconst ContainerTypes = [DefinitionType.Image, DefinitionType.Container, DefinitionType.VideoSequence];\nconst isContainerType = (type) => {\n    return isDefinitionType(type) && ContainerTypes.includes(type);\n};\nfunction assertContainerType(type) {\n    if (!isContainerType(type))\n        throw new Error(\"expected ContainerType\");\n}\nconst ContentTypes = [DefinitionType.Content, DefinitionType.Image, DefinitionType.Video, DefinitionType.VideoSequence, DefinitionType.Audio];\nconst isContentType = (type) => {\n    return isDefinitionType(type) && ContentTypes.includes(type);\n};\nfunction assertContentType(type) {\n    if (!isContentType(type))\n        throw new Error(\"expected ContentType\");\n}\nvar DataType;\n(function (DataType) {\n    DataType[\"Boolean\"] = \"boolean\";\n    DataType[\"ContainerId\"] = \"containerid\";\n    DataType[\"ContentId\"] = \"contentid\";\n    DataType[\"DefinitionId\"] = \"definitionid\";\n    DataType[\"FontId\"] = \"fontid\";\n    DataType[\"Frame\"] = \"frame\";\n    DataType[\"Number\"] = \"number\";\n    DataType[\"Percent\"] = \"percent\";\n    DataType[\"Rgb\"] = \"rgb\";\n    DataType[\"String\"] = \"string\";\n    DataType[\"Timing\"] = \"timing\";\n    DataType[\"Sizing\"] = \"sizing\";\n})(DataType || (DataType = {}));\nconst DataTypes = Object.values(DataType);\nconst isDataType = (type) => {\n    return DataTypes.includes(type);\n};\nfunction assertDataType(value, name) {\n    if (!isDataType(value))\n        throwError(value, \"DataType\", name);\n}\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"H\"] = \"H\";\n    Orientation[\"V\"] = \"V\";\n})(Orientation || (Orientation = {}));\nconst Orientations = Object.values(Orientation);\nconst isOrientation = (value) => {\n    return isPopulatedString(value) && Orientations.includes(value);\n};\nvar Direction;\n(function (Direction) {\n    Direction[\"E\"] = \"E\";\n    Direction[\"N\"] = \"N\";\n    Direction[\"S\"] = \"S\";\n    Direction[\"W\"] = \"W\";\n})(Direction || (Direction = {}));\nconst Directions = Object.values(Direction);\nconst isDirection = (value) => {\n    return Directions.includes(value);\n};\nfunction assertDirection(value, name) {\n    if (!isDirection(value))\n        throwError(value, \"Direction\", name);\n}\nvar Anchor;\n(function (Anchor) {\n    Anchor[\"E\"] = \"E\";\n    Anchor[\"N\"] = \"N\";\n    Anchor[\"NE\"] = \"NE\";\n    Anchor[\"NW\"] = \"NW\";\n    Anchor[\"S\"] = \"S\";\n    Anchor[\"SE\"] = \"SE\";\n    Anchor[\"SW\"] = \"SW\";\n    Anchor[\"W\"] = \"W\";\n})(Anchor || (Anchor = {}));\nconst Anchors = Object.values(Anchor);\nvar TriggerType;\n(function (TriggerType) {\n    TriggerType[\"Init\"] = \"init\";\n    TriggerType[\"Stop\"] = \"stop\";\n    TriggerType[\"Start\"] = \"start\";\n})(TriggerType || (TriggerType = {}));\nconst TriggerTypes = Object.values(TriggerType);\nconst isTriggerType = (type) => {\n    return TriggerTypes.includes(type);\n};\nvar TransformType;\n(function (TransformType) {\n    TransformType[\"Scale\"] = \"scale\";\n    TransformType[\"Translate\"] = \"translate\";\n})(TransformType || (TransformType = {}));\nvar EventType;\n(function (EventType) {\n    EventType[\"Action\"] = \"action\";\n    EventType[\"Active\"] = \"active\";\n    EventType[\"Added\"] = \"added\";\n    EventType[\"Cast\"] = \"cast\";\n    EventType[\"Draw\"] = \"draw\";\n    EventType[\"Duration\"] = \"durationchange\";\n    EventType[\"Ended\"] = \"ended\";\n    EventType[\"Fps\"] = \"ratechange\";\n    EventType[\"Loaded\"] = \"loadeddata\";\n    EventType[\"Mash\"] = \"mash\";\n    EventType[\"Pause\"] = \"pause\";\n    EventType[\"Play\"] = \"play\";\n    EventType[\"Playing\"] = \"playing\";\n    EventType[\"Render\"] = \"render\";\n    EventType[\"Resize\"] = \"resize\";\n    EventType[\"Save\"] = \"save\";\n    EventType[\"Seeked\"] = \"seeked\";\n    EventType[\"Seeking\"] = \"seeking\";\n    EventType[\"Selection\"] = \"selection\";\n    EventType[\"Time\"] = \"timeupdate\";\n    EventType[\"Track\"] = \"track\";\n    EventType[\"Volume\"] = \"volumechange\";\n    EventType[\"Waiting\"] = \"waiting\";\n})(EventType || (EventType = {}));\nconst EventTypes = Object.values(EventType);\nconst isEventType = (type) => {\n    return EventTypes.includes(type);\n};\nvar MoveType;\n(function (MoveType) {\n    MoveType[\"Audio\"] = \"audio\";\n    MoveType[\"Effect\"] = \"effect\";\n    MoveType[\"Video\"] = \"video\";\n})(MoveType || (MoveType = {}));\nvar MasherAction;\n(function (MasherAction) {\n    MasherAction[\"Redo\"] = \"redo\";\n    MasherAction[\"Remove\"] = \"remove\";\n    MasherAction[\"Render\"] = \"render\";\n    MasherAction[\"Save\"] = \"save\";\n    MasherAction[\"Undo\"] = \"undo\";\n})(MasherAction || (MasherAction = {}));\nvar GraphType;\n(function (GraphType) {\n    GraphType[\"Mash\"] = \"mash\";\n    GraphType[\"Cast\"] = \"cast\";\n})(GraphType || (GraphType = {}));\nvar ServerType;\n(function (ServerType) {\n    ServerType[\"Api\"] = \"api\";\n    ServerType[\"Data\"] = \"data\";\n    ServerType[\"File\"] = \"file\";\n    ServerType[\"Rendering\"] = \"rendering\";\n    ServerType[\"Streaming\"] = \"streaming\";\n    ServerType[\"Web\"] = \"web\";\n})(ServerType || (ServerType = {}));\nconst ServerTypes = Object.values(ServerType);\nvar Duration;\n(function (Duration) {\n    Duration[Duration[\"Unknown\"] = -1] = \"Unknown\";\n    Duration[Duration[\"Unlimited\"] = -2] = \"Unlimited\";\n    Duration[Duration[\"None\"] = 0] = \"None\";\n})(Duration || (Duration = {}));\nvar Timing;\n(function (Timing) {\n    Timing[\"Custom\"] = \"custom\";\n    Timing[\"Content\"] = \"content\";\n    Timing[\"Container\"] = \"container\";\n})(Timing || (Timing = {}));\nconst Timings = Object.values(Timing);\nvar Sizing;\n(function (Sizing) {\n    Sizing[\"Preview\"] = \"preview\";\n    Sizing[\"Content\"] = \"content\";\n    Sizing[\"Container\"] = \"container\";\n})(Sizing || (Sizing = {}));\nconst Sizings = Object.values(Sizing);\n\nconst ApiVersion = \"5.1.1\";\n\nconst EndpointsApi = {\n    servers: '',\n    callbacks: '',\n};\nconst EndpointsEncode = {\n    start: '',\n    status: '',\n    // stop: '',\n};\nconst EndpointsRendering = { ...EndpointsEncode, upload: '' };\nconst EndpointsCrud = {\n    delete: '',\n    get: '',\n    put: '',\n    retrieve: '',\n};\nconst EndpointsData = {\n    cast: { ...EndpointsCrud, default: '' },\n    mash: { ...EndpointsCrud, default: '' },\n    stream: { ...EndpointsCrud },\n    definition: { ...EndpointsCrud },\n};\nconst EndpointsStreaming = {\n    ...EndpointsEncode,\n    ...EndpointsCrud,\n    preload: '',\n    cut: '',\n    webrtc: '',\n    rtmp: '',\n    remote: '',\n    local: '',\n};\nconst EndpointsFile = {\n    store: '',\n};\nconst Endpoints = {\n    [ServerType.Api]: EndpointsApi,\n    [ServerType.Data]: EndpointsData,\n    [ServerType.File]: EndpointsFile,\n    [ServerType.Rendering]: EndpointsRendering,\n    [ServerType.Streaming]: EndpointsStreaming,\n};\n// populate Endpoints with key paths...\nObject.entries(Endpoints).forEach(([serverType, server]) => {\n    if (isObject(server))\n        Object.entries(server).forEach(([key1, value1]) => {\n            if (isString(value1))\n                server[key1] = `/${serverType}/${key1}`;\n            else\n                Object.entries(value1).forEach(([key2, value2]) => {\n                    if (!value2)\n                        value1[key2] = `/${serverType}/${key1}/${key2}`;\n                });\n        });\n});\n\nconst Factories = {};\n\nconst Factory = Factories;\n\nconst ExtHls = 'm3u8';\nconst ExtTs = 'ts';\nconst ExtRtmp = 'flv';\nconst ExtDash = 'dash';\nconst ExtJpeg = 'jpg';\nconst ExtPng = 'png';\nconst ExtJson = 'json';\nconst ExtText = 'txt';\nconst OutputFilterGraphPadding = 6;\nconst EmptyMethod = () => { };\n// xmlns\nconst NamespaceSvg = 'http://www.w3.org/2000/svg';\n// xmlns:xhtml\nconst NamespaceXhtml = 'http://www.w3.org/1999/xhtml';\n// xmlns:xlink\nconst NamespaceLink = 'http://www.w3.org/1999/xlink';\nconst IdPrefix = 'com.moviemasher.';\nconst IdSuffix = '.default';\nconst ClassDisabled = 'disabled';\nconst ClassButton = 'button';\nconst ClassCollapsed = 'collapsed';\nconst ClassSelected = 'selected';\nconst ClassDropping = 'dropping';\nconst ClassDroppingBefore = 'dropping-before';\nconst ClassDroppingAfter = 'dropping-after';\n\nconst isDefinitionObject = (value) => {\n    return isObject(value) && \"id\" in value && (!value.type || isDefinitionType(value.type));\n};\nconst isDefinition = (value) => {\n    return isObject(value) && isDefinitionType(value.type) && \"instanceFromObject\" in value;\n};\nfunction assertDefinition(value, name) {\n    if (!isDefinition(value))\n        throwError(value, 'Definition', name);\n}\n\nclass Defined {\n    static byId = new Map();\n    static byIdAdd(definition) {\n        const definitions = Array.isArray(definition) ? definition : [definition];\n        definitions.forEach(definition => this.byId.set(definition.id, definition));\n    }\n    static byType(type) {\n        const list = this.definitionsByType.get(type);\n        if (list)\n            return list;\n        const definitions = Factory[type].defaults || [];\n        this.definitionsByType.set(type, definitions);\n        // this.byIdAdd(definitions)\n        return definitions;\n    }\n    static define(...objects) {\n        return objects.map(object => this.fromObject(object));\n    }\n    static definitionDelete(definition) {\n        const { type, id } = definition;\n        const definitions = this.byType(type);\n        const index = definitions.findIndex(definition => id === definition.id);\n        // console.log(this.name, \"definitionDelete\", type, id, index)\n        if (index < 0)\n            return;\n        definitions.splice(index, 1);\n    }\n    static definitionsByType = new Map();\n    static definitionsType(id) {\n        const type = id.split('.').slice(-2).shift();\n        return isDefinitionType(type) ? type : undefined;\n    }\n    static fromId(id) {\n        if (this.installed(id))\n            return this.byId.get(id);\n        const definitionType = this.definitionsType(id);\n        assertDefinitionType(definitionType, `in Defined.fromId('${id}')`);\n        return Factory[definitionType].definitionFromId(id);\n    }\n    static fromObject(object) {\n        const { id, type } = object;\n        assertPopulatedString(id);\n        if (this.installed(id) || this.predefined(id))\n            return this.fromId(id);\n        const definitionType = type || this.definitionsType(id);\n        assertDefinitionType(definitionType);\n        return this.install(Factory[definitionType].definition(object));\n    }\n    static get ids() { return [...this.byId.keys()]; }\n    static install(definition) {\n        const { type, id } = definition;\n        // console.log(this.name, \"install\", JSON.stringify(definition))\n        if (this.installed(id)) {\n            // console.log(this.constructor.name, \"install REINSTALL\", type, id)\n            this.uninstall(definition);\n            return this.updateDefinition(this.fromId(id), definition);\n        }\n        // console.log(this.constructor.name, \"install\", type, id)\n        this.byIdAdd(definition);\n        this.byType(type).push(definition);\n        return definition;\n    }\n    static installed(id) { return this.byId.has(id); }\n    static predefined(id) {\n        if (id.startsWith(IdPrefix))\n            return true;\n        const definitionType = this.definitionsType(id);\n        if (!definitionType)\n            return false;\n        const array = this.byType(definitionType);\n        return array.some(definition => definition.id === id);\n    }\n    static undefineAll() {\n        // console.log(this.name, \"undefineAll\")\n        // TODO: be more graceful - tell definitions they are being destroyed...\n        this.byId = new Map();\n        this.definitionsByType = new Map();\n    }\n    static updateDefinition(oldDefinition, newDefinition) {\n        // console.log(this.name, \"updateDefinition\", oldDefinition.type, oldDefinition.id, \"->\", newDefinition.type, newDefinition.id)\n        this.uninstall(oldDefinition);\n        this.install(newDefinition);\n        return newDefinition;\n    }\n    static updateDefinitionId(oldId, newId) {\n        // console.log(this.name, \"updateDefinitionId\", oldId, \"->\", newId)\n        const definition = this.byId.get(oldId);\n        assertDefinition(definition);\n        this.byId.delete(oldId);\n        this.byId.set(newId, definition);\n    }\n    static uninstall(definition) {\n        this.definitionDelete(definition);\n        const { id } = definition;\n        this.byId.delete(id);\n        return definition;\n    }\n}\n\nconst colorRgbKeys = 'rgb'.split('');\nconst colorRgbaKeys = [...colorRgbKeys, 'a'];\nconst colorTransparent = '#00000000';\nconst colorBlack = '#000000';\nconst colorWhite = '#FFFFFF';\nconst colorWhiteTransparent = '#FFFFFF00';\nconst colorBlackTransparent = '#00000000';\nconst colorWhiteOpaque = '#FFFFFFFF';\nconst colorBlackOpaque = '#000000FF';\nconst colorGreen = '#00FF00';\nconst colorYellow = '#FFFF00';\nconst colorRed = '#FF0000';\nconst colorBlue = '#0000FF';\nvar Color;\n(function (Color) {\n    Color[\"Transparent\"] = \"#00000000\";\n    Color[\"Black\"] = \"#000000\";\n    Color[\"White\"] = \"#FFFFFF\";\n    Color[\"WhiteTransparent\"] = \"#FFFFFF00\";\n    Color[\"BlackTransparent\"] = \"#00000000\";\n    Color[\"WhiteOpaque\"] = \"#FFFFFFFF\";\n    Color[\"BlackOpaque\"] = \"#000000FF\";\n    Color[\"Green\"] = \"#00FF00\";\n    Color[\"Yellow\"] = \"#FFFF00\";\n    Color[\"Red\"] = \"#FF0000\";\n    Color[\"Blue\"] = \"#0000FF\";\n})(Color || (Color = {}));\nconst Colors = Object.values(Color);\nconst colorName = (color) => {\n    for (const entry of Object.entries(Color)) {\n        const [key, value] = entry;\n        if (value === color)\n            return key;\n    }\n    return '';\n};\nconst rgbValue = (value) => (Math.min(255, Math.max(0, Math.floor(Number(value)))));\nconst rgbNumeric = (rgb) => ({\n    r: rgbValue(rgb.r), g: rgbValue(rgb.g), b: rgbValue(rgb.b)\n});\nconst yuvNumeric = (rgb) => ({\n    y: rgbValue(rgb.y), u: rgbValue(rgb.u), v: rgbValue(rgb.v)\n});\nconst colorYuvToRgb = (yuv) => {\n    const floats = yuvNumeric(yuv);\n    return rgbNumeric({\n        r: floats.y + 1.4075 * (floats.v - 128),\n        g: floats.y - 0.3455 * (floats.u - 128) - (0.7169 * (floats.v - 128)),\n        b: floats.y + 1.7790 * (floats.u - 128)\n    });\n};\nconst colorRgbToHex = (rgb) => {\n    let r = rgb.r.toString(16);\n    let g = rgb.g.toString(16);\n    let b = rgb.b.toString(16);\n    if (r.length < 2)\n        r = `0${r}`;\n    if (g.length < 2)\n        g = `0${g}`;\n    if (b.length < 2)\n        b = `0${b}`;\n    return `#${r}${g}${b}`;\n};\nconst colorRgbaToHex = (object) => {\n    let r = object.r.toString(16);\n    let g = object.g.toString(16);\n    let b = object.b.toString(16);\n    let a = Math.round(255 * Number(object.a)).toString(16);\n    if (r.length < 2)\n        r = `0${r}`;\n    if (g.length < 2)\n        g = `0${g}`;\n    if (b.length < 2)\n        b = `0${b}`;\n    if (a.length < 2)\n        a = `0${a}`;\n    return `#${r}${g}${b}${a}`;\n};\nconst colorYuvDifference = (fromYuv, toYuv, similarity, blend) => {\n    const du = fromYuv.u - toYuv.u;\n    const dv = fromYuv.v - toYuv.v;\n    const diff = Math.sqrt((du * du + dv * dv) / (255.0 * 255.0));\n    if (blend > 0.0001) {\n        return Math.min(1.0, Math.max(0.0, (diff - similarity) / blend)) * 255.0;\n    }\n    return (diff > similarity) ? 255 : 0;\n};\nconst colorYuvBlend = (yuvs, yuv, similarity, blend) => {\n    let diff = 0.0;\n    const blendYuv = yuvNumeric(yuv);\n    yuvs.forEach(yuvObject => {\n        const numericYuv = yuvNumeric(yuvObject);\n        const du = numericYuv.u - blendYuv.u;\n        const dv = numericYuv.v - blendYuv.v;\n        diff += Math.sqrt((du * du + dv * dv) / (255.0 * 255.0));\n    });\n    diff /= yuvs.length;\n    if (blend > 0.0001) {\n        return Math.min(1.0, Math.max(0.0, (diff - similarity) / blend)) * 255.0;\n    }\n    return (diff > similarity) ? 255 : 0;\n};\nconst colorRgbToYuv = (rgb) => {\n    const ints = rgbNumeric(rgb);\n    return {\n        y: ints.r * 0.299000 + ints.g * 0.587000 + ints.b * 0.114000,\n        u: ints.r * -0.168736 + ints.g * -0.331264 + ints.b * 0.500000 + 128,\n        v: ints.r * 0.500000 + ints.g * -0.418688 + ints.b * -0.081312 + 128\n    };\n};\nconst colorRgbRegex = /^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/;\nconst colorRgbaRegex = /^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),(\\d*(?:\\.\\d+)?)\\)$/;\nconst colorHexRegex = /^#([A-Fa-f0-9]{3,4}){1,2}$/;\nconst colorStrip = (color) => color.toLowerCase().replaceAll(/[\\s]/g, '');\nconst colorValid = (color) => {\n    const stripped = colorStrip(color);\n    if (colorValidHex(stripped) || colorValidRgba(stripped) || colorValidRgb(stripped))\n        return true;\n    const style = new Option().style;\n    style.color = color;\n    const styleStripped = colorStrip(style.color);\n    if (!styleStripped)\n        return false;\n    if (colorValidRgba(stripped) || colorValidRgb(stripped))\n        return true;\n    return styleStripped === stripped;\n};\nconst colorValidHex = (value) => colorHexRegex.test(value);\nconst colorValidRgba = (value) => colorRgbaRegex.test(value);\nconst colorValidRgb = (value) => colorRgbRegex.test(value);\nconst getChunksFromString = (st, chunkSize) => st.match(new RegExp(`.{${chunkSize}}`, \"g\"));\nconst hex256 = (hexStr) => parseInt(hexStr.repeat(2 / hexStr.length), 16);\nconst colorAlpha = (value) => {\n    if (!isPositive(value))\n        return 1.0;\n    return Math.max(0, Math.min(1.0, value / 255));\n};\nconst colorHexToRgba = (hex) => {\n    if (!colorValidHex(hex))\n        return colorRgba;\n    const chunkSize = Math.floor((hex.length - 1) / 3);\n    const hexArr = getChunksFromString(hex.slice(1), chunkSize);\n    if (!hexArr)\n        return colorRgba;\n    const [r, g, b, a] = hexArr.map(hex256);\n    return { r, g, b, a: colorAlpha(a) };\n};\nconst colorHexToRgb = (hex) => {\n    if (!colorValidHex(hex))\n        return colorRgb;\n    const chunkSize = Math.floor((hex.length - 1) / 3);\n    const hexArr = getChunksFromString(hex.slice(1), chunkSize);\n    if (!hexArr)\n        return colorRgb;\n    const [r, g, b] = hexArr.map(hex256);\n    return { r, g, b };\n};\nconst colorRgbaToRgba = (value) => {\n    const color = colorStrip(value);\n    const rgbaMatch = color.match(colorRgbaRegex);\n    if (!rgbaMatch)\n        return colorRgba;\n    return {\n        r: Number(rgbaMatch[1]),\n        g: Number(rgbaMatch[2]),\n        b: Number(rgbaMatch[3]),\n        a: Number(rgbaMatch[4]),\n    };\n};\nconst colorToRgb = (value) => {\n    const color = colorStrip(value);\n    if (colorValidHex(color))\n        return colorHexToRgb(color);\n    const rgbMatch = color.match(colorRgbRegex);\n    if (!rgbMatch)\n        return colorRgb;\n    return {\n        r: Number(rgbMatch[1]),\n        g: Number(rgbMatch[2]),\n        b: Number(rgbMatch[3]),\n    };\n};\nconst colorToRgba = (value) => {\n    if (!colorValid(value))\n        return colorRgba;\n    const color = colorStrip(value);\n    if (colorValidHex(color))\n        return colorHexToRgba(color);\n    if (colorValidRgba(color))\n        return colorRgbaToRgba(color);\n    if (colorValidRgb(color))\n        return { a: 1.0, ...colorToRgb(color) };\n    return colorRgba;\n};\nconst colorAlphaColor = (value) => {\n    const toRgba = colorToRgba(value);\n    return { alpha: toRgba.a, color: colorRgbToHex(toRgba) };\n};\nconst colorFromRgb = (rgb) => {\n    const { r, g, b } = rgb;\n    return `rgb(${r},${g},${b})`;\n};\nconst colorFromRgba = (object) => {\n    const { r, g, b, a } = object;\n    return `rgb(${r},${g},${b},${a})`;\n};\nconst colorRgb = { r: 0, g: 0, b: 0 };\nconst colorRgba = { ...colorRgb, a: 1.0 };\nconst colorRgbaTransparent = { ...colorRgb, a: 0.0 };\nconst colorServer = (color) => {\n    if (!colorValidHex(color))\n        return color;\n    return `${color.slice(0, 7)}@0x${color.slice(-2)}`;\n};\nconst colorRgbDifference = (rgb) => {\n    const { r, g, b } = rgb;\n    return {\n        ...rgb,\n        r: 255 - r,\n        g: 255 - g,\n        b: 255 - b,\n    };\n};\n\nconst PropertyTypesNumeric = [\n    DataType.Frame,\n    DataType.Percent,\n    DataType.Number,\n];\nconst propertyTypeRepresentedAsNumber = (dataType) => {\n    return isDataType(dataType) && PropertyTypesNumeric.includes(dataType);\n};\nconst propertyTypeIsString = (dataType) => {\n    if (dataType === DataType.Boolean)\n        return false;\n    if (propertyTypeRepresentedAsNumber(dataType))\n        return false;\n    return true;\n};\nconst propertyTypeDefault = (dataType) => {\n    if (isDefinitionType(dataType))\n        return `${IdPrefix}${dataType}${IdSuffix}`;\n    switch (dataType) {\n        case DataType.Boolean: return false;\n        case DataType.Rgb: return colorBlack;\n    }\n    return propertyTypeRepresentedAsNumber(dataType) ? 0 : '';\n};\nconst propertyTypeValidBoolean = (value) => {\n    if (isBoolean(value))\n        return true;\n    if (isNumber(value))\n        return value === 0 || value === 1;\n    return ['true', 'false', ''].includes(value);\n};\nconst propertyTypeValid = (value, dataType) => {\n    if (isDefinitionType(dataType))\n        return isPopulatedString(value);\n    switch (dataType) {\n        case DataType.Boolean: return propertyTypeValidBoolean(value);\n        case DataType.Rgb: return colorValid(String(value));\n        case DataType.Frame:\n        case DataType.Percent:\n        case DataType.Number: return isNumeric(value);\n        case DataType.String: return true;\n        case DataType.ContainerId:\n        case DataType.ContentId:\n        case DataType.FontId:\n        case DataType.DefinitionId:\n        default: return isPopulatedString(value);\n    }\n    return false;\n};\nconst propertyTypeCoerce = (value, dataType) => {\n    if (dataType === DataType.Boolean) {\n        if (isBoolean(value))\n            return value;\n        if (isNumeric(value))\n            return !!Number(value);\n        return value === 'true';\n    }\n    if (propertyTypeRepresentedAsNumber(dataType))\n        return isNumeric(value) ? Number(value) : 0;\n    return String(value);\n};\n\nconst PropertyTweenSuffix = 'End';\nclass PropertiedClass {\n    constructor(..._args) { }\n    addProperties(object, ...properties) {\n        this.properties.push(...properties);\n        properties.forEach(property => {\n            this.propertyTweenSetOrDefault(object, property);\n            // console.log(this.constructor.name, \"property\", property.name, this[property.name])\n        });\n    }\n    properties = [];\n    get propertiesCustom() {\n        return this.properties.filter(property => property.custom);\n    }\n    propertiesInitialize(object) {\n        assertObject(object);\n        this.properties.forEach(property => this.propertyTweenSetOrDefault(object, property));\n    }\n    propertyFind(name) {\n        return this.properties.find(property => property.name === name);\n    }\n    propertyName(name) {\n        if (!name.endsWith(PropertyTweenSuffix))\n            return name;\n        return name.slice(0, -PropertyTweenSuffix.length);\n    }\n    propertySetOrDefault(object, property, name, defaultValue) {\n        const value = object[name];\n        const definedValue = isUndefined(value) ? defaultValue : value;\n        // if (name === 'contentId' || name === 'containerId') \n        // console.log(this.constructor.name, \"propertySetOrDefault\", name, definedValue, object)\n        this.setValue(definedValue, name, property);\n    }\n    propertyTweenSetOrDefault(object, property) {\n        const { name, defaultValue, tweenable } = property;\n        this.propertySetOrDefault(object, property, name, defaultValue);\n        if (tweenable)\n            this.propertySetOrDefault(object, property, `${name}${PropertyTweenSuffix}`);\n    }\n    setValue(value, name, property) {\n        if (isUndefined(value)) {\n            delete this[name];\n            return;\n        }\n        const propertyName = this.propertyName(name);\n        const found = property || this.propertyFind(propertyName);\n        assertTrue(found, `${this.constructor.name}.${propertyName} in ${this.properties.map(p => p.name).join(', ')}`);\n        const type = found.type;\n        if (!propertyTypeValid(value, type)) {\n            if (propertyName !== name) {\n                // tween end value can be undefined\n                delete this[name];\n            }\n            return;\n        }\n        const coerced = propertyTypeCoerce(value, type);\n        // console.log(this.constructor.name, \"setValue\", name, coerced)\n        this[name] = coerced;\n    }\n    setValues(object) {\n        Object.entries(object).forEach(([name, value]) => {\n            this.setValue(value, name);\n        });\n    }\n    toJSON() {\n        return Object.fromEntries(this.properties.flatMap(property => {\n            const { name, tweenable } = property;\n            const entries = [[name, this.value(name)]];\n            if (tweenable) {\n                const key = `${name}${PropertyTweenSuffix}`;\n                entries.push([key, this.value(key)]);\n            }\n            return entries;\n        }));\n    }\n    value(key) {\n        return this[key];\n    }\n}\nconst isPropertied = (value) => (value instanceof PropertiedClass);\n\nconst isInstanceObject = (value) => {\n    return isObject(value) && (\"definitionId\" in value || \"definition\" in value);\n};\nconst isInstance = (value) => {\n    return isObject(value) && \"definitionIds\" in value;\n};\n\nconst isTweenable = (value) => {\n    return isInstance(value) && isDefinition(value.definition);\n};\nfunction assertTweenable(value) {\n    if (!isTweenable(value))\n        throw new Error('expected Tweenable');\n}\nconst isTweenableDefinition = (value) => {\n    return isDefinition(value);\n};\nfunction assertTweenableDefinition(value) {\n    if (!isTweenableDefinition(value))\n        throw new Error('expected TweenableDefinition');\n}\n\nconst DefaultContainerId = `${IdPrefix}container${IdSuffix}`;\nconst TextContainerId = `${IdPrefix}container.text`;\nconst isContainerObject = (value) => {\n    return isObject(value) && \"opacity\" in value;\n};\nfunction assertContainerObject(value) {\n    if (!isContainerObject(value))\n        throwError(value, 'ContainerObject');\n}\nconst isContainerDefinition = (value) => {\n    return isTweenableDefinition(value) && isContainerType(value.type);\n};\nconst isContainer = (value) => {\n    return isTweenable(value) && isContainerType(value.type);\n};\nfunction assertContainer(value) {\n    if (!isContainer(value))\n        throw new Error('expected Container');\n}\n\nconst isPoint = (value) => {\n    return isObject(value) && isNumber(value.x) && isNumber(value.y);\n};\nfunction assertPoint(value, name) {\n    if (!isPoint(value))\n        throwError(value, 'Point', name);\n}\nconst pointsEqual = (point, pointEnd) => {\n    if (!isPoint(pointEnd))\n        return false;\n    return point.x === pointEnd.x && point.y === pointEnd.y;\n};\nconst PointZero = { x: 0, y: 0 };\nconst pointCopy = (point) => {\n    // assertPoint(point)\n    const { x, y } = point;\n    return { x, y };\n};\nconst pointRound = (point) => {\n    const { x, y } = point;\n    return { x: Math.round(x), y: Math.round(y) };\n};\nconst pointString = (point) => {\n    const { x, y } = point;\n    return `x=${x};y=${y}`;\n};\nconst pointValueString = (point) => {\n    const { x, y } = point;\n    return `${x},${y}`;\n};\nconst pointNegate = (point) => {\n    const { x, y } = point;\n    return { x: -x, y: -y };\n};\n\nconst isSize = (value) => {\n    return isObject(value) && isNumber(value.width) && isNumber(value.height);\n};\nfunction assertSize(value, name) {\n    if (!isSize(value))\n        throwError(value, 'Size', name);\n}\nconst sizesEqual = (size, sizeEnd) => {\n    if (!isSize(sizeEnd))\n        return false;\n    return size.width === sizeEnd.width && size.height === sizeEnd.height;\n};\nconst SizeZero = { width: 0, height: 0 };\nconst sizedEven = (number) => {\n    return 2 * Math.max(1, Math.ceil(number / 2));\n};\nconst sizeEven = (size) => {\n    const { width, height } = size;\n    return {\n        width: sizedEven(width), height: sizedEven(height),\n    };\n};\nconst sizeRound = (point) => {\n    const { width, height } = point;\n    return { width: Math.round(width), height: Math.round(height) };\n};\nconst sizeCeil = (size) => {\n    const { width, height } = size;\n    return {\n        width: Math.max(2, Math.ceil(width)),\n        height: Math.max(2, Math.ceil(height)),\n    };\n};\nconst sizeFloor = (size) => {\n    const { width, height } = size;\n    return {\n        width: Math.max(2, Math.floor(width)),\n        height: Math.max(2, Math.floor(height)),\n    };\n};\nconst sizeScale = (size, horizontally, vertically) => {\n    const { width, height } = size;\n    return { width: width * horizontally, height: height * vertically };\n};\nconst sizeCover = (inSize, outSize, contain = false) => {\n    assertSizeAboveZero(inSize, 'sizeCover');\n    assertSize(outSize);\n    const { width: inWidth, height: inHeight } = inSize;\n    const { width, height } = outSize;\n    const scaleWidth = width / inWidth;\n    const scaleHeight = height / inHeight;\n    const useWidth = contain ? scaleWidth < scaleHeight : scaleWidth > scaleHeight;\n    if (useWidth) {\n        return sizeCeil({ ...outSize, height: inHeight * scaleWidth });\n    }\n    return sizeCeil({ ...outSize, width: inWidth * scaleHeight });\n};\nconst sizeAboveZero = (size) => {\n    if (!isSize(size))\n        return false;\n    const { width, height } = size;\n    return isAboveZero(width) && isAboveZero(height);\n};\nfunction assertSizeAboveZero(size, name) {\n    if (!sizeAboveZero(size))\n        throwError(size, 'SizeAboveZero', name);\n}\nconst SizeOutput = { width: 1920, height: 1080 };\nconst SizePreview = sizeScale(SizeOutput, 0.25, 0.25);\nconst SizeIcon = sizeScale(SizePreview, 0.5, 0.5);\nconst sizeCopy = (size) => {\n    // assertSize(size)\n    const { width, height } = size;\n    return { width, height };\n};\nconst sizeLock = (lockSize, lock) => {\n    const copy = sizeCopy(lockSize);\n    switch (lock) {\n        case Orientation.H:\n            copy.width = copy.height;\n            break;\n        case Orientation.V:\n            copy.height = copy.width;\n            break;\n    }\n    return copy;\n};\nconst sizeString = (size) => {\n    const { width, height } = size;\n    return `width=${width};height=${height}`;\n};\nconst sizeLockNegative = (size, lock) => {\n    assertSizeAboveZero(size, 'sizeLockNegative');\n    const locked = sizeCopy(size);\n    if (lock) {\n        if (lock === Orientation.V)\n            locked.height = -1;\n        else\n            locked.width = -1;\n    }\n    return locked;\n};\nconst sizeFromElement = (element) => {\n    const size = {\n        width: Number(element.getAttribute('width')),\n        height: Number(element.getAttribute('height'))\n    };\n    assertSizeAboveZero(size, 'sizeFromElement');\n    return size;\n};\n\nconst isRect = (value) => {\n    return isSize(value) && isPoint(value);\n};\nfunction assertRect(value, name) {\n    if (!isRect(value))\n        throwError(value, 'Rect', name);\n}\nconst rectsEqual = (rect, rectEnd) => {\n    if (!isRect(rectEnd))\n        return false;\n    return pointsEqual(rect, rectEnd) && sizesEqual(rect, rectEnd);\n};\nconst RectZero = { ...PointZero, ...SizeZero };\nconst rectFromSize = (size, point) => {\n    const definedPoint = point || PointZero;\n    const { width, height } = size;\n    return {\n        x: definedPoint.x, y: definedPoint.y, width, height,\n    };\n};\nconst rectsFromSizes = (sizes, points) => {\n    const definedPoints = points || [PointZero, PointZero];\n    const [size, sizeEnd] = sizes;\n    const [point, pointEnd] = definedPoints;\n    return [rectFromSize(size, point), rectFromSize(sizeEnd, pointEnd)];\n};\nconst rectCopy = (rect) => {\n    return { ...pointCopy(rect), ...sizeCopy(rect) };\n};\nconst rectRound = (rect) => {\n    return { ...sizeRound(rect), ...pointRound(rect) };\n};\nconst centerPoint = (size, inSize) => {\n    return {\n        x: Math.round((size.width - inSize.width) / 2),\n        y: Math.round((size.height - inSize.height) / 2)\n    };\n};\nconst rectString = (dimensions) => {\n    const bits = [];\n    if (isSize(dimensions))\n        bits.push(sizeString(dimensions));\n    if (isPoint(dimensions))\n        bits.push(pointString(dimensions));\n    return bits.join(';');\n};\n\nconst arrayLast = (array) => array[array.length - 1];\nconst arraySet = (array, items) => {\n    array.splice(0, array.length, ...items);\n    return array;\n};\nconst arrayReversed = (array) => {\n    return [...array].reverse();\n};\nconst arrayUnique = (array) => {\n    return [...new Set(array)];\n};\n\nvar DataGroup;\n(function (DataGroup) {\n    DataGroup[\"Point\"] = \"point\";\n    DataGroup[\"Size\"] = \"size\";\n    DataGroup[\"Opacity\"] = \"opacity\";\n    DataGroup[\"Color\"] = \"color\";\n    DataGroup[\"Effects\"] = \"effects\";\n    DataGroup[\"Timing\"] = \"timing\";\n    DataGroup[\"Sizing\"] = \"sizing\";\n})(DataGroup || (DataGroup = {}));\nconst DataGroups = Object.values(DataGroup);\nconst isDataGroup = (value) => {\n    return DataGroups.includes(value);\n};\nfunction assertDataGroup(value, name) {\n    if (!isDataGroup(value))\n        throwError(value, \"DataGroup\", name);\n}\nconst isProperty = (value) => {\n    return isObject(value) && \"type\" in value && isDataType(value.type);\n};\nfunction assertProperty(value, name) {\n    if (!isProperty(value))\n        throwError(value, 'Property', name);\n}\nconst propertyType = (type, value) => {\n    if (isUndefined(type)) {\n        if (isBoolean(value))\n            return DataType.Boolean;\n        if (isNumber(value))\n            return DataType.Number;\n        return DataType.String;\n    }\n    assertDataType(type);\n    return type;\n};\nconst propertyValue = (type, value) => {\n    if (isUndefined(value))\n        return propertyTypeDefault(type);\n    return value;\n};\nconst propertyInstance = (object) => {\n    const { type, name, defaultValue, ...rest } = object;\n    const dataType = propertyType(type, defaultValue);\n    const dataValue = propertyValue(dataType, defaultValue);\n    const dataName = isPopulatedString(name) ? name : dataType;\n    const property = {\n        type: dataType, defaultValue: dataValue, name: dataName, ...rest\n    };\n    switch (type) {\n        case DataType.Percent: {\n            if (isUndefined(property.max))\n                property.max = 1.0;\n            if (isUndefined(property.min))\n                property.min = 0.0;\n            if (isUndefined(property.step))\n                property.step = 0.01;\n            break;\n        }\n    }\n    return property;\n};\n\nconst $invalid = \"Invalid\";\nconst $unknown = \"Unknown\";\nconst $expected = \"Expected\";\nconst $invalidArgument = `${$invalid} argument `;\nconst $invalidProperty = `${$invalid} property `;\nconst $invalidDefinitionProperty = `${$invalid} definition property`;\nconst $internal = \"Internal Error \";\nconst Errors = {\n    eval: {\n        sourceRect: `${$invalid} evaluation of source rect `,\n        outputSize: `${$invalid} evaluation of output size `,\n        inputSize: `${$invalid} evaluation of input size `,\n        conditionTruth: `${$expected} at least one condition to evaluate to true `,\n        conditionValue: `${$expected} condition to have a value `,\n        number: `${$expected} evaluated number for `,\n        get: `${$expected} to get evaluated value `,\n        string: `${$invalid} evaluation string `,\n    },\n    composition: { mashUndefined: `${$internal}composition.mash undefined` },\n    audibleContext: `${$expected} AudioContext`,\n    mash: `${$expected} mash`,\n    action: `${$expected} Action`,\n    actions: `${$expected} Actions`,\n    internal: $internal,\n    argument: `${$invalidArgument}`,\n    invalid: {\n        canvas: `${$invalidProperty}canvas `,\n        context: `${$invalidProperty}context `,\n        duration: `${$invalid} duration`,\n        definition: {\n            audio: `${$invalidDefinitionProperty} audio|url`,\n            url: `${$invalidDefinitionProperty} url`,\n            source: `${$invalidDefinitionProperty} source`,\n            id: `${$invalidDefinitionProperty} id `,\n            object: `${$invalidProperty}definition`,\n            type: `${$invalidDefinitionProperty} type `,\n        },\n        size: `${$invalid} size `,\n        track: `${$invalid} track `,\n        trackType: `${$invalidProperty}trackType `,\n        action: `${$invalid} action `,\n        name: `${$invalidProperty}name `,\n        value: `${$invalidProperty}value `,\n        type: `${$invalidProperty}type `,\n        url: `${$invalidProperty}url `,\n        user: 'Unauthenticated',\n        property: $invalidProperty,\n        argument: $invalidArgument,\n        object: `${$invalidArgument}object `,\n        factory: `${$invalid} factory `,\n        volume: `${$invalidArgument}volume`,\n    },\n    type: `${$unknown} type `,\n    selection: `${$invalid} selection `,\n    unknown: {\n        type: `${$unknown} type `,\n        merger: `${$unknown} merger `,\n        effect: `${$unknown} effect `,\n        filter: `${$unknown} filter `,\n        font: `${$unknown} font `,\n        scaler: `${$unknown} scalar `,\n        definition: `${$unknown} definition `,\n    },\n    uncached: \"Uncached URL \",\n    object: `${$invalidArgument}object `,\n    array: `${$invalidArgument}array `,\n    media: `${$invalidArgument}media `,\n    id: `${$invalidArgument}id `,\n    frame: `${$invalidArgument}frame `,\n    frames: `${$invalidProperty}frames `,\n    fps: `${$invalidArgument}fps `,\n    seconds: `${$invalidArgument}seconds `,\n    url: `${$invalidArgument}url `,\n    time: `${$invalidArgument}Time`,\n    timeRange: `${$invalidArgument}TimeRange`,\n    mainTrackOverlap: `${$internal}: main track clips overlap without transition`,\n    unknownMash: `${$unknown} Mash property `,\n    unimplemented: `${$expected} method to be overridden `,\n    property: `${$invalidArgument}property `,\n    wrongClass: `${$expected} instance of `,\n};\n\nclass Parameter {\n    constructor({ name, value, dataType, values }) {\n        if (!name)\n            throw Errors.invalid.name;\n        this.values = values;\n        this.name = name;\n        if (isUndefined(value)) {\n            if (this.values?.length)\n                this.value = this.values[0];\n            else\n                throw Errors.invalid.value;\n        }\n        else\n            this.value = value;\n        if (dataType && DataTypes.map(String).includes(dataType)) {\n            this.dataType = dataType;\n        }\n        else {\n            let numeric = false;\n            if (Array.isArray(this.value)) {\n                numeric = this.value.every(condition => isNumeric(condition.value));\n            }\n            else\n                numeric = isNumeric(this.value);\n            if (numeric)\n                this.dataType = DataType.Number;\n        }\n    }\n    dataType = DataType.String;\n    name;\n    toJSON() {\n        return { name: this.name, value: this.value };\n    }\n    value;\n    values;\n}\n\nconst Id = {\n    count: 0,\n    prefix: '',\n    countsByPrefix: {}\n};\nconst idGenerateString = () => {\n    const components = [];\n    if (Id.prefix)\n        components.push(Id.prefix);\n    components.push(Date.now().toString(36));\n    components.push(Math.random().toString(36).slice(2));\n    return components.join('-');\n};\nconst idPrefixSet = (prefix) => { Id.prefix = prefix; };\nconst idTemporary = () => {\n    const { prefix } = Id;\n    const components = [];\n    if (prefix) {\n        components.push(prefix);\n        Id.countsByPrefix[prefix] ||= 0;\n        components.push(String(Id.countsByPrefix[prefix]++));\n    }\n    else\n        components.push(String(Id.count++));\n    return components.join('');\n};\nconst idGenerate = (prefix = Id.prefix) => {\n    const components = [];\n    if (prefix) {\n        components.push(prefix);\n        Id.countsByPrefix[prefix] ||= 0;\n        components.push(String(Id.countsByPrefix[prefix]++));\n    }\n    else\n        components.push(String(Id.count++));\n    return components.join('');\n};\nconst idIsTemporary = (id) => {\n    if (!isPopulatedString(Id.prefix))\n        return false;\n    return id.startsWith(Id.prefix);\n};\n\nclass InstanceBase extends PropertiedClass {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        assertPopulatedObject(object);\n        const { definition } = object;\n        assertDefinition(definition);\n        this.definition = definition;\n        this.properties.push(...this.definition.properties);\n        this.propertiesInitialize(object);\n    }\n    copy() {\n        return this.definition.instanceFromObject(this.toJSON());\n    }\n    definition;\n    get definitionId() { return this.definition.id; }\n    definitionIds() { return [this.definitionId]; }\n    _id;\n    get id() { return this._id ||= idGenerateString(); }\n    _label = '';\n    get label() { return this._label; }\n    //|| this.definition.label || this.id\n    set label(value) { this._label = value; }\n    get propertyNames() {\n        return this.properties.map(property => property.name);\n    }\n    toJSON() {\n        const json = super.toJSON();\n        const { definitionId, type, label } = this;\n        if (label)\n            json.label = label;\n        json.type = type;\n        json.definitionId = definitionId;\n        return json;\n    }\n    get type() { return this.definition.type; }\n}\n\nconst svgId = (id) => {\n    return `#${id}`;\n};\nconst svgUrl = (id) => {\n    return `url(${svgId(id)})`;\n};\nconst svgGroupElement = (dimensions, id = '') => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'g');\n    svgSet(element, id);\n    svgSetDimensions(element, dimensions);\n    return element;\n};\nconst svgSetDimensions = (element, dimensions) => {\n    if (isSize(dimensions)) {\n        const { width, height } = dimensions;\n        if (isPositive(width))\n            svgSet(element, String(width), 'width');\n        if (isPositive(height))\n            svgSet(element, String(height), 'height');\n    }\n    if (isPoint(dimensions)) {\n        const { x, y } = dimensions;\n        svgSet(element, String(x), 'x');\n        svgSet(element, String(y), 'y');\n    }\n};\nconst svgSetTransformPoint = (element, point) => {\n    assertPoint(point);\n    const { x, y } = point;\n    if (!(x || y))\n        return;\n    svgSetTransform(element, `translate(${x}, ${y})`);\n};\nconst svgRectPoints = (dimensions) => {\n    const { width, height, x = 0, y = 0 } = dimensions;\n    const startEndPoint = { x, y };\n    const points = [];\n    points.push(startEndPoint);\n    points.push({ x: x + width, y });\n    points.push({ x: x + width, y: y + height });\n    points.push({ x, y: y + height });\n    points.push(startEndPoint);\n    return points;\n};\nconst svgPolygonElement = (dimensions, className, fill = '', id) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'polygon');\n    const rectPoints = svgRectPoints(dimensions);\n    const points = rectPoints.map(point => [point.x, point.y].join(',')).join(' ');\n    svgSet(element, points, 'points');\n    svgSet(element, fill, 'fill');\n    svgAddClass(element, className);\n    svgSet(element, id);\n    return element;\n};\nconst svgSetBox = (element, boxSize) => {\n    assertSizeAboveZero(boxSize, 'svgSetBox');\n    const justSize = sizeCopy(boxSize);\n    const { width, height } = justSize;\n    svgSetDimensions(element, justSize);\n    const viewBox = `0 0 ${width} ${height}`;\n    svgSet(element, viewBox, 'viewBox');\n};\nconst svgElement = (size, svgItems) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'svg');\n    svgSet(element, '1.1', 'version');\n    svgSet(element, NamespaceSvg, 'xmlns');\n    svgAppend(element, svgItems);\n    if (!sizeAboveZero(size))\n        return element;\n    svgSetBox(element, size);\n    return element;\n};\nconst svgSetDimensionsLock = (element, dimensions, lock) => {\n    assertSizeAboveZero(dimensions);\n    if (!lock)\n        svgSet(element, 'none', 'preserveAspectRatio');\n    const rect = {\n        ...sizeLockNegative(dimensions, lock),\n        ...pointCopy(dimensions)\n    };\n    svgSetDimensions(element, rect);\n};\nconst svgImageElement = () => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, \"image\");\n    svgSet(element, 'none', 'preserveAspectRatio');\n    return element;\n};\nconst svgPathElement = (path, fill = 'currentColor') => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'path');\n    svgSet(element, path, 'd');\n    svgSet(element, fill, 'fill');\n    return element;\n};\nconst svgMaskElement = (size, contentItem, luminance) => {\n    const maskId = idGenerateString();\n    const maskElement = globalThis.document.createElementNS(NamespaceSvg, 'mask');\n    svgSet(maskElement, maskId);\n    if (sizeAboveZero(size)) {\n        // svgSetDimensions(maskElement, size)\n        const color = luminance ? 'black' : 'none';\n        svgAppend(maskElement, svgPolygonElement(size, '', color));\n    }\n    if (contentItem) {\n        svgSet(contentItem, svgUrl(maskId), 'mask');\n        if (luminance)\n            svgSet(contentItem, 'luminance', 'mask-mode');\n    }\n    return maskElement;\n};\nconst svgFilter = (values, dimensions) => {\n    const { filter, ...rest } = values;\n    assertPopulatedString(filter);\n    const element = globalThis.document.createElementNS(NamespaceSvg, filter);\n    svgSetDimensions(element, dimensions);\n    Object.entries(rest).forEach(([key, value]) => {\n        svgSet(element, String(value), key);\n    });\n    return element;\n};\nconst svgAppend = (element, items) => {\n    if (!items)\n        return;\n    const kids = isArray(items) ? items : [items];\n    kids.forEach(kid => element.appendChild(kid));\n};\nconst svgPatternElement = (dimensions, id, items) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'pattern');\n    svgSet(element, id);\n    svgSetBox(element, dimensions);\n    svgSet(element, 'userSpaceOnUse', 'patternUnits');\n    svgAppend(element, items);\n    return element;\n};\nconst svgDefsElement = (svgItems) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'defs');\n    svgAppend(element, svgItems);\n    return element;\n};\nconst svgFeImageElement = (id, result) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'feImage');\n    if (isPopulatedString(id))\n        svgSet(element, svgId(id), 'href');\n    svgSet(element, result, 'result');\n    return element;\n};\nconst svgFilterElement = (filters, filtered, rect, units = 'userSpaceOnUse') => {\n    const filterElement = globalThis.document.createElementNS(NamespaceSvg, 'filter');\n    if (units)\n        svgSet(filterElement, units, 'filterUnits');\n    svgSet(filterElement, 'sRGB', 'color-interpolation-filters');\n    svgAppend(filterElement, filters);\n    if (filtered) {\n        const filterId = idGenerateString();\n        svgSet(filterElement, filterId);\n        if (filtered) {\n            const array = isArray(filtered) ? filtered : [filtered];\n            array.forEach(filtered => {\n                svgSet(filtered, svgUrl(filterId), 'filter');\n                svgAddClass(filtered, 'filtered');\n            });\n        }\n    }\n    svgSetDimensions(filterElement, rect);\n    return filterElement;\n};\nconst svgDifferenceDefs = (overlayId, filtered) => {\n    const filterObject = { filter: 'feBlend' };\n    const resultId = idGenerateString();\n    const differenceFilter = svgFilter({ ...filterObject, mode: 'difference' });\n    svgSet(differenceFilter, resultId, 'in');\n    svgSet(differenceFilter, 'SourceGraphic', 'in2');\n    const image = svgFeImageElement(overlayId, resultId);\n    const filter = svgFilterElement([image, differenceFilter], filtered, PointZero);\n    svgSet(filter, '100%', 'width');\n    svgSet(filter, '100%', 'height');\n    return filter;\n};\nconst svgSet = (element, value, name = 'id') => {\n    if (isPopulatedString(value))\n        element.setAttribute(name, value);\n};\nconst svgAddClass = (element, className) => {\n    if (!className)\n        return;\n    const array = isArray(className) ? className : className.split(' ');\n    element.classList.add(...array);\n};\nconst svgUseElement = (href, className, id) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, 'use');\n    if (isPopulatedString(href))\n        svgSet(element, svgId(href), 'href');\n    svgSet(element, id);\n    svgAddClass(element, className);\n    return element;\n};\nconst svgSetTransform = (element, transform, origin = 'top left') => {\n    svgSet(element, transform, 'transform');\n    svgSet(element, origin, 'transform-origin');\n};\nconst svgTransform = (dimensions, rect) => {\n    assertSizeAboveZero(dimensions, 'svgTransform.dimensions');\n    assertSizeAboveZero(rect, 'svgTransform.rect');\n    const { width: inWidth, height: inHeight } = dimensions;\n    const { width: outWidth, height: outHeight, x: outX, y: outY } = rect;\n    const scaleWidth = outWidth / inWidth;\n    const scaleHeight = outHeight / inHeight;\n    const words = [];\n    if (!(outX === 0 && outY === 0))\n        words.push(`translate(${outX},${outY})`);\n    if (!(scaleWidth === 1 && scaleHeight === 1)) {\n        words.push(`scale(${scaleWidth},${scaleHeight})`);\n    }\n    if (isPoint(dimensions)) {\n        const { x: inX, y: inY } = (dimensions);\n        if (!(inX === 0 && inY === 0))\n            words.push(`translate(${inX},${inY})`);\n    }\n    return words.join(' ');\n};\nconst svgSetTransformRects = (element, dimensions, rect) => {\n    svgSetTransform(element, svgTransform(dimensions, rect));\n};\nconst svgFunc = (type, values) => {\n    const element = globalThis.document.createElementNS(NamespaceSvg, type);\n    svgSet(element, values, 'tableValues');\n    svgSet(element, 'discrete', 'type');\n    return element;\n};\nconst svgSetChildren = (element, svgItems) => {\n    if (!element.hasChildNodes())\n        return svgAppend(element, svgItems);\n    const { childNodes } = element;\n    const nodes = [];\n    childNodes.forEach(node => {\n        if (!svgItems.includes(node))\n            nodes.push(node);\n    });\n    nodes.forEach(node => { element.removeChild(node); });\n    svgItems.forEach(node => element.appendChild(node));\n};\n\nconst isLoadedVideo = (value) => {\n    return value instanceof HTMLVideoElement;\n};\nconst isLoadedImage = (value) => {\n    return value instanceof HTMLImageElement;\n};\nconst isLoadedAudio = (value) => {\n    return value instanceof AudioBuffer;\n};\nconst isLoaderType = (value) => {\n    return isLoadType(value) || isGraphFileType(value);\n};\nfunction assertLoaderType(value, name) {\n    if (!isLoaderType(value))\n        throwError(value, \"LoaderType\", name);\n}\nconst isLoaderPath = (value) => {\n    return isPopulatedString(value) && value.includes(':');\n};\nfunction assertLoaderPath(value, name) {\n    if (!isLoaderPath(value))\n        throwError(value, \"LoaderPath\", name);\n}\n\nconst urlEndpoint = (endpoint = {}) => {\n    const { baseURI } = globalThis.document;\n    const url = new URL(baseURI);\n    const { protocol: withColon, host: hostWithPort, pathname: prefix, port } = url;\n    const host = hostWithPort.split(':').shift();\n    const protocol = withColon.slice(0, -1);\n    const result = { protocol, host, prefix, ...endpoint };\n    if (isNumeric(port))\n        result.port = Number(port);\n    // console.log(\"urlEndpoint\", baseURI, \"=>\", result)\n    return result;\n};\nconst urlIsObject = (url) => url.startsWith('object:/');\nconst urlIsHttp = (url) => url.startsWith('http');\nconst urlHasProtocol = (url) => url.includes(':');\nconst urlCombine = (url, path) => {\n    const urlStripped = url.endsWith('/') ? url.slice(0, -1) : url;\n    const pathStripped = path.startsWith('/') ? path.slice(1) : path;\n    return urlStripped + '/' + pathStripped;\n};\nconst urlFromEndpoint = (endpoint) => {\n    const mergedEndpoint = urlEndpoint(endpoint);\n    const { port, prefix, host, protocol } = mergedEndpoint;\n    assertPopulatedString(host);\n    assertPopulatedString(protocol);\n    const bits = [];\n    bits.push(protocol, '://', host);\n    if (isNumeric(port))\n        bits.push(':', String(port));\n    const url = bits.join('');\n    const combined = prefix ? urlCombine(url, prefix) : url;\n    // console.log(\"urlFromEndpoint\", endpoint, \"=>\", combined)\n    return combined;\n};\nconst urlForEndpoint = (endpoint, suffix = '') => {\n    if (suffix && urlHasProtocol(suffix))\n        return suffix;\n    const base = urlFromEndpoint(endpoint);\n    const slashed = base.endsWith('/') ? base : base + '/';\n    if (!urlHasProtocol(slashed))\n        return slashed + suffix;\n    const url = new URL(suffix, slashed);\n    const { href } = url;\n    return href;\n};\nconst urlIsRootProtocol = (protocol) => {\n    return protocol === 'object' || urlIsHttp(protocol) || !isLoaderType(protocol);\n};\nconst urlProtocol = (string) => {\n    const colonIndex = string.indexOf(':');\n    if (isAboveZero(colonIndex))\n        return string.slice(0, colonIndex);\n    return '';\n};\nconst urlParse = (string) => {\n    const colonIndex = string.indexOf(':');\n    const slashIndex = string.indexOf('/');\n    if (!(isPositive(colonIndex) && isPositive(slashIndex)))\n        return [];\n    const protocol = string.slice(0, colonIndex);\n    const options = string.slice(colonIndex + 1, slashIndex);\n    const rest = string.slice(slashIndex + 1);\n    return [protocol, options, rest];\n};\nconst urlsParsed = (string) => {\n    if (!string)\n        return [];\n    const urls = [urlParse(string)];\n    let lastPath = '';\n    while (lastPath = arrayLast(arrayLast(urls))) {\n        const parsed = urlParse(lastPath);\n        if (!parsed.length)\n            break;\n        const [protocol, _, path] = parsed;\n        if (protocol === 'object' || urlIsHttp(protocol))\n            break;\n        urls.push(parsed);\n        if (urlIsRootProtocol(urlProtocol(path)))\n            break;\n    }\n    return urls;\n};\nconst urlsAbsolute = (string, endpoint) => {\n    if (!string || urlIsRootProtocol(urlProtocol(string)))\n        return [];\n    const urls = urlsParsed(string);\n    const lastUrl = arrayLast(urls);\n    if (!lastUrl)\n        return urls;\n    const path = arrayLast(lastUrl);\n    if (urlIsObject(path) || urlIsHttp(path))\n        return urls;\n    let absolute = urlForEndpoint(endpoint, path);\n    const { length } = urls;\n    for (let i = length - 1; i > -1; i--) {\n        const url = urls[i];\n        const [protocol, options] = url;\n        url[2] = absolute;\n        absolute = `${protocol}:${options}/${absolute}`;\n    }\n    return urls;\n};\nconst urlOptionsObject = (options) => {\n    if (!isPopulatedString(options))\n        return;\n    // console.log(\"parseOptions\", type, options)\n    const pairs = options.split(';');\n    const entries = pairs.map(pair => {\n        const [key, string] = pair.split('=');\n        const value = isNumeric(string) ? Number(string) : string;\n        return [key, value];\n    });\n    return Object.fromEntries(entries);\n};\nconst urlOptions = (options) => {\n    if (!options)\n        return '';\n    return Object.entries(options).map(entry => entry.join('=')).join(';');\n};\nconst urlPrependProtocol = (protocol, url, options) => {\n    if (url.startsWith(protocol) && !options)\n        return url;\n    return `${protocol}:${urlOptions(options)}/${url}`;\n};\n\nclass DefinitionBase {\n    constructor(...args) {\n        const [object] = args;\n        const { id, label, icon } = object;\n        assertPopulatedString(id, 'id');\n        this.id = id;\n        if (isPopulatedString(label))\n            this.label = label;\n        if (isPopulatedString(icon))\n            this.icon = icon;\n    }\n    icon;\n    id;\n    definitionIcon(loader, size) {\n        const { icon } = this;\n        if (!icon) {\n            // console.log(this.constructor.name, \"definitionIcon NO ICON\")\n            return;\n        }\n        // console.log(this.constructor.name, \"definitionIcon\", icon)\n        return this.urlIcon(icon, loader, size);\n    }\n    instanceFromObject(object = {}) {\n        return new InstanceBase(this.instanceArgs(object));\n    }\n    instanceArgs(object = {}) {\n        const defaults = Object.fromEntries(this.properties.map(property => ([property.name, property.defaultValue])));\n        return { ...defaults, ...object, definition: this };\n    }\n    label = '';\n    properties = [];\n    get propertiesModular() {\n        return this.properties.filter(property => isDefinitionType(property.type));\n    }\n    toJSON() {\n        const object = { id: this.id, type: this.type };\n        if (this.icon)\n            object.icon = this.icon;\n        if (this.label !== this.id)\n            object.label = this.label;\n        return object;\n    }\n    toString() { return this.label; }\n    type;\n    urlIcon(url, loader, size) {\n        const imageUrl = urlPrependProtocol('image', url);\n        // console.log(this.constructor.name, \"urlIcon\", imageUrl)\n        return loader.loadPromise(imageUrl).then((image) => {\n            // console.log(this.constructor.name, \"urlIcon.loadPromise\", imageUrl, image?.constructor.name)\n            const { width, height } = image;\n            const inSize = { width, height };\n            const coverSize = sizeCover(inSize, size, true);\n            const outRect = { ...coverSize, ...centerPoint(size, coverSize) };\n            const svgUrl = urlPrependProtocol('svg', imageUrl, outRect);\n            // console.log(this.constructor.name, \"urlIcon\", svgUrl)\n            return loader.loadPromise(svgUrl).then(svgImage => {\n                // console.log(this.constructor.name, \"urlIcon.loadPromise\", svgUrl, svgImage?.constructor.name)\n                return svgElement(size, svgImage);\n            });\n        });\n    }\n    static fromObject(object) {\n        const { id, type } = object;\n        assertDefinitionType(type);\n        assertPopulatedString(id, 'id');\n        return Factory[type].definition(object);\n    }\n}\n\nclass FilterClass extends InstanceBase {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        if (!isPopulatedObject(object))\n            throw Errors.invalid.object + 'filter';\n        const { parameters } = object;\n        if (parameters?.length)\n            this.parameters.push(...parameters.map(parameter => {\n                const { name, dataType } = parameter;\n                if (!dataType) {\n                    // try to determine type from same parameter in definition\n                    const existing = this.definition.parameters.find(p => p.name === name);\n                    if (existing)\n                        parameter.dataType = existing.dataType;\n                }\n                // console.log(this.constructor.name, \"constructor\", parameter)\n                return new Parameter(parameter);\n            }));\n    }\n    commandFilters(args) {\n        return this.definition.commandFilters({ ...args, filter: this });\n    }\n    parameters = [];\n    _parametersDefined;\n    get parametersDefined() {\n        if (this._parametersDefined)\n            return this._parametersDefined;\n        const parameters = [...this.parameters];\n        parameters.push(...this.definition.parameters.filter(parameter => !parameters.find(p => p.name === parameter.name)));\n        return this._parametersDefined = parameters;\n    }\n    filterSvg(args = {}) {\n        return this.definition.filterDefinitionSvg({ ...args, filter: this });\n    }\n    filterSvgFilter() {\n        const valueObject = this.scalarObject();\n        return this.definition.filterDefinitionSvgFilter(valueObject);\n    }\n    scalarObject(tweening = false) {\n        const object = {};\n        const { parametersDefined } = this;\n        parametersDefined.forEach(parameter => {\n            const { name, value } = parameter;\n            if (isPopulatedString(value)) {\n                const property = this.properties.find(property => value === property.name);\n                if (property)\n                    return;\n            }\n            if (isNumber(value) || isString(value))\n                object[name] = value;\n        });\n        this.properties.forEach(property => {\n            const { tweenable, name } = property;\n            if (isDefined(object[name]))\n                return;\n            object[name] = this.value(name);\n            if (!(tweening && tweenable))\n                return;\n            const key = `${name}${PropertyTweenSuffix}`;\n            object[key] = this.value(key);\n        });\n        // console.log(this.constructor.name, \"scalerObject\", object, parametersDefined.map(p => p.name))\n        return object;\n    }\n    toJSON() {\n        const object = { id: this.definitionId };\n        if (this.parameters.length)\n            object.parameters = this.parameters;\n        return object;\n    }\n    toString() {\n        return `[Filter ${this.label}]`;\n    }\n}\n\nclass FilterDefinitionClass extends DefinitionBase {\n    commandFilters(args) {\n        const { filter, duration, filterInput } = args;\n        assertPopulatedString(filterInput);\n        const commandFilters = [];\n        const options = filter.scalarObject(!!duration);\n        assertValueObject(options);\n        const { ffmpegFilter } = this;\n        const commandFilter = {\n            inputs: [filterInput], ffmpegFilter, options, outputs: [idGenerate(ffmpegFilter)]\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n    commandFilter(options = {}) {\n        const { ffmpegFilter } = this;\n        const commandFilter = {\n            ffmpegFilter, options, inputs: [], outputs: [idGenerate(ffmpegFilter)]\n        };\n        return commandFilter;\n    }\n    _ffmpegFilter;\n    get ffmpegFilter() {\n        return this._ffmpegFilter ||= this.id.split('.').pop() || this.id;\n    }\n    filterDefinitionSvg(args) {\n        throw new Error(Errors.unimplemented + 'initialSvgContent');\n    }\n    instanceFromObject(object = {}) {\n        return new FilterClass(this.instanceArgs(object));\n    }\n    parameters = [];\n    populateParametersFromProperties() {\n        this.parameters = this.properties.map(property => {\n            const { name } = property;\n            return new Parameter({ name, value: name, dataType: DataType.String });\n        });\n    }\n    filterDefinitionSvgFilter(valueObject) {\n        throw Errors.unimplemented;\n    }\n    colorCommandFilter(dimensions, videoRate = 0, duration = 0, color = colorWhiteTransparent) {\n        const { width, height } = dimensions;\n        const transparentFilter = 'color';\n        const transparentId = idGenerate(transparentFilter);\n        const object = { color, size: `${width}x${height}` };\n        if (videoRate)\n            object.rate = videoRate;\n        if (duration)\n            object.duration = duration;\n        const commandFilter = {\n            inputs: [], ffmpegFilter: transparentFilter,\n            options: object,\n            outputs: [transparentId]\n        };\n        return commandFilter;\n    }\n    type = DefinitionType.Filter;\n}\n\n/**\n * @category Filter\n */\nclass ChromaKeyFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: 'color', type: DataType.String,\n            defaultValue: colorGreen\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: 'similarity', type: DataType.Percent,\n            defaultValue: 0.9, min: 0.1, step: 0.01, max: 1.0,\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: 'blend', type: DataType.Percent,\n            defaultValue: 0.0, step: 0.01, max: 1.0,\n        }));\n        this.populateParametersFromProperties();\n    }\n    filterDefinitionSvgFilter(object) {\n        const { similarity, color, blend } = object;\n        assertNumber(similarity);\n        assertNumber(blend);\n        assertPopulatedString(color);\n        const max = 255.0;\n        const range = max * max * (1.0 - blend);\n        const rgb = colorToRgb(color);\n        // console.log(\"filterDefinitionSvgFilters\", rgb)\n        const r = 1.0 - (similarity * ((rgb.r) / max));\n        const g = 1.0 - (similarity * ((rgb.g) / max));\n        const b = 1.0 - (similarity * ((rgb.b) / max));\n        const values = `1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 ${r} ${g} ${b} -${range} ${range}`;\n        const svgFilters = [];\n        const colorMatrix = {\n            filter: 'feColorMatrix',\n            type: 'matrix',\n            values,\n        };\n        svgFilters.push(svgFilter(colorMatrix));\n        // const componentTransfer: StringObject = {\n        //   filter: 'feComponentTransfer', result: 'colorToBlack'\n        // }\n        // const componentTransferFilter = svgFilter(componentTransfer)\n        // const funcR = svgFunc('feFuncR', '0 1')\n        // const funcG = svgFunc('feFuncG', '0 1 1  1 1 1')\n        // const funcB = svgFunc('feFuncB', '0 1')\n        // svgAppend(componentTransferFilter, [funcR, funcG, funcB])\n        // svgFilters.push(componentTransferFilter)\n        // const blackAndWhiteMatrix: StringObject = {\n        //   filter: 'feColorMatrix',\n        //   type: 'matrix',\n        //   values: '10 11 10 0 0 10 10 10 0 0 10 10 10 0 0 0 0 0 1 0',\n        //   result: 'blackAndWhite', in: 'colorToBlack',\n        // }\n        // svgFilters.push(svgFilter(blackAndWhiteMatrix))\n        // const whiteToTransparentMatrix: StringObject = {\n        //   filter: 'feColorMatrix',\n        //   type: 'matrix',\n        //   values: '1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 -1 0 0 1 0',\n        //   result: 'whiteToTransparent', in: 'blackAndWhite',\n        // }\n        // svgFilters.push(svgFilter(whiteToTransparentMatrix))\n        // const element = globalThis.document.createElementNS(NamespaceSvg, 'feComposite')\n        // svgSet(element, 'out', 'operator')\n        // svgSet(element, 'SourceGraphic', 'in')\n        // // svgSet(element, 'blackAndWhite', 'in')\n        // svgFilters.push(element)\n        return svgFilters;\n    }\n}\n// <filter id='greenScreen' color-interpolation-filters=\"sRGB\">\n// <feComponentTransfer result='colorToBlack'>\n//   <feFuncR id='funcR' type='discrete' tableValues='0 1 1  1 1 1'/>\n//   <feFuncG id='funcG' type='discrete' tableValues='0 1 '/>\n//   <feFuncB id='funcB' type='discrete' tableValues='0 1'/>\n// </feComponentTransfer> \n// <feColorMatrix in='colorToBlack' result='blackAndWhite' type='matrix' \n//          values='10 11 10 0 0\n//                  10 10 10 0 0\n//                  10 10 10 0 0\n//                  0 0 0 1 0'/> \n// <feColorMatrix in='blackAndWhite' result='whiteToTransparent' type='matrix' \n//          values='1 0 0 0 0\n//                  0 1 0 0 0\n//                  0 0 1 0 0\n//                 -1 0 0 1 0'/>  \n// <feComposite  ='' in='SourceGraphic' in='blackAndWhite' />  \n// </filter>\n\nconst roundMethod = (rounding = '') => {\n    switch (rounding) {\n        case 'ceil': return Math.ceil;\n        case 'floor': return Math.floor;\n        default: return Math.round;\n    }\n};\nconst roundWithMethod = (number, method = '') => {\n    const func = roundMethod(method);\n    return func(number);\n};\n\nconst pixelFromPoint = (pt, width) => pt.y * width + pt.x;\nconst pixelToPoint = (index, width) => ({ x: index % width, y: Math.floor(index / width) });\nconst pixelToIndex = (pixel) => pixel * 4;\nconst pixelRgbaAtIndex = (index, pixels) => ({\n    r: pixels[index],\n    g: pixels[index + 1],\n    b: pixels[index + 2],\n    a: pixels[index + 3],\n});\nconst pixelRgba = (pixel, data) => pixelRgbaAtIndex(pixelToIndex(pixel), data);\nconst pixelSafe = (pixel, offsetPoint, size) => {\n    const { x, y } = offsetPoint;\n    const { width, height } = size;\n    const pt = pixelToPoint(pixel, width);\n    pt.x = Math.max(0, Math.min(width - 1, pt.x + x));\n    pt.y = Math.max(0, Math.min(height - 1, pt.y + y));\n    return pixelFromPoint(pt, width);\n};\nconst pixelNeighboringPixels = (pixel, size) => {\n    const depth = 3;\n    const pixels = [];\n    const halfSize = Math.floor(depth / 2);\n    for (let y = 0; y < depth; y += 1) {\n        for (let x = 0; x < depth; x += 1) {\n            const offsetPoint = { x: x - halfSize, y: y - halfSize };\n            pixels.push(pixelSafe(pixel, offsetPoint, size));\n        }\n    }\n    return pixels;\n};\nconst pixelNeighboringRgbas = (pixel, data, size) => (pixelNeighboringPixels(pixel, size).map(p => pixelRgba(p, data)));\nconst pixelColor = (value) => {\n    const string = String(value);\n    if (string.slice(0, 2) === \"0x\")\n        return `#${string.slice(2)}`;\n    return string;\n};\nconst pixelPerFrame = (frames, width, zoom = 1) => {\n    if (!(frames && width))\n        return 0;\n    const widthFrames = width / frames;\n    const min = Math.min(1, widthFrames);\n    const max = Math.max(1, widthFrames);\n    if (zoom === 1)\n        return max;\n    if (!zoom)\n        return min;\n    return min + ((max - min) * zoom);\n};\nconst pixelFromFrame = (frame, perFrame, rounding = 'ceil') => {\n    if (!(frame && perFrame))\n        return 0;\n    const pixels = frame * perFrame;\n    return roundWithMethod(pixels, rounding);\n};\nconst pixelToFrame = (pixels, perFrame, rounding = 'round') => {\n    if (!(pixels && perFrame))\n        return 0;\n    return roundWithMethod(pixels / perFrame, rounding);\n};\nfunction pixelsMixRbga(fromRgba, toRgba, amountToMix = 1.0) {\n    return Object.fromEntries(colorRgbaKeys.map(key => {\n        return [key, Math.round((fromRgba[key] * amountToMix) + (toRgba[key] * (1 - amountToMix)))];\n    }));\n}\nfunction pixelsMixRbg(fromRgb, toRgb, amountToMix = 1.0) {\n    return Object.fromEntries(colorRgbKeys.map(key => {\n        return [key, Math.round((fromRgb[key] * (1 - amountToMix)) + (toRgb[key] * amountToMix))];\n    }));\n}\nconst pixelsRemoveRgba = (pixels, size, rgb, similarity = 0, blend = 0, accurate = false) => {\n    pixelsReplaceRgba(pixels, size, rgb, colorRgbaTransparent, similarity, blend);\n};\nconst pixelsReplaceRgba = (pixels, size, find, replace, similarity = 0, blend = 0, accurate = false) => {\n    const yuv = colorRgbToYuv(find);\n    let index = pixels.length / 4;\n    while (index--) {\n        const pixels_offset = index * 4;\n        const rgbaAtIndex = pixelRgbaAtIndex(pixels_offset, pixels);\n        if (isPositive(rgbaAtIndex.a)) {\n            const rgbaAsYuv = colorRgbToYuv(rgbaAtIndex);\n            const difference = accurate ? colorYuvBlend(yuvsFromPixelsAccurate(pixels, index, size), yuv, similarity, blend) : colorYuvDifference(rgbaAsYuv, yuv, similarity, blend);\n            const mixed = pixelsMixRbga(rgbaAtIndex, replace, difference);\n            pixels[pixels_offset + 3] = mixed.a;\n            if (mixed.a) {\n                pixels[pixels_offset] = mixed.r;\n                pixels[pixels_offset + 1] = mixed.g;\n                pixels[pixels_offset + 2] = mixed.b;\n            }\n        }\n    }\n};\nconst yuvsFromPixelsAccurate = (pixels, index, size) => {\n    // console.log(this.constructor.name, \"yuvsFromPixelsAccurate\")\n    return pixelNeighboringRgbas(index * 4, pixels, size).map(rgb => colorRgbToYuv(rgb));\n};\n\nconst tweenPad = (outputDistance, scaledDistance, scale, offE = false, offW = false) => {\n    assertPositive(scale);\n    assertPositive(scaledDistance);\n    const baseDistance = outputDistance - scaledDistance;\n    const east = offE ? scaledDistance : 0;\n    const west = offW ? scaledDistance : 0;\n    const distance = baseDistance + east + west;\n    const scaled = distance * scale;\n    const x = scaled - east;\n    return x;\n};\nconst tweenNumberStep = (number, numberEnd, frame, frames) => {\n    const unit = (numberEnd - number) / frames;\n    return number + (unit * frame);\n};\nconst tweenColorStep = (value, valueEnd, frame, frames) => {\n    assertString(value);\n    assertString(valueEnd);\n    const offset = frame / frames;\n    assertTrue(colorValidHex(value), 'hex color');\n    if (value.length === 7 || value.length === 4) {\n        const result = colorRgbToHex(pixelsMixRbg(colorToRgb(value), colorToRgb(valueEnd), offset));\n        return result;\n    }\n    return colorRgbaToHex(pixelsMixRbga(colorToRgba(value), colorToRgba(valueEnd), offset));\n};\nconst tweenRectStep = (rect, rectEnd, frame, frames) => {\n    return {\n        x: tweenNumberStep(rect.x, rectEnd.x, frame, frames),\n        y: tweenNumberStep(rect.y, rectEnd.y, frame, frames),\n        width: tweenNumberStep(rect.width, rectEnd.width, frame, frames),\n        height: tweenNumberStep(rect.height, rectEnd.height, frame, frames),\n    };\n};\nconst tweenColors = (color, colorEnd, frames) => {\n    assertPopulatedString(color);\n    const colors = [color];\n    if (isPopulatedString(colorEnd) && frames > 1) {\n        for (let frame = 1; frame < frames; frame++) {\n            colors.push(tweenColorStep(color, colorEnd, frame, frames));\n        }\n    }\n    return colors;\n};\nconst tweenRects = (rect, rectEnd, frames) => {\n    const rects = [rect];\n    if (rectEnd && frames > 1) {\n        for (let frame = 1; frame < frames; frame++) {\n            rects.push(tweenRectStep(rect, rectEnd, frame, frames));\n        }\n    }\n    return rects;\n};\nconst tweenMaxSize = (size, sizeEnd) => {\n    const { width, height } = size;\n    if (!isSize(sizeEnd) || sizesEqual(size, sizeEnd))\n        return { width, height };\n    return {\n        width: Math.max(width, sizeEnd.width),\n        height: Math.max(height, sizeEnd.height),\n    };\n};\nconst tweenMinSize = (size, sizeEnd) => {\n    const { width, height } = size;\n    if (!isSize(sizeEnd) || sizesEqual(size, sizeEnd))\n        return { width, height };\n    return {\n        width: Math.min(width, sizeEnd.width),\n        height: Math.min(height, sizeEnd.height),\n    };\n};\nconst tweenOption = (optionStart, optionEnd, pos, round) => {\n    assertNumber(optionStart);\n    const start = round ? Math.round(optionStart) : optionStart;\n    if (!isNumber(optionEnd))\n        return start;\n    const end = round ? Math.round(optionEnd) : optionEnd;\n    if (start === end)\n        return start;\n    pos.includes('n') ? 'n' : 'N';\n    return `(${start}+(${end - start}*${pos}))`; // `(${start}+(${nCased} * 10))` //\n};\nconst tweenableRects = (rect, rectEnd) => {\n    if (!isRect(rectEnd))\n        return false;\n    if (rect.x !== rectEnd.x)\n        return true;\n    if (rect.y !== rectEnd.y)\n        return true;\n    if (rect.width !== rectEnd.width)\n        return true;\n    if (rect.height !== rectEnd.height)\n        return true;\n    return false;\n};\nconst tweenPosition = (videoRate, duration, frame = 'n') => (`(${frame}/${videoRate * duration})`);\nconst tweenNumberObject = (object) => {\n    if (!isObject(object))\n        return {};\n    const entries = Object.entries(object).filter(([_, value]) => isNumber(value));\n    return Object.fromEntries(entries);\n};\nconst tweenOverRect = (rect, rectEnd) => {\n    return { ...rect, ...tweenNumberObject(rectEnd) };\n};\nconst tweenOverPoint = (point, pointEnd) => {\n    return { ...point, ...tweenNumberObject(pointEnd) };\n};\nconst tweenOverSize = (point, pointEnd) => {\n    if (!isDefined(pointEnd))\n        return point;\n    return { ...point, ...tweenNumberObject(pointEnd) };\n};\nconst tweenScaleSizeToRect = (size, rect, offDirections = {}) => {\n    assertSize(size);\n    assertRect(rect);\n    const { width: outWidth, height: outHeight } = size;\n    const { x, y, width, height } = rect;\n    assertPositive(x);\n    assertPositive(y);\n    assertPositive(width);\n    assertPositive(height);\n    const scaledSize = sizeScale(size, width, height);\n    const evenSize = sizeCeil(scaledSize);\n    const result = {\n        ...evenSize,\n        x: Math.round(tweenPad(outWidth, evenSize.width, x, offDirections.E, offDirections.W)),\n        y: Math.round(tweenPad(outHeight, evenSize.height, y, offDirections.N, offDirections.S))\n    };\n    return result;\n};\nconst tweenCoverSizes = (inSize, outSize, scales) => {\n    const outSizes = isArray(outSize) ? outSize : [outSize, outSize];\n    const [rect, rectEnd] = outSizes;\n    const unscaledSize = sizeCover(inSize, rect);\n    const unscaledSizeEnd = sizeCover(inSize, rectEnd);\n    const [scale, scaleEnd] = scales;\n    const { width, height } = scale;\n    const { width: widthEnd, height: heightEnd } = scaleEnd;\n    const scaledSize = sizeScale(unscaledSize, width, height);\n    const scaledSizeEnd = sizeScale(unscaledSizeEnd, widthEnd, heightEnd);\n    const coverSize = sizeCeil(scaledSize);\n    const coverSizeEnd = sizeCeil(scaledSizeEnd);\n    const coverRects = [coverSize, coverSizeEnd];\n    return coverRects;\n};\nconst tweenCoverPoints = (scaledSizes, outSize, scales) => {\n    const outSizes = isArray(outSize) ? outSize : [outSize, outSize];\n    const [coverSize, coverSizeEnd] = scaledSizes;\n    const [rect, rectEnd] = outSizes;\n    const [scale, scaleEnd] = scales;\n    const { x, y } = scale;\n    const { x: xEnd, y: yEnd } = scaleEnd;\n    const point = {\n        x: x * (coverSize.width - rect.width),\n        y: y * (coverSize.height - rect.height),\n    };\n    const pointEnd = {\n        x: xEnd * (coverSizeEnd.width - rectEnd.width),\n        y: yEnd * (coverSizeEnd.height - rectEnd.height),\n    };\n    return [point, pointEnd];\n};\nconst tweenRectLock = (rect, lock) => ({\n    ...rect, ...sizeLock(rect, lock)\n});\nconst tweenRectsLock = (rects, lock) => {\n    return rects.map(rect => tweenRectLock(rect, lock));\n};\nconst tweenScaleSizeRatioLock = (scale, outputSize, inRatio, lock) => {\n    if (!lock)\n        return scale;\n    const { width: outWidth, height: outHeight } = outputSize;\n    const forcedScale = { ...scale };\n    switch (lock) {\n        case Orientation.H:\n            forcedScale.width = ((outHeight * forcedScale.height) * inRatio) / outWidth;\n            break;\n        case Orientation.V:\n            forcedScale.height = ((outWidth * forcedScale.width) / inRatio) / outHeight;\n            break;\n    }\n    return forcedScale;\n};\nconst tweeningPoints = (tweenable) => {\n    assertTweenable(tweenable);\n    const { clip } = tweenable;\n    const { track } = clip;\n    const { mash } = track;\n    const { quantize } = mash;\n    const timeRange = clip.timeRange(quantize);\n    const tweenPoints = tweenable.tweenPoints(timeRange, timeRange);\n    return !pointsEqual(...tweenPoints);\n};\nconst tweenMinMax = (value, min, max) => {\n    return Math.min(max, Math.max(min, value));\n};\nconst tweenInputTime = (timeRange, onEdge, nearStart, endDefined, endSelected) => {\n    if (!endDefined)\n        return;\n    if (!onEdge)\n        return nearStart ? timeRange.startTime : timeRange.lastTime;\n    if (endSelected) {\n        if (nearStart)\n            return timeRange.lastTime;\n    }\n    else if (!nearStart)\n        return timeRange.startTime;\n};\n\n/**\n * @category Filter\n */\nclass ColorizeFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, name: 'color', type: DataType.String,\n        }));\n        this.populateParametersFromProperties();\n    }\n    _ffmpegFilter = 'geq';\n    commandFilters(args) {\n        const commandFilters = [];\n        const { filter, videoRate, duration, filterInput: input } = args;\n        assertNumber(duration, 'duration');\n        assertNumber(videoRate, 'videoRate');\n        const color = filter.value('color');\n        assertPopulatedString(color, 'color');\n        let filterInput = input;\n        assertPopulatedString(filterInput, 'filterInput');\n        const formatFilter = 'format';\n        const formatId = idGenerate(formatFilter);\n        const formatCommandFilter = {\n            inputs: [filterInput], ffmpegFilter: formatFilter,\n            options: { pix_fmts: 'rgba' }, outputs: [formatId]\n        };\n        commandFilters.push(formatCommandFilter);\n        filterInput = formatId;\n        const colorEnd = filter.value(`color${PropertyTweenSuffix}`) || color;\n        assertPopulatedString(colorEnd);\n        const alpha = color.length > 7;\n        const fromColor = alpha ? colorToRgba(color) : colorToRgb(color);\n        const toColor = alpha ? colorToRgba(colorEnd) : colorToRgb(colorEnd);\n        const keys = alpha ? colorRgbaKeys : colorRgbKeys;\n        const options = {};\n        const position = duration ? tweenPosition(videoRate, duration, 'N') : 0;\n        keys.forEach(key => {\n            const from = fromColor[key];\n            const to = toColor[key];\n            if (from === to)\n                options[key] = from;\n            else\n                options[key] = `${from}+(${to - from}*${position})`;\n        });\n        if (!alpha)\n            options.a = 'alpha(X,Y)';\n        const geqFilter = 'geq';\n        const geqFilterId = idGenerate(geqFilter);\n        const geqCommandFilter = {\n            inputs: [filterInput], ffmpegFilter: geqFilter,\n            options, outputs: [geqFilterId]\n        };\n        commandFilters.push(geqCommandFilter);\n        return commandFilters;\n    }\n}\n\n/**\n * @category Filter\n */\nclass ColorFilter extends ColorizeFilter {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            tweenable: true, name: 'color', type: DataType.String\n        }));\n        const keys = ['width', 'height'];\n        keys.forEach(name => {\n            this.properties.push(propertyInstance({\n                tweenable: true, name, type: DataType.Number\n            }));\n        });\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const commandFilters = [];\n        const { filter, videoRate, duration } = args;\n        assertAboveZero(videoRate, 'videoRate');\n        const { ffmpegFilter } = this;\n        let filterInput = idGenerate(ffmpegFilter);\n        const color = filter.value('color');\n        assertPopulatedString(color);\n        const colorEnd = duration ? filter.value(`color${PropertyTweenSuffix}`) : undefined;\n        const tweeningColor = isPopulatedString(colorEnd) && color !== colorEnd;\n        const scalars = filter.scalarObject(!!duration);\n        assertSize(scalars);\n        const { width, height } = scalars;\n        let tweeningSize = false;\n        const startSize = { width, height };\n        const endSize = { width, height };\n        if (duration) {\n            const { [`width${PropertyTweenSuffix}`]: widthEnd = width, [`height${PropertyTweenSuffix}`]: heightEnd = height, } = scalars;\n            assertNumber(widthEnd);\n            assertNumber(heightEnd);\n            tweeningSize = !(width === widthEnd && height === heightEnd);\n            if (tweeningSize) {\n                endSize.width = widthEnd;\n                endSize.height = heightEnd;\n            }\n        }\n        const maxSize = tweeningSize ? tweenMaxSize(startSize, endSize) : startSize;\n        const colorCommandFilter = {\n            inputs: [], ffmpegFilter,\n            options: {\n                color, rate: videoRate, size: Object.values(maxSize).join('x')\n            },\n            outputs: [filterInput]\n        };\n        if (isAboveZero(duration))\n            colorCommandFilter.options.duration = duration;\n        commandFilters.push(colorCommandFilter);\n        // console.log(this.constructor.name, \"commandFilters\", tweeningColor, color, colorEnd, duration)\n        if (tweeningColor) {\n            const fadeFilter = 'fade';\n            const fadeFilterId = idGenerate(fadeFilter);\n            const fadeCommandFilter = {\n                inputs: [filterInput], ffmpegFilter: fadeFilter,\n                options: {\n                    type: 'out',\n                    color: colorEnd, duration,\n                },\n                outputs: [fadeFilterId]\n            };\n            commandFilters.push(fadeCommandFilter);\n            filterInput = fadeFilterId;\n        }\n        if (tweeningSize) {\n            const scaleFilter = 'scale';\n            const scaleFilterId = idGenerate(scaleFilter);\n            const position = tweenPosition(videoRate, duration);\n            const scaleCommandFilter = {\n                inputs: [filterInput], ffmpegFilter: scaleFilter,\n                options: {\n                    eval: 'frame',\n                    width: tweenOption(startSize.width, endSize.width, position),\n                    height: tweenOption(startSize.height, endSize.height, position),\n                },\n                outputs: [scaleFilterId]\n            };\n            commandFilters.push(scaleCommandFilter);\n        }\n        return commandFilters;\n    }\n    _ffmpegFilter = 'color';\n    filterDefinitionSvg(args) {\n        const { filter } = args;\n        const valueObject = filter.scalarObject(false);\n        const { width, height, color } = valueObject;\n        assertPopulatedString(color);\n        const rectElement = globalThis.document.createElementNS(NamespaceSvg, 'rect');\n        rectElement.setAttribute('width', String(width));\n        rectElement.setAttribute('height', String(height));\n        rectElement.setAttribute('fill', pixelColor(color));\n        return rectElement;\n    }\n}\n\nconst ColorChannelMixerFilterKeys = colorRgbaKeys.flatMap(c => colorRgbaKeys.map(d => `${c}${d}`));\n/**\n * @category Filter\n */\nclass ColorChannelMixerFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        ColorChannelMixerFilterKeys.forEach(name => {\n            this.properties.push(propertyInstance({\n                custom: true, name, type: DataType.Number,\n                defaultValue: name[0] === name[1] ? 1.0 : 0.0,\n                min: 0.0, max: 1.0\n            }));\n        });\n        this.populateParametersFromProperties();\n    }\n    filterDefinitionSvgFilter(object) {\n        const bits = colorRgbaKeys.flatMap(c => [...colorRgbaKeys.map(d => Number(object[`${c}${d}`])), 0]);\n        const options = {\n            filter: 'feColorMatrix',\n            type: 'matrix',\n            values: bits.join(' '),\n        };\n        return [svgFilter(options)];\n    }\n}\n// covert to grayscale -> colorchannelmixer=.3:.4:.3:0:.3:.4:.3:0:.3:.4:.3\n\nvar ActivityType;\n(function (ActivityType) {\n    ActivityType[\"Analyze\"] = \"analyze\";\n    ActivityType[\"Complete\"] = \"complete\";\n    ActivityType[\"Error\"] = \"error\";\n    ActivityType[\"Load\"] = \"load\";\n    ActivityType[\"Render\"] = \"render\";\n})(ActivityType || (ActivityType = {}));\n\nconst commandFilesInputIndex = (commandFiles, id) => {\n    const inputCommandFiles = commandFiles.filter(commandFile => commandFile.input);\n    const inputIndex = inputCommandFiles.findIndex(commandFile => commandFile.inputId === id);\n    if (!isPositive(inputIndex))\n        console.log(\"commandFilesInputIndex\", id, inputCommandFiles);\n    assertPositive(inputIndex, 'commandFilesInputIndex');\n    return inputIndex;\n};\nconst commandFilesInput = (commandFiles, id, visible) => ([commandFilesInputIndex(commandFiles, id), visible ? 'v' : 'a'].join(':'));\n\nconst eventStop = (event) => {\n    event.preventDefault();\n    event.stopPropagation();\n};\n\nconst fetchCallback = (apiCallback) => {\n    const { endpoint, request } = apiCallback;\n    const init = request || {};\n    const typeKey = 'Content-Type';\n    const jsonType = 'application/json';\n    const formType = 'multipart/form-data';\n    init.method ||= 'POST';\n    init.headers ||= {};\n    init.headers[typeKey] ||= jsonType;\n    switch (init.headers[typeKey]) {\n        case jsonType: {\n            init.body = JSON.stringify(init.body);\n            break;\n        }\n        case formType: {\n            const formData = new FormData();\n            Object.entries(init.body).forEach(([key, value]) => {\n                if (isUndefined(value))\n                    return;\n                formData.set(key, value instanceof Blob ? value : String(value));\n            });\n            init.body = formData;\n            delete init.headers[typeKey];\n            break;\n        }\n    }\n    const url = urlForEndpoint(endpoint);\n    return fetch(url, init).then(response => response.json());\n};\n\nconst isSelectedProperty = (value) => {\n    return isObject(value) && \"changeHandler\" in value;\n};\nconst selectedPropertyObject = (properties, group, selectType) => {\n    const filtered = properties.filter(prop => {\n        if (!isSelectedProperty(prop))\n            return false;\n        return prop.property.group === group && prop.selectType === selectType;\n    });\n    // console.log(\"selectedPropertyObject\", properties.length, filtered.length, group, selectType)\n    const byName = Object.fromEntries(filtered.map(selected => {\n        const { name: nameOveride, property } = selected;\n        const { name } = property;\n        return [nameOveride || name, selected];\n    }));\n    return byName;\n};\nconst selectedPropertiesScalarObject = (byName) => {\n    return Object.fromEntries(Object.entries(byName).map(entry => {\n        return [entry[0], entry[1].value];\n    }));\n};\n\nconst sortByFrame = (a, b) => (a.frame - b.frame);\nconst sortByIndex = (a, b) => (a.index - b.index);\nconst sortByTrack = (a, b) => (a.trackNumber - b.trackNumber);\nconst sortByLabel = (a, b) => {\n    if (a.label < b.label)\n        return -1;\n    if (a.label > b.label)\n        return 1;\n    return 0;\n};\n\nconst stringSeconds = (seconds, fps = 0, lengthSeconds = 0) => {\n    const bits = [];\n    let pad = 2;\n    let time = 60 * 60; // an hour\n    let do_rest = false;\n    const duration = lengthSeconds || seconds;\n    // console.log(\"stringSeconds seconds\", seconds, \"fps\", fps, \"duration\", duration)\n    if (duration >= time) {\n        if (seconds >= time) {\n            bits.push(String(Math.floor(seconds / time)).padStart(pad, '0'));\n            do_rest = true;\n            seconds = seconds % time;\n        }\n        else\n            bits.push('00:');\n    }\n    time = 60; // a minute\n    if (do_rest || (duration >= time)) {\n        // console.log(\"stringSeconds duration\", duration, \">=\", time, \"time\")\n        if (do_rest)\n            bits.push(':');\n        if (seconds >= time) {\n            bits.push(String(Math.floor(seconds / time)).padStart(pad, '0'));\n            do_rest = true;\n            seconds = seconds % time;\n        }\n        else\n            bits.push('00:');\n    }\n    time = 1; // a second\n    if (do_rest || (duration >= time)) {\n        // console.log(\"stringSeconds duration\", duration, \">=\", time, \"time\")\n        if (do_rest)\n            bits.push(':');\n        if (seconds >= time) {\n            // console.log(\"stringSeconds seconds\", seconds, \">=\", time, \"time\")\n            bits.push(String(Math.floor(seconds / time)).padStart(pad, '0'));\n            do_rest = true;\n            seconds = seconds % time;\n        }\n        else {\n            // console.log(\"stringSeconds seconds\", seconds, \"<\", time, \"time\")\n            bits.push('00');\n        }\n    }\n    else {\n        // console.log(\"stringSeconds duration\", duration, \"<\", time, \"time\")\n        bits.push('00');\n    }\n    if (fps > 1) {\n        // console.log(\"stringSeconds fps\", fps, \"> 1\")\n        if (fps === 10)\n            pad = 1;\n        bits.push('.');\n        if (seconds) {\n            // console.log(\"stringSeconds seconds\", seconds, \"true pad\", pad)\n            if (pad === 1)\n                seconds = Math.round(seconds * 10) / 10;\n            else\n                seconds = Math.round(100 * seconds) / 100;\n            // console.log(\"stringSeconds seconds\", String(seconds), \"presliced\")\n            seconds = Number(String(seconds).slice(2));\n            // console.log(\"stringSeconds seconds\", seconds, \"sliced\")\n            bits.push(String(seconds).padEnd(pad, '0'));\n            // console.log(\"stringSeconds seconds\", seconds, \"padded\")\n        }\n        else {\n            // console.log(\"stringSeconds seconds\", seconds, \"false\")\n            bits.push('0'.padStart(pad, '0'));\n        }\n    }\n    return bits.join('');\n};\nconst stringFamilySizeRect = (string, family, size) => {\n    if (!(isPopulatedString(string) && isAboveZero(size)))\n        return RectZero;\n    const { document } = globalThis;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    assertObject(ctx);\n    ctx.font = `${size}px ${family}`;\n    const metrics = ctx.measureText(string);\n    // const font = new FontFace(family, string)\n    const { actualBoundingBoxAscent, actualBoundingBoxDescent, actualBoundingBoxLeft, actualBoundingBoxRight, width, } = metrics;\n    // console.log(\"stringFamilySizeRect\", \"actualBoundingBoxAscent\", actualBoundingBoxAscent, \"actualBoundingBoxDescent\", actualBoundingBoxDescent)\n    return {\n        x: actualBoundingBoxLeft, y: actualBoundingBoxAscent,\n        width: actualBoundingBoxLeft + actualBoundingBoxRight,\n        height: actualBoundingBoxAscent + actualBoundingBoxDescent,\n    };\n};\nconst stringPluralize = (count, value, suffix = 's') => {\n    if (!isPopulatedString(value))\n        return value;\n    return `${count} ${value}${count === 1 ? '' : suffix}`;\n};\n\n/**\n * @category Filter\n */\nclass ConvolutionFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: \"bias\",\n            defaultValue: 0.0, min: 0.0, max: 100.0, step: 0.01\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: \"matrix\", defaultValue: \"0 0 0 0 1 0 0 0 0\",\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: \"multiplier\",\n            defaultValue: 1.0, min: 0.0, max: 100.0, step: 0.01\n        }));\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const { filterInput, filter, duration } = args;\n        assertPopulatedString(filterInput, 'filterInput');\n        const commandFilters = [];\n        const values = filter.scalarObject(!!duration);\n        assertConvolutionServerFilter(values);\n        const { ffmpegFilter } = this;\n        const commandFilter = {\n            inputs: [filterInput], ffmpegFilter,\n            options: optionsFromObject(parse(values)),\n            outputs: [idGenerate(ffmpegFilter)]\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n    filterDefinitionSvgFilter(valueObject) {\n        assertConvolutionServerFilter(valueObject);\n        const { matrix, bias, multiplier } = valueObject;\n        const object = {\n            filter: 'feConvolveMatrix',\n            kernelMatrix: String(matrix),\n            bias: String(bias)\n        };\n        if (isAboveZero(multiplier))\n            object.divisor = String(multiplier);\n        // console.log(this.constructor.name, \"filterDefinitionSvgFilter\", object)\n        return [svgFilter(object)];\n    }\n}\nconst isConvolutionServerFilter = (value) => {\n    return isObject(value) && \"matrix\" in value && \"bias\" in value && \"multiplier\" in value;\n};\nfunction assertConvolutionServerFilter(value) {\n    if (!isConvolutionServerFilter(value))\n        throw new Error(\"expected ConvolutionServerFilter\");\n}\nconst matrixFromString = (string) => {\n    const definedString = string || \"0 0 0 0 1 0 0 0 0\";\n    return definedString.split(',').map(component => parseInt(component.trim()));\n};\nconst biasFromString = (string) => {\n    if (!string?.length)\n        return 0.0;\n    return parseFloat(string.trim());\n};\nconst multiplierFromString = (string) => {\n    if (!string?.length)\n        return 1.0;\n    if (string.includes('/')) {\n        const components = string.split('/').map(component => parseFloat(component.trim()));\n        const [a, b] = components;\n        return a / b;\n    }\n    return parseFloat(string.trim());\n};\nconst fromCombined = (combined) => {\n    return { combined, r: combined, g: combined, b: combined, a: combined };\n};\nconst numbersFromCombined = (combined) => {\n    return { combined, r: combined, g: combined, b: combined, a: combined };\n};\nconst numberFromCombined = (combined) => {\n    return { combined, r: combined, g: combined, b: combined, a: combined };\n};\nconst convolutionStringObject = (combined) => {\n    return fromCombined(String(combined));\n};\nconst convolutionMatrixObject = (stringObject) => {\n    const { combined } = stringObject;\n    return numbersFromCombined(matrixFromString(String(combined)));\n};\nconst convolutionBiasObject = (stringObject) => {\n    const { combined } = stringObject;\n    return numberFromCombined(biasFromString(String(combined)));\n};\nconst convolutionMultiplierObject = (stringObject) => {\n    const { combined } = stringObject;\n    return numberFromCombined(multiplierFromString(String(combined)));\n};\nconst parse = (convolutionObject) => {\n    const matrixObject = convolutionStringObject(convolutionObject.matrix);\n    const multiplierObject = convolutionStringObject(convolutionObject.multiplier);\n    const matrix = convolutionMatrixObject(matrixObject);\n    const multiplier = convolutionMultiplierObject(multiplierObject);\n    const bias = matrixObject.combined ? numberFromCombined(0.0) : convolutionBiasObject(convolutionStringObject(convolutionObject.bias));\n    const result = { multiplier, matrix, bias };\n    return result;\n};\nconst optionsFromObject = (convolutionObject) => {\n    const valueObject = {};\n    colorRgbaKeys.map(c => c).forEach((channel, index) => {\n        const multiplier = convolutionObject.multiplier[channel];\n        const matrix = convolutionObject.matrix[channel];\n        valueObject[`${index}m`] = matrix.join(' ');\n        valueObject[`${index}rdiv`] = multiplier;\n        valueObject[`${index}bias`] = convolutionObject.bias[channel];\n    });\n    return valueObject;\n};\n\n/**\n * @category Filter\n */\nclass CropFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: 'width', type: DataType.String,\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: 'height', type: DataType.String,\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, name: 'x', type: DataType.Number,\n            defaultValue: 0, min: 0, step: 1\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, name: 'y', type: DataType.Number,\n            defaultValue: 0, min: 0, step: 1\n        }));\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const { filter, filterInput, duration, videoRate } = args;\n        assertPopulatedString(filterInput);\n        const commandFilters = [];\n        const scalars = filter.scalarObject(!!duration);\n        const options = { exact: 1 };\n        const position = tweenPosition(videoRate, duration);\n        options.x = tweenOption(scalars.x, scalars[`x${PropertyTweenSuffix}`], position, true);\n        options.y = tweenOption(scalars.y, scalars[`y${PropertyTweenSuffix}`], position, true);\n        const { width, height } = scalars;\n        if (isTrueValue(width))\n            options.w = width;\n        if (isTrueValue(height))\n            options.h = height;\n        const { ffmpegFilter } = this;\n        const commandFilter = {\n            inputs: [filterInput], ffmpegFilter,\n            options,\n            outputs: [idGenerate(ffmpegFilter)]\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n}\n\n/**\n * @category Filter\n */\nclass OverlayFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, name: 'x', type: DataType.Percent, defaultValue: 0.5\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, name: 'y', type: DataType.Percent, defaultValue: 0.5\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: 'format', type: DataType.String, defaultValue: 'yuv420' // yuv420p10\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: 'alpha', type: DataType.String, defaultValue: 'straight' // premultiplied\n        }));\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const commandFilters = [];\n        const { filter, filterInput, chainInput, duration, videoRate } = args;\n        assertPopulatedString(filterInput, 'filterInput');\n        assertPopulatedString(chainInput, 'chainInput');\n        const scalars = filter.scalarObject(!!duration);\n        const options = {}; //repeatlast: 0, shortest: 1\n        const { format, alpha } = scalars;\n        if (isPopulatedString(format))\n            options.format = format;\n        if (isPopulatedString(alpha))\n            options.alpha = alpha;\n        const position = tweenPosition(videoRate, duration, '(n-1)'); // overlay bug\n        const x = tweenOption(scalars.x, scalars[`x${PropertyTweenSuffix}`], position, true);\n        const y = tweenOption(scalars.y, scalars[`y${PropertyTweenSuffix}`], position, true);\n        const xZero = x === 0;\n        const yZero = y === 0;\n        // const zero = xZero && yZero\n        if (!xZero)\n            options.x = x;\n        if (!yZero)\n            options.y = y;\n        // const { ffmpegFilter } = this\n        const ffmpegFilter = 'overlay';\n        const commandFilter = {\n            inputs: [chainInput, filterInput], ffmpegFilter, options, outputs: []\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n}\n\n/**\n * @category Filter\n */\nclass ScaleFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            name: 'width', type: DataType.Percent, defaultValue: 1.0, max: 2.0\n        }));\n        this.properties.push(propertyInstance({\n            name: 'height', type: DataType.Percent, defaultValue: 1.0, max: 2.0\n        }));\n        this.properties.push(propertyInstance({\n            name: `width${PropertyTweenSuffix}`, type: DataType.Percent,\n            defaultValue: 1.0, max: 2.0\n        }));\n        this.properties.push(propertyInstance({\n            name: `height${PropertyTweenSuffix}`, type: DataType.Percent,\n            defaultValue: 1.0, max: 2.0\n        }));\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const commandFilters = [];\n        const { filter, duration, filterInput, videoRate } = args;\n        const values = filter.scalarObject(!!duration);\n        const { width, height, [`width${PropertyTweenSuffix}`]: widthEnd, [`height${PropertyTweenSuffix}`]: heightEnd, } = values;\n        assertPopulatedString(filterInput);\n        // console.log(this.constructor.name, \"commandFilters\", filterInput, width, \"x\", height) //, widthEnd, \"x\", heightEnd)\n        const { ffmpegFilter } = this;\n        const position = tweenPosition(videoRate, duration);\n        const options = {\n            width: tweenOption(width, widthEnd, position, true),\n            height: tweenOption(height, heightEnd, position, true),\n            // sws_flags: 'accurate_rnd',\n        };\n        if (!(isNumber(options.width) && isNumber(options.height)))\n            options.eval = 'frame';\n        const commandFilter = {\n            inputs: [filterInput], ffmpegFilter, options,\n            outputs: [idGenerate(ffmpegFilter)]\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n}\n\nclass OpacityFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, name: 'opacity',\n            type: DataType.Number, defaultValue: 1.0,\n        }));\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const commandFilters = [];\n        const { filterInput: input, filter, duration, videoRate } = args;\n        const opacity = filter.value('opacity');\n        let filterInput = input;\n        assertNumber(opacity);\n        assertPopulatedString(filterInput, 'filterInput');\n        const options = {\n            lum: 'lum(X,Y)', cb: 'cb(X,Y)', cr: 'cr(X,Y)', a: `alpha(X,Y)*${opacity}`\n        };\n        if (duration) {\n            const opacityEnd = filter.value(`opacity${PropertyTweenSuffix}`);\n            if (isNumber(opacityEnd) && opacity != opacityEnd) {\n                const position = tweenPosition(videoRate, duration, 'N');\n                const toValue = opacityEnd - opacity;\n                options.a = `alpha(X,Y)*(${opacity}+(${toValue}*${position}))`;\n            }\n        }\n        // const formatFilter = 'format'\n        // const formatId = idGenerate(formatFilter)\n        // const formatCommandFilter: CommandFilter = {\n        //   inputs: [filterInput], ffmpegFilter: formatFilter, \n        //   options: { pix_fmts: 'rgba' }, outputs: [formatId]\n        // }\n        // commandFilters.push(formatCommandFilter)\n        // filterInput = formatId\n        const { ffmpegFilter } = this;\n        const commandFilter = {\n            inputs: [filterInput], ffmpegFilter,\n            options, outputs: [idGenerate(ffmpegFilter)]\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n    _ffmpegFilter = 'geq';\n    filterDefinitionSvgFilter(valueObject) {\n        const { opacity } = valueObject;\n        assertNumber(opacity);\n        const filterElement = globalThis.document.createElementNS(NamespaceSvg, 'feColorMatrix');\n        filterElement.setAttribute('type', 'matrix');\n        const values = `1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 ${opacity} 0`;\n        // console.log(this.constructor.name, \"filterDefinitionSvgFilters\", values)\n        svgSet(filterElement, values, 'values');\n        return [filterElement];\n    }\n}\n\n/**\n * @category Filter\n */\nclass SetsarFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: 'sar', type: DataType.String, defaultValue: '0'\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, name: 'max', type: DataType.Number, defaultValue: 100\n        }));\n        this.populateParametersFromProperties();\n    }\n}\n\n/**\n * @category Filter\n */\nclass FpsFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: 'fps', type: DataType.Number\n        }));\n        this.populateParametersFromProperties();\n    }\n}\n\n/**\n * @category Filter\n */\nclass SetptsFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: 'expr', type: DataType.String, defaultValue: 'PTS-STARTPTS'\n        }));\n        this.populateParametersFromProperties();\n    }\n}\n\n/**\n * @category Filter\n */\nclass AlphamergeFilter extends FilterDefinitionClass {\n    commandFilters(args) {\n        const commandFilters = [];\n        const { chainInput, filterInput } = args;\n        assertPopulatedString(chainInput, 'chainInput');\n        assertPopulatedString(filterInput, 'filterInput');\n        const { ffmpegFilter } = this;\n        const commandFilter = {\n            inputs: [chainInput, filterInput], ffmpegFilter,\n            options: {}, outputs: [idGenerate(ffmpegFilter)]\n        };\n        commandFilters.push(commandFilter);\n        return commandFilters;\n    }\n}\n\n/**\n * @category Filter\n */\nclass TrimFilter extends FilterDefinitionClass {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, name: 'start', type: DataType.Number, defaultValue: 0\n        }));\n        this.populateParametersFromProperties();\n    }\n}\n\n/**\n * @category Filter\n */\nclass TextFilter extends ColorizeFilter {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            custom: true, type: DataType.String, name: 'fontfile'\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, type: DataType.String, name: 'textfile'\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, type: DataType.Boolean, name: 'stretch'\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, type: DataType.Number, name: 'height'\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, type: DataType.Number, name: 'width'\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, type: DataType.Number, name: 'intrinsicHeight'\n        }));\n        this.properties.push(propertyInstance({\n            custom: true, type: DataType.Number, name: 'intrinsicWidth'\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, type: DataType.Number, name: 'x'\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, type: DataType.Number, name: 'y'\n        }));\n        this.properties.push(propertyInstance({\n            tweenable: true, custom: true, type: DataType.String, name: 'color'\n        }));\n        this.populateParametersFromProperties();\n    }\n    commandFilters(args) {\n        const commandFilters = [];\n        const { filter, duration, videoRate, filterInput: contentOutput } = args;\n        const color = filter.value('color');\n        const x = filter.value('x');\n        const y = filter.value('y');\n        const textfile = filter.value('textfile');\n        const fontfile = filter.value('fontfile');\n        const height = filter.value('height');\n        const width = filter.value('width');\n        const stretch = !!filter.value('stretch');\n        const intrinsicWidth = filter.value('intrinsicWidth');\n        const intrinsicHeight = filter.value('intrinsicHeight');\n        assertPopulatedString(textfile);\n        assertPopulatedString(fontfile);\n        assertNumber(height);\n        assertNumber(width);\n        assertNumber(intrinsicWidth);\n        assertNumber(intrinsicHeight);\n        assertNumber(x);\n        assertNumber(y);\n        assertPopulatedString(color, 'color');\n        const xEnd = filter.value(`x${PropertyTweenSuffix}`);\n        const yEnd = filter.value(`y${PropertyTweenSuffix}`);\n        const colorEnd = duration ? filter.value(`color${PropertyTweenSuffix}`) : undefined;\n        const tweeningColor = isPopulatedString(colorEnd) && color !== colorEnd;\n        const { ffmpegFilter } = this;\n        const drawtextId = idGenerate(ffmpegFilter);\n        const foreColor = (tweeningColor || contentOutput) ? colorWhite : color;\n        let backColor = colorBlack;\n        if (!contentOutput) {\n            backColor = tweeningColor ? colorBlackTransparent : colorWhiteTransparent;\n        }\n        const size = { width, height };\n        const sizeEnd = { ...size };\n        if (duration) {\n            const heightEnd = filter.value(`height${PropertyTweenSuffix}`) || 0;\n            const widthEnd = filter.value(`width${PropertyTweenSuffix}`) || 0;\n            if (isAboveZero(widthEnd))\n                sizeEnd.width = widthEnd;\n            if (isAboveZero(heightEnd))\n                sizeEnd.height = heightEnd;\n        }\n        const ratio = intrinsicWidth / intrinsicHeight;\n        const maxSize = tweenMaxSize(size, sizeEnd);\n        const calculatedWidth = Math.round(ratio * maxSize.height);\n        //stretch ? { width: Math.round(intrinsicWidth / 100), height: Math.round(intrinsicHeight / 100) } : maxSize\n        if (calculatedWidth > maxSize.width)\n            maxSize.width = calculatedWidth;\n        let scaling = stretch || !sizesEqual(size, sizeEnd);\n        const scaleOptions = {};\n        const textOptions = {\n            fontsize: maxSize.height, fontfile, textfile,\n            x: Math.ceil(isNumber(xEnd) ? Math.max(x, xEnd) : x),\n            y: Math.ceil(isNumber(yEnd) ? Math.max(y, yEnd) : y),\n            // fix_bounds: 1,\n        };\n        // console.log(this.constructor.name, \"commandFilters\", colorSize, maxSize, size, sizeEnd)\n        const position = tweenPosition(videoRate, duration);\n        if (tweeningColor) {\n            const alpha = color.length > 7;\n            const fromColor = alpha ? colorToRgba(color) : colorToRgb(color);\n            const toColor = alpha ? colorToRgba(colorEnd) : colorToRgb(colorEnd);\n            const keys = alpha ? colorRgbaKeys : colorRgbKeys;\n            const calcs = keys.map(key => {\n                const from = fromColor[key];\n                const to = toColor[key];\n                return from === to ? from : `${from}+(${to - from}*${position})`;\n            });\n            const calls = calcs.map(calc => ['eif', calc, 'x', 2].join(':'));\n            const expressions = calls.map(call => `%{${call}}`);\n            textOptions.fontcolor_expr = `#${expressions.join('')}`;\n        }\n        else\n            textOptions.fontcolor = foreColor;\n        const colorCommand = this.colorCommandFilter(maxSize, videoRate, duration, backColor);\n        commandFilters.push(colorCommand);\n        let filterInput = arrayLast(colorCommand.outputs);\n        // console.log(this.constructor.name, \"commandFilters\", scaling, stretch)\n        if (scaling) {\n            scaleOptions.width = stretch ? tweenOption(width, sizeEnd.width, position, true) : -1;\n            scaleOptions.height = tweenOption(height, sizeEnd.height, position, true);\n            if (!(isNumber(scaleOptions.width) && isNumber(scaleOptions.height))) {\n                scaleOptions.eval = 'frame';\n            }\n        }\n        const drawtextFilter = {\n            inputs: [filterInput], ffmpegFilter,\n            options: textOptions, outputs: [drawtextId]\n        };\n        commandFilters.push(drawtextFilter);\n        filterInput = drawtextId;\n        if (!contentOutput) {\n            const formatFilter = 'format';\n            const formatId = idGenerate(formatFilter);\n            const formatCommandFilter = {\n                inputs: [filterInput], ffmpegFilter: formatFilter,\n                options: { pix_fmts: 'yuva420p' }, outputs: [formatId]\n            };\n            commandFilters.push(formatCommandFilter);\n            filterInput = formatId;\n        }\n        if (scaling) {\n            const scaleFilter = 'scale';\n            const scaleFilterId = idGenerate(scaleFilter);\n            const scaleCommandFilter = {\n                inputs: [filterInput], ffmpegFilter: scaleFilter,\n                options: scaleOptions,\n                outputs: [scaleFilterId]\n            };\n            commandFilters.push(scaleCommandFilter);\n            filterInput = scaleFilterId;\n        }\n        return commandFilters;\n    }\n    _ffmpegFilter = 'drawtext';\n}\n\nconst FilterIdPrefix = `${IdPrefix}filter.`;\nconst filterDefaults = [\n    new AlphamergeFilter({ id: `${FilterIdPrefix}alphamerge` }),\n    new ChromaKeyFilter({ id: `${FilterIdPrefix}chromakey` }),\n    new ColorChannelMixerFilter({ id: `${FilterIdPrefix}colorchannelmixer` }),\n    new ColorFilter({ id: `${FilterIdPrefix}color` }),\n    new ColorizeFilter({ id: `${FilterIdPrefix}colorize` }),\n    new ConvolutionFilter({ id: `${FilterIdPrefix}convolution` }),\n    new CropFilter({ id: `${FilterIdPrefix}crop` }),\n    new FpsFilter({ id: `${FilterIdPrefix}fps` }),\n    new OpacityFilter({ id: `${FilterIdPrefix}opacity` }),\n    new OverlayFilter({ id: `${FilterIdPrefix}overlay` }),\n    new ScaleFilter({ id: `${FilterIdPrefix}scale` }),\n    new SetptsFilter({ id: `${FilterIdPrefix}setpts` }),\n    new SetsarFilter({ id: `${FilterIdPrefix}setsar` }),\n    new TrimFilter({ id: `${FilterIdPrefix}trim` }),\n    new TextFilter({ id: `${FilterIdPrefix}text` }),\n];\nconst filterDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id);\n    return new FilterDefinitionClass(object);\n};\nconst filterDefinitionFromId = (id) => {\n    const qualifiedId = id.includes('.') ? id : `${FilterIdPrefix}${id}`;\n    const definition = filterDefaults.find(definition => definition.id === qualifiedId);\n    if (definition)\n        return definition;\n    return filterDefinition({ id: qualifiedId });\n};\nconst filterInstance = (object) => {\n    const { id } = object;\n    if (!id)\n        throw Errors.invalid.definition.id;\n    const definition = filterDefinitionFromId(id);\n    return definition.instanceFromObject(object);\n};\nconst filterFromId = (id) => {\n    const definition = filterDefinitionFromId(id);\n    return definition.instanceFromObject({ id });\n};\nFactories[DefinitionType.Filter] = {\n    definition: filterDefinition,\n    definitionFromId: filterDefinitionFromId,\n    fromId: filterFromId,\n    instance: filterInstance,\n    defaults: filterDefaults,\n};\n\nconst DefaultContentId = `${IdPrefix}content${IdSuffix}`;\nconst isContent = (value) => {\n    return isTweenable(value) && isContentType(value.type);\n};\nfunction assertContent(value, name) {\n    if (!isContent(value))\n        throwError(value, 'Content', name);\n}\nconst isContentDefinition = (value) => {\n    return isTweenableDefinition(value) && isContentType(value.type);\n};\n\nconst isPreloadableDefinition = (value) => {\n    return isContentDefinition(value) && \"loadType\" in value;\n};\nfunction assertPreloadableDefinition(value) {\n    if (!isPreloadableDefinition(value))\n        throw new Error('expected PreloadableDefinition');\n}\nconst isPreloadable = (value) => {\n    return isContent(value) && isPreloadableDefinition(value.definition);\n};\nfunction assertPreloadable(value) {\n    if (!isPreloadable(value))\n        throw new Error('expected Preloadable');\n}\n\nconst UpdatableSizeDefinitionType = [\n    DefinitionType.Image,\n    DefinitionType.Video,\n    DefinitionType.VideoSequence,\n];\nconst isUpdatableSize = (value) => {\n    return isPreloadable(value);\n};\nfunction assertUpdatableSize(value) {\n    if (!isUpdatableSize(value))\n        throwError(value, 'UpdatableSize');\n}\nconst isUpdatableSizeType = (value) => {\n    return isDefinitionType(value) && UpdatableSizeDefinitionType.includes(value);\n};\nconst isUpdatableSizeDefinition = (value) => {\n    return isPreloadableDefinition(value);\n};\nfunction assertUpdatableSizeDefinition(value) {\n    if (!isUpdatableSizeDefinition(value))\n        throwError(value, 'UpdatableSizeDefinition');\n}\n\nfunction ContainerMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { container } = this;\n            if (container) {\n                this.addProperties(object, propertyInstance({\n                    name: 'x', type: DataType.Percent, defaultValue: 0.5,\n                    group: DataGroup.Point, tweenable: true,\n                }));\n                this.addProperties(object, propertyInstance({\n                    name: 'y', type: DataType.Percent, defaultValue: 0.5,\n                    group: DataGroup.Point, tweenable: true,\n                }));\n                // offN, offS, offE, offW\n                Directions.forEach(direction => {\n                    this.addProperties(object, propertyInstance({\n                        name: `off${direction}`, type: DataType.Boolean,\n                        group: DataGroup.Point,\n                    }));\n                });\n                this.addProperties(object, propertyInstance({\n                    tweenable: true, name: 'opacity',\n                    type: DataType.Percent, defaultValue: 1.0,\n                    group: DataGroup.Opacity,\n                }));\n            }\n        }\n        _colorizeFilter;\n        get colorizeFilter() { return this._colorizeFilter ||= filterFromId('colorize'); }\n        colorizeCommandFilters(args) {\n            const { contentColors: colors, videoRate, filterInput, time } = args;\n            assertPopulatedArray(colors);\n            const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n            const { colorizeFilter } = this;\n            const filterArgs = {\n                videoRate, duration, filterInput\n            };\n            const [color, colorEnd] = colors;\n            colorizeFilter.setValue(color, 'color');\n            colorizeFilter.setValue(colorEnd, `color${PropertyTweenSuffix}`);\n            return colorizeFilter.commandFilters(filterArgs);\n        }\n        colorMaximize = false;\n        containedVideo(video, containerRect, size, time, range) {\n            const x = Math.round(Number(video.getAttribute('x')));\n            const y = Math.round(Number(video.getAttribute('y')));\n            const containerPoint = pointCopy(containerRect);\n            containerPoint.x -= x;\n            containerPoint.y -= y;\n            const zeroRect = { ...containerPoint, ...sizeCopy(containerRect) };\n            const updatableContainer = isUpdatableSize(this);\n            const items = [];\n            const { div } = this;\n            const styles = [];\n            styles.push(`left: ${x}px`);\n            styles.push(`top: ${y}px`);\n            if (updatableContainer) {\n                const file = this.intrinsicGraphFile({ size: true, editing: true });\n                const { preloader } = this.clip.track.mash;\n                const src = preloader.sourceUrl(file);\n                styles.push(`mask-image: url(${src})`);\n                styles.push('mask-repeat: no-repeat');\n                styles.push('mask-mode: luminance');\n                styles.push(`mask-size: ${zeroRect.width}px ${zeroRect.height}px`);\n                styles.push(`mask-position: ${zeroRect.x}px ${zeroRect.y}px`);\n            }\n            else {\n                const containerItem = this.pathElement(zeroRect);\n                containerItem.setAttribute('fill', colorWhite);\n                let clipId = idGenerateString();\n                const clipElement = globalThis.document.createElementNS(NamespaceSvg, 'clipPath');\n                svgSet(clipElement, clipId);\n                svgAppend(clipElement, containerItem);\n                const svg = svgElement(size);\n                svgSetChildren(svg, [svgDefsElement([clipElement])]);\n                styles.push(`clip-path:${svgUrl(clipId)}`);\n                items.push(svg);\n            }\n            div.setAttribute('style', styles.join(';') + ';');\n            svgSetChildren(div, [video]);\n            items.push(div);\n            return Promise.resolve(items);\n        }\n        containedContent(content, containerRect, size, time, range, icon) {\n            const updatableContainer = isUpdatableSize(this);\n            const updatableContent = isUpdatableSize(content);\n            const contentPromise = content.contentPreviewItemPromise(containerRect, time, range, icon);\n            const containedPromise = contentPromise.then(contentItem => {\n                assertObject(contentItem);\n                if (isLoadedVideo(contentItem)) {\n                    assertTrue(!icon, 'not icon');\n                    // console.log(this.constructor.name, \"containedContent VIDEO\")\n                    return this.containedVideo(contentItem, containerRect, size, time, range);\n                }\n                const containerPromise = this.containerPreviewItemPromise(containerRect, time, range, icon);\n                return containerPromise.then(containerItem => {\n                    const defs = [];\n                    // TODO: make luminance a property of container...\n                    const luminance = true;\n                    defs.push(containerItem);\n                    let containerId = idGenerateString();\n                    if (updatableContainer && !icon) {\n                        // container is image/video so we need to add a polygon for hover\n                        const polygonElement = svgPolygonElement(containerRect, '', 'transparent', containerId);\n                        polygonElement.setAttribute('vector-effect', 'non-scaling-stroke;');\n                        defs.push(polygonElement);\n                        containerId = idGenerateString();\n                    }\n                    containerItem.setAttribute('id', containerId);\n                    const group = svgGroupElement();\n                    svgAppend(group, [svgPolygonElement(containerRect, '', 'transparent'), contentItem]);\n                    const items = [group];\n                    svgAddClass(group, 'contained');\n                    const maskElement = svgMaskElement(undefined, group, luminance);\n                    defs.push(maskElement);\n                    const useContainerInMask = svgUseElement(containerId);\n                    maskElement.appendChild(svgPolygonElement(size, '', 'black'));\n                    maskElement.appendChild(useContainerInMask);\n                    if (!updatableContainer) {\n                        containerItem.setAttribute('vector-effect', 'non-scaling-stroke;');\n                        useContainerInMask.setAttribute('fill', colorWhite);\n                    }\n                    const containerSvgFilter = this.containerSvgFilter(containerItem, size, containerRect, time, range);\n                    if (containerSvgFilter)\n                        defs.push(containerSvgFilter);\n                    else\n                        containerItem.removeAttribute('filter');\n                    const contentSvgFilter = content.contentSvgFilter(contentItem, size, containerRect, time, range);\n                    if (contentSvgFilter)\n                        defs.push(contentSvgFilter);\n                    else\n                        contentItem.removeAttribute('filter');\n                    const useSvg = (updatableContent || updatableContainer) && !icon;\n                    const svg = useSvg ? this.svgElement : svgElement();\n                    svgSetChildren(svg, [svgDefsElement(defs), ...items]);\n                    svgSetDimensions(svg, size);\n                    return [svg];\n                });\n            });\n            return containedPromise;\n        }\n        containerColorCommandFilters(args) {\n            const commandFilters = [];\n            const { contentColors, containerRects, track } = args;\n            const { colorMaximize } = this;\n            if (!colorMaximize)\n                return super.containerColorCommandFilters(args);\n            assertPopulatedArray(contentColors);\n            const tweeningSize = !rectsEqual(...containerRects);\n            const maxSize = tweeningSize ? tweenMaxSize(...containerRects) : containerRects[0];\n            const colorArgs = {\n                ...args, outputSize: maxSize\n            };\n            commandFilters.push(...this.colorBackCommandFilters(colorArgs, `content-${track}`));\n            return commandFilters;\n        }\n        containerCommandFilters(args, tweening) {\n            const commandFilters = [];\n            const { contentColors, filterInput: input } = args;\n            let filterInput = input;\n            // console.log(this.constructor.name, \"containerCommandFilters\", filterInput)\n            assertPopulatedString(filterInput, 'filterInput');\n            if (!contentColors?.length) {\n                commandFilters.push(...this.alphamergeCommandFilters({ ...args, filterInput }));\n                filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            }\n            commandFilters.push(...this.containerFinalCommandFilters({ ...args, filterInput }));\n            return commandFilters;\n        }\n        containerFinalCommandFilters(args) {\n            const commandFilters = [];\n            const { filterInput: input } = args;\n            let filterInput = input;\n            assertPopulatedString(filterInput, 'filterInput');\n            const opacityFilters = this.opacityCommandFilters(args);\n            if (opacityFilters.length) {\n                commandFilters.push(...opacityFilters);\n                filterInput = arrayLast(arrayLast(opacityFilters).outputs);\n            }\n            commandFilters.push(...this.translateCommandFilters({ ...args, filterInput }));\n            return commandFilters;\n        }\n        containerRects(args, inRect) {\n            // console.log(this.constructor.name, \"containerRects\", inRect, args)\n            const { size, time, timeRange } = args;\n            const { lock } = this;\n            const tweenRects = this.tweenRects(time, timeRange);\n            const locked = tweenRectsLock(tweenRects, lock);\n            const { width: inWidth, height: inHeight } = inRect;\n            const ratio = ((inWidth || size.width)) / ((inHeight || size.height));\n            const [scale, scaleEnd] = locked;\n            const forcedScale = tweenScaleSizeRatioLock(scale, size, ratio, lock);\n            // console.log(this.constructor.name, \"containerRects forcedScale\", forcedScale, \"= tweenScaleSizeRatioLock(\", scale, size, ratio, lock, \")\")\n            const { directionObject } = this;\n            const transformedRect = tweenScaleSizeToRect(size, forcedScale, directionObject);\n            const tweening = !rectsEqual(scale, scaleEnd);\n            if (!tweening) {\n                // console.log(this.constructor.name, \"containerRects !tweening\", transformedRect, locked)\n                return [transformedRect, transformedRect];\n            }\n            const forcedScaleEnd = tweenScaleSizeRatioLock(scaleEnd, size, ratio, lock);\n            const tweenRect = tweenOverRect(forcedScale, forcedScaleEnd);\n            const tweened = tweenScaleSizeToRect(size, tweenRect, directionObject);\n            const tuple = [transformedRect, tweened];\n            return tuple;\n        }\n        containerPreviewItemPromise(containerRect, time, range, icon) {\n            return Promise.resolve(this.pathElement(containerRect));\n        }\n        containerSvgFilter(svgItem, outputSize, containerRect, time, clipTime) {\n            const [opacity] = this.tweenValues('opacity', time, clipTime);\n            // console.log(this.constructor.name, \"containerSvgFilters\", opacity)\n            if (!isBelowOne(opacity))\n                return;\n            const { opacityFilter } = this;\n            opacityFilter.setValue(opacity, 'opacity');\n            return svgFilterElement(opacityFilter.filterSvgFilter(), svgItem);\n        }\n        get directions() { return Anchors; }\n        get directionObject() {\n            return Object.fromEntries(Directions.map(direction => [direction, !!this.value(`off${direction}`)]));\n        }\n        _div;\n        get div() {\n            return this._div ||= globalThis.document.createElement('div');\n        }\n        get isDefault() { return this.definitionId === DefaultContainerId; }\n        opacityCommandFilters(args) {\n            const { outputSize: outputSize, filterInput, clipTime, time, videoRate } = args;\n            assertTimeRange(clipTime);\n            const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n            const commandFilters = [];\n            const filterCommandFilterArgs = {\n                dimensions: outputSize, filterInput, videoRate, duration\n            };\n            const [opacity, opacityEnd] = this.tweenValues('opacity', time, clipTime);\n            // console.log(this.constructor.name, \"opacityCommandFilters\", opacity, opacityEnd)\n            if (isBelowOne(opacity) || (isDefined(opacityEnd) && isBelowOne(opacityEnd))) {\n                const { opacityFilter } = this;\n                opacityFilter.setValues({ opacity, opacityEnd });\n                commandFilters.push(...opacityFilter.commandFilters(filterCommandFilterArgs));\n            }\n            return commandFilters;\n        }\n        _opacityFilter;\n        get opacityFilter() { return this._opacityFilter ||= filterFromId('opacity'); }\n        pathElement(rect, forecolor = 'none') {\n            return svgPolygonElement(rect, '', forecolor);\n        }\n        _svgElement;\n        get svgElement() {\n            return this._svgElement ||= svgElement();\n        }\n        translateCommandFilters(args) {\n            const commandFilters = [];\n            const { outputSize, time, containerRects, chainInput, filterInput, videoRate } = args;\n            if (!chainInput)\n                return commandFilters;\n            assertPopulatedArray(containerRects);\n            const [rect, rectEnd] = containerRects;\n            const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n            const { overlayFilter } = this;\n            // overlayFilter.setValue('yuv420p10', 'format')\n            overlayFilter.setValue(rect.x, 'x');\n            overlayFilter.setValue(rect.y, 'y');\n            if (duration) {\n                overlayFilter.setValue(rectEnd.x, `x${PropertyTweenSuffix}`);\n                overlayFilter.setValue(rectEnd.y, `y${PropertyTweenSuffix}`);\n            }\n            const filterArgs = {\n                dimensions: outputSize, filterInput, videoRate, duration, chainInput\n            };\n            commandFilters.push(...overlayFilter.commandFilters(filterArgs));\n            return commandFilters;\n        }\n    };\n}\n\nfunction ContainerDefinitionMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            this.properties.push(propertyInstance({\n                name: 'lock', type: DataType.String, defaultValue: Orientation.H,\n                group: DataGroup.Size,\n            }));\n        }\n        type = DefinitionType.Container;\n    };\n}\n\nconst isShapeContainer = (value) => {\n    return isContainer(value) && \"path\" in value;\n};\n\nconst timeGreatestCommonDenominator = (fps1, fps2) => {\n    let a = fps1;\n    let b = fps2;\n    let t = 0;\n    while (b !== 0) {\n        t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n};\nconst timeLowestCommonMultiplier = (a, b) => ((a * b) / timeGreatestCommonDenominator(a, b));\nconst timeEqualizeRates = (time1, time2, rounding = '') => {\n    if (time1.fps === time2.fps)\n        return [time1, time2];\n    const gcf = timeLowestCommonMultiplier(time1.fps, time2.fps);\n    return [\n        time1.scale(gcf, rounding),\n        time2.scale(gcf, rounding)\n    ];\n};\nclass TimeClass {\n    constructor(frame = 0, fps = 1) {\n        if (!isInteger(frame) || frame < 0) {\n            // console.trace(Errors.frame, frame)\n            throw Errors.frame + frame;\n        }\n        if (!isInteger(fps) || fps < 1)\n            throw Errors.fps;\n        this.frame = frame;\n        this.fps = fps;\n    }\n    add(time) {\n        const [time1, time2] = timeEqualizeRates(this, time);\n        return new TimeClass(time1.frame + time2.frame, time1.fps);\n    }\n    addFrame(frames) {\n        const time = this.copy;\n        time.frame += frames;\n        return time;\n    }\n    closest(timeRange) {\n        const frame = timeRange.frame + Math.round(timeRange.frames / 2);\n        const halfTime = new TimeClass(frame, timeRange.fps);\n        const [midTime, editorTime] = timeEqualizeRates(halfTime, this);\n        const shouldBeOnLast = midTime.frame < editorTime.frame;\n        return shouldBeOnLast ? timeRange.lastTime : timeRange.startTime;\n    }\n    get copy() { return new TimeClass(this.frame, this.fps); }\n    get description() { return `${this.frame}@${this.fps}`; }\n    divide(number, rounding = '') {\n        assertAboveZero(number);\n        if (number === 1.0)\n            return this;\n        return this.withFrame(roundWithMethod(this.frame / number, rounding));\n    }\n    equalsTime(time) {\n        const [time1, time2] = timeEqualizeRates(this, time);\n        return time1.frame === time2.frame;\n    }\n    fps;\n    frame;\n    durationFrames(duration, fps = 0) {\n        const rate = fps || this.fps;\n        const frames = [];\n        const framesMax = Math.floor(rate * duration) - 2;\n        const startFrame = Math.min(framesMax, this.scale(rate, \"floor\").frame);\n        if (this.isRange) {\n            const scaledFrame = this.timeRange.endTime.scale(rate, \"ceil\").frame;\n            const endFrame = Math.min(framesMax + 1, scaledFrame);\n            for (let frame = startFrame; frame < endFrame; frame += 1) {\n                frames.push(frame);\n            }\n        }\n        else\n            frames.push(startFrame);\n        return frames;\n    }\n    isRange = false;\n    get lengthSeconds() { return 0; }\n    min(time) {\n        const [time1, time2] = timeEqualizeRates(this, time);\n        return new TimeClass(Math.min(time1.frame, time2.frame), time1.fps);\n    }\n    scale(fps, rounding = '') {\n        if (this.fps === fps)\n            return this;\n        const frame = (Number(this.frame) / Number(this.fps)) * Number(fps);\n        return new TimeClass(roundWithMethod(frame, rounding), fps);\n    }\n    scaleToFps(fps) { return this.scaleToTime(new TimeClass(0, fps)); }\n    scaleToTime(time) {\n        return timeEqualizeRates(this, time)[0];\n    }\n    get seconds() { return Number(this.frame) / Number(this.fps); }\n    get startTime() { return this; }\n    subtract(time) {\n        const [time1, time2] = timeEqualizeRates(this, time);\n        let subtracted = time2.frame;\n        if (subtracted > time1.frame) {\n            subtracted -= subtracted - time1.frame;\n        }\n        return new TimeClass(time1.frame - subtracted, time1.fps);\n    }\n    subtractFrames(frames) {\n        const time = this.copy;\n        time.frame -= frames;\n        return time;\n    }\n    get timeRange() { throw Errors.timeRange; }\n    toString() { return `[${this.description}]`; }\n    withFrame(frame) {\n        const time = this.copy;\n        time.frame = frame;\n        return time;\n    }\n}\n\nclass TimeRangeClass extends TimeClass {\n    frames;\n    constructor(frame = 0, fps = 1, frames = 1) {\n        super(frame, fps);\n        if (!(isInteger(frames) && frames >= 0)) {\n            console.trace(this.constructor.name);\n            throw Errors.timeRange + ' frames';\n        }\n        this.frames = frames;\n    }\n    addFrames(frames) {\n        const time = this.copy;\n        time.frames += frames;\n        return time;\n    }\n    get copy() {\n        return new TimeRangeClass(this.frame, this.fps, this.frames);\n    }\n    get description() { return `${this.frame}-${this.frames}@${this.fps}`; }\n    get end() { return this.frame + this.frames; }\n    get endTime() { return new TimeClass(this.end, this.fps); }\n    equalsTimeRange(timeRange) {\n        const [range1, range2] = timeEqualizeRates(this, timeRange);\n        return range1.frame === range2.frame && range1.frames === range2.frames;\n    }\n    get frameTimes() {\n        const { frames, frame, fps } = this;\n        return Array.from({ length: frames }, (_, i) => new TimeClass(frame, fps));\n    }\n    includes(frame) {\n        return frame >= this.frame && frame <= this.end;\n    }\n    includesTime(time) {\n        const [thisTime, scaledTime] = timeEqualizeRates(this, time);\n        const thisRange = thisTime;\n        const { frame, end } = thisRange;\n        const other = scaledTime.frame;\n        return other >= frame && other < end;\n    }\n    intersects(time) {\n        if (!time.isRange)\n            return this.includesTime(time);\n        const [range1, range2] = timeEqualizeRates(time, this);\n        if (range1.frame >= range2.end)\n            return false;\n        return range1.end > range2.frame;\n    }\n    isRange = true;\n    get last() { return this.frame + this.frames - 1; }\n    get lastTime() { return new TimeClass(this.last, this.fps); }\n    get lengthSeconds() { return Number(this.frames) / Number(this.fps); }\n    get position() { return Number(this.frame) / Number(this.frames); }\n    positionTime(position, rounding = '') {\n        const frame = roundWithMethod((this.frames - this.frame) * position, rounding);\n        return new TimeClass(this.frame + frame, this.fps);\n    }\n    get startTime() { return new TimeClass(this.frame, this.fps); }\n    scale(fps = 1, rounding = \"\") {\n        if (this.fps === fps)\n            return this.copy;\n        const value = Number(this.frames) / (Number(this.fps) / Number(fps));\n        const time = super.scale(fps, rounding);\n        const frames = Math.max(1, roundWithMethod(value, rounding));\n        return new TimeRangeClass(time.frame, time.fps, frames);\n    }\n    get timeRange() { return this; }\n    get times() {\n        const array = [this.startTime];\n        if (this.frames > 1)\n            array.push(this.endTime);\n        return array;\n    }\n    minEndTime(endTime) {\n        const [range, time] = timeEqualizeRates(this, endTime);\n        range.frames = Math.min(range.frames, time.frame);\n        return range;\n    }\n    withFrame(frame) {\n        const range = this.copy;\n        range.frame = frame;\n        return range;\n    }\n    withFrames(frames) {\n        const range = this.copy;\n        range.frames = frames;\n        return range;\n    }\n}\n\nconst timeRangeFromArgs = (frame = 0, fps = 1, frames = 1) => {\n    return new TimeRangeClass(frame, fps, frames);\n};\nconst timeRangeFromSeconds = (start = 0, duration = 1) => {\n    return timeRangeFromArgs(start, 1, duration);\n};\nconst timeRangeFromTime = (time, frames = 1) => {\n    return timeRangeFromArgs(time.frame, time.fps, frames);\n};\nconst timeRangeFromTimes = (startTime, endTime) => {\n    if (!endTime)\n        return timeRangeFromTime(startTime);\n    const [time1, time2] = timeEqualizeRates(startTime, endTime);\n    if (time2.frame <= time1.frame) {\n        console.trace('fromTimes');\n        throw Errors.argument + 'fromTimes ' + time1 + ' ' + time2;\n    }\n    const frames = time2.frame - time1.frame;\n    return timeRangeFromArgs(time1.frame, time1.fps, frames);\n};\nconst timeFromArgs = (frame = 0, fps = 1) => {\n    return new TimeClass(frame, fps);\n};\nconst timeFromSeconds = (seconds = 0, fps = 1, rounding = '') => {\n    if (!isNumber(seconds) || seconds < 0)\n        throw Errors.seconds;\n    if (!isInteger(fps) || fps < 1)\n        throw Errors.fps;\n    const rounded = roundWithMethod(seconds * fps, rounding);\n    return timeFromArgs(rounded, fps);\n};\n\nconst DefaultEditorArgs = {\n    buffer: 10,\n    fps: 30,\n    loop: true,\n    volume: 0.75,\n    precision: 3,\n    autoplay: false,\n};\nconst DefaultMash = {\n    label: \"Mash\",\n    quantize: 10,\n    color: colorBlack,\n    gain: 0.75,\n    buffer: 10,\n};\nconst DefaultCast = {\n    label: \"Cast\",\n    quantize: 10,\n    color: colorBlack,\n    gain: 0.75,\n    buffer: 10,\n};\nconst Default = {\n    duration: 3,\n    label: \"Unlabeled\",\n    editor: DefaultEditorArgs,\n    cast: DefaultCast,\n    mash: DefaultMash,\n    definition: {\n        image: { duration: 2 },\n        textcontainer: { duration: 3 },\n        shape: { duration: 3 },\n        visible: { duration: 3 },\n        video: { fps: 0 },\n        videosequence: { pattern: '%.jpg', fps: 10, increment: 1, begin: 1, padding: 0 },\n        videostream: { duration: 10 },\n    },\n};\n\nfunction TweenableMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { container } = object;\n            if (container)\n                this.container = true;\n        }\n        alphamergeCommandFilters(args) {\n            const commandFilters = [];\n            const { videoRate, outputSize: rect, track, filterInput } = args;\n            assertPopulatedString(filterInput);\n            assertAboveZero(videoRate);\n            assertSize(rect);\n            const chainInput = `content-${track}`;\n            const filterArgs = {\n                videoRate: 0, duration: 0, filterInput, chainInput\n            };\n            const { alphamergeFilter } = this;\n            commandFilters.push(...alphamergeFilter.commandFilters(filterArgs));\n            return commandFilters;\n        }\n        _alphamergeFilter;\n        get alphamergeFilter() { return this._alphamergeFilter ||= filterFromId('alphamerge'); }\n        amixCommandFilters(args) {\n            const { chainInput, filterInput } = args;\n            assertPopulatedString(chainInput);\n            assertPopulatedString(filterInput);\n            const amixFilter = 'amix';\n            // const amixId = idGenerate(amixFilter)\n            const commandFilters = [];\n            const commandFilter = {\n                inputs: [chainInput, filterInput],\n                ffmpegFilter: amixFilter,\n                options: { normalize: 0 }, outputs: []\n            };\n            commandFilters.push(commandFilter);\n            return commandFilters;\n        }\n        canColor(args) { return false; }\n        canColorTween(args) { return false; }\n        _clip;\n        get clip() { return this._clip; }\n        set clip(value) { this._clip = value; }\n        get clipped() { return !!this._clip; }\n        colorBackCommandFilters(args, output) {\n            const { contentColors = [], videoRate, outputSize, duration } = args;\n            assertSize(outputSize);\n            const evenSize = sizeEven(outputSize);\n            const [color = colorBlackOpaque, colorEnd = colorBlackOpaque] = contentColors;\n            const outputString = output || idGenerate(colorName(color) || 'back');\n            const { colorFilter } = this;\n            const colorArgs = { videoRate, duration };\n            colorFilter.setValue(color, 'color');\n            colorFilter.setValue(colorEnd, `color${PropertyTweenSuffix}`);\n            colorFilter.setValue(evenSize.width, 'width');\n            colorFilter.setValue(evenSize.height, 'height');\n            colorFilter.setValue(evenSize.width, `width${PropertyTweenSuffix}`);\n            colorFilter.setValue(evenSize.height, `height${PropertyTweenSuffix}`);\n            const commandFilters = colorFilter.commandFilters(colorArgs);\n            if (sizesEqual(evenSize, outputSize)) {\n                arrayLast(commandFilters).outputs = [outputString];\n            }\n            else {\n                const filterInput = arrayLast(arrayLast(commandFilters).outputs);\n                assertPopulatedString(filterInput, 'crop input');\n                const cropFilter = 'crop';\n                // const cropId = idGenerate(cropFilter)\n                const cropCommandFilter = {\n                    inputs: [filterInput], ffmpegFilter: cropFilter,\n                    options: { w: outputSize.width, h: outputSize.height, exact: 1 },\n                    outputs: [outputString]\n                };\n                commandFilters.push(cropCommandFilter);\n            }\n            return commandFilters;\n        }\n        _colorFilter;\n        get colorFilter() { return this._colorFilter ||= filterFromId('color'); }\n        commandFilters(args, tweening, container = false) {\n            const commandFilters = [];\n            const { filterInput: input = '' } = args;\n            let filterInput = input;\n            // console.log(this.constructor.name, \"commandFilters\", container)\n            const initialFilters = this.initialCommandFilters(args, tweening, container);\n            if (initialFilters.length) {\n                commandFilters.push(...initialFilters);\n                filterInput = arrayLast(arrayLast(initialFilters).outputs);\n            }\n            if (container)\n                commandFilters.push(...this.containerCommandFilters({ ...args, filterInput }, tweening));\n            else\n                commandFilters.push(...this.contentCommandFilters({ ...args, filterInput }, tweening));\n            return commandFilters;\n        }\n        container = false;\n        containerColorCommandFilters(args) {\n            const commandFilters = [];\n            const { contentColors: colors = [], containerRects, videoRate, duration } = args;\n            assertArray(containerRects, 'containerRects');\n            const [rect, rectEnd] = containerRects;\n            const colorArgs = { videoRate, duration };\n            const { colorFilter } = this;\n            const [color, colorEnd] = colors;\n            colorFilter.setValue(color || colorWhite, 'color');\n            colorFilter.setValue(colorEnd, `color${PropertyTweenSuffix}`);\n            colorFilter.setValue(rect.width, 'width');\n            colorFilter.setValue(rect.height, 'height');\n            colorFilter.setValue(rectEnd.width, `width${PropertyTweenSuffix}`);\n            colorFilter.setValue(rectEnd.height, `height${PropertyTweenSuffix}`);\n            commandFilters.push(...colorFilter.commandFilters(colorArgs));\n            return commandFilters;\n        }\n        containerCommandFilters(args, tweening) {\n            // console.log(this.constructor.name, \"containerCommandFilters returning empty\")\n            return [];\n        }\n        containerFinalCommandFilters(args) {\n            return [];\n        }\n        contentCommandFilters(args, tweening) {\n            // console.log(this.constructor.name, \"contentCommandFilters returning empty\")\n            return [];\n        }\n        copyCommandFilter(input, track, prefix = 'content') {\n            const contentOutput = `${prefix}-${track}`;\n            const commandFilter = {\n                inputs: [input], ffmpegFilter: 'copy', options: {}, outputs: [contentOutput]\n            };\n            return commandFilter;\n        }\n        _cropFilter;\n        get cropFilter() { return this._cropFilter ||= filterFromId('crop'); }\n        definitionTime(time, clipTime) {\n            const { fps: quantize } = clipTime;\n            const scaledTime = time.scaleToFps(quantize); // may have fps higher than quantize and time.fps\n            const { startTime, endTime } = clipTime;\n            const frame = Math.max(Math.min(scaledTime.frame, endTime.frame), startTime.frame);\n            return scaledTime.withFrame(frame - startTime.frame);\n        }\n        frames(quantize) {\n            return timeFromArgs(Default.duration, quantize).frame;\n        }\n        fileCommandFiles(graphFileArgs) {\n            const commandFiles = [];\n            const files = this.fileUrls(graphFileArgs);\n            let inputCount = 0;\n            commandFiles.push(...files.map((graphFile, index) => {\n                const { input } = graphFile;\n                const inputId = (index && input) ? `${this.id}-${inputCount}` : this.id;\n                const commandFile = { ...graphFile, inputId };\n                if (input)\n                    inputCount++;\n                return commandFile;\n            }));\n            return commandFiles;\n        }\n        fileUrls(args) { return []; }\n        hasIntrinsicSizing = false;\n        hasIntrinsicTiming = false;\n        initialCommandFilters(args, tweening, container = false) {\n            throw new Error(Errors.unimplemented);\n        }\n        intrinsicRect(editing = false) {\n            throw new Error(Errors.unimplemented);\n        }\n        intrinsicsKnown(options) { return true; }\n        intrinsicGraphFile(options) {\n            const { editing, size, duration } = options;\n            const clipTime = timeRangeFromArgs();\n            const graphFileArgs = {\n                editing, time: clipTime.startTime, clipTime, quantize: clipTime.fps,\n                visible: size, audible: duration,\n            };\n            const [graphFile] = this.fileUrls(graphFileArgs);\n            assertObject(graphFile);\n            return graphFile;\n        }\n        get isDefault() { return false; }\n        mutable() { return false; }\n        overlayCommandFilters(bottomInput, topInput, alpha) {\n            assertPopulatedString(bottomInput, 'bottomInput');\n            assertPopulatedString(topInput, 'topInput');\n            const commandFilters = [];\n            const overlayArgs = {\n                filterInput: topInput, chainInput: bottomInput, videoRate: 0, duration: 0\n            };\n            const { overlayFilter } = this;\n            if (alpha)\n                overlayFilter.setValue('yuv420p10', 'format');\n            overlayFilter.setValue(0, 'x');\n            overlayFilter.setValue(0, 'y');\n            commandFilters.push(...overlayFilter.commandFilters(overlayArgs));\n            const commandFilter = arrayLast(commandFilters);\n            commandFilter.outputs = [idGenerate(topInput)];\n            return commandFilters;\n        }\n        _overlayFilter;\n        get overlayFilter() { return this._overlayFilter ||= filterFromId('overlay'); }\n        scaleCommandFilters(args) {\n            const { time, containerRects, filterInput: input, videoRate } = args;\n            let filterInput = input;\n            assertPopulatedString(filterInput, 'filterInput');\n            assertArray(containerRects, 'containerRects');\n            const [rect, rectEnd] = containerRects;\n            assertRect(rect);\n            assertRect(rectEnd);\n            const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n            // console.log(this.constructor.name, \"scaleCommandFilters\", containerRects, duration)\n            const commandFilters = [];\n            const { scaleFilter } = this;\n            const filterCommandFilterArgs = {\n                duration, videoRate, filterInput\n            };\n            scaleFilter.setValue(rect.width, 'width');\n            scaleFilter.setValue(rect.height, 'height');\n            scaleFilter.setValue(rectEnd.width, `width${PropertyTweenSuffix}`);\n            scaleFilter.setValue(rectEnd.height, `height${PropertyTweenSuffix}`);\n            commandFilters.push(...scaleFilter.commandFilters(filterCommandFilterArgs));\n            return commandFilters;\n        }\n        _scaleFilter;\n        get scaleFilter() { return this._scaleFilter ||= filterFromId('scale'); }\n        selectables() { return [this, ...this.clip.selectables()]; }\n        selectType = SelectType.None;\n        selectedItems(actions) {\n            const selectedItems = [];\n            const { container, clip, selectType, definition } = this;\n            // add contentId or containerId from target, as if it were my property \n            const { id: undoValue } = definition;\n            const { timing, sizing } = clip;\n            const dataType = container ? DataType.ContainerId : DataType.ContentId;\n            const property = clip.properties.find(property => property.type === dataType);\n            assertProperty(property);\n            const { name } = property;\n            const undoValues = { timing, sizing, [name]: undoValue };\n            const values = { ...undoValues };\n            const relevantTiming = container ? Timing.Container : Timing.Content;\n            const relevantSizing = container ? Sizing.Container : Sizing.Content;\n            const timingBound = timing === relevantTiming;\n            const sizingBound = sizing === relevantSizing;\n            selectedItems.push({\n                selectType, property, value: undoValue,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(redoValue);\n                    const redoValues = { ...values, [name]: redoValue };\n                    if (timingBound || sizingBound) {\n                        const newDefinition = Defined.fromId(redoValue);\n                        const { type } = newDefinition;\n                        if (timingBound && !isTimingDefinitionType(type)) {\n                            redoValues.timing = Timing.Custom;\n                        }\n                        if (sizingBound && !isSizingDefinitionType(type)) {\n                            redoValues.sizing = container ? Sizing.Content : Sizing.Container;\n                        }\n                    }\n                    const actionObject = {\n                        type: ActionType.ChangeMultiple,\n                        property, target: clip, redoValues, undoValues\n                    };\n                    actions.create(actionObject);\n                },\n            });\n            // add my actual properties\n            const { properties } = this;\n            const props = properties.filter(property => this.selectedProperty(property));\n            props.forEach(property => {\n                selectedItems.push(...this.selectedProperties(actions, property));\n            });\n            return selectedItems;\n        }\n        selectedProperties(actions, property) {\n            const properties = [];\n            const { name, tweenable, type: dataType } = property;\n            const { selectType } = this;\n            const undoValue = this.value(name);\n            const target = this;\n            const type = dataType === DataType.Frame ? ActionType.ChangeFrame : ActionType.Change;\n            const selectedProperty = {\n                selectType, property, value: undoValue,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    actions.create({ type, property, target, redoValue, undoValue });\n                }\n            };\n            // console.log(this.constructor.name, \"selectedProperties\", name)\n            properties.push(selectedProperty);\n            if (tweenable) {\n                const tweenName = [name, PropertyTweenSuffix].join('');\n                const target = this;\n                const undoValue = this.value(tweenName);\n                const selectedPropertEnd = {\n                    selectType, property, value: undoValue, name: tweenName,\n                    changeHandler: (property, redoValue) => {\n                        actions.create({ property, target, redoValue, undoValue });\n                    }\n                };\n                // console.log(this.constructor.name, \"selectedProperties\", tweenName)\n                properties.push(selectedPropertEnd);\n            }\n            return properties;\n        }\n        selectedProperty(property) {\n            const { name } = property;\n            switch (name) {\n                case 'muted': return this.mutable();\n                case 'opacity': return this.container;\n            }\n            return true;\n        }\n        tween(keyPrefix, time, range) {\n            const value = this.value(keyPrefix);\n            const valueEnd = this.value(`${keyPrefix}${PropertyTweenSuffix}`);\n            if (isUndefined(valueEnd))\n                return value;\n            const { frame: rangeFrame, frames } = range;\n            const { frame: timeFrame } = time;\n            const frame = timeFrame - rangeFrame;\n            if (isNumber(value)) {\n                assertNumber(valueEnd);\n                return tweenNumberStep(value, valueEnd, frame, frames);\n            }\n            assertPopulatedString(value);\n            assertPopulatedString(valueEnd);\n            return tweenColorStep(value, valueEnd, frame, frames);\n        }\n        tweenPoints(time, range) {\n            const [x, xEndOrNot] = this.tweenValues('x', time, range);\n            const [y, yEndOrNot] = this.tweenValues('y', time, range);\n            assertNumber(x);\n            assertNumber(y);\n            const point = { x, y };\n            const tweenPoint = { x: xEndOrNot, y: yEndOrNot };\n            return [point, tweenOverPoint(point, tweenPoint)];\n        }\n        tweenRects(time, range) {\n            const [size, sizeEnd] = this.tweenSizes(time, range);\n            const [point, pointEnd] = this.tweenPoints(time, range);\n            return [{ ...point, ...size }, { ...pointEnd, ...sizeEnd }];\n        }\n        tweenSizes(time, range) {\n            const [width, widthEndOrNot] = this.tweenValues('width', time, range);\n            const [height, heightEndOrNot] = this.tweenValues('height', time, range);\n            assertNumber(width);\n            assertNumber(height);\n            const size = { width, height };\n            const tweenSize = { width: widthEndOrNot, height: heightEndOrNot };\n            return [size, tweenOverSize(size, tweenSize)];\n        }\n        tweenValues(key, time, range) {\n            const values = [];\n            const isRange = isTimeRange(time);\n            values.push(this.tween(key, isRange ? time.startTime : time, range));\n            if (isRange)\n                values.push(this.tween(key, time.endTime, range));\n            return values;\n        }\n        visibleCommandFiles(args) {\n            const graphFileArgs = {\n                ...args, audible: false, visible: true\n            };\n            const files = this.fileCommandFiles(graphFileArgs);\n            // console.log(this.constructor.name, \"visibleCommandFiles\", files)\n            return files;\n        }\n    };\n}\n\nconst ShapeContainerWithTweenable = TweenableMixin(InstanceBase);\nconst ShapeContainerWithContainer = ContainerMixin(ShapeContainerWithTweenable);\nclass ShapeContainerClass extends ShapeContainerWithContainer {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        this.addProperties(object, propertyInstance({\n            tweenable: true, name: 'width', type: DataType.Percent,\n            group: DataGroup.Size, defaultValue: 1.0, max: 2.0\n        }));\n        this.addProperties(object, propertyInstance({\n            tweenable: true, name: 'height', type: DataType.Percent,\n            group: DataGroup.Size, defaultValue: 1.0, max: 2.0\n        }));\n    }\n    canColor(args) {\n        const { isDefault } = this;\n        // default rect has no content to colorize, so needs color filter input\n        if (isDefault)\n            return false;\n        // shape files can only colorize a single color at a single size\n        return !this.isTweeningColor(args);\n    }\n    containerColorCommandFilters(args) {\n        const commandFilters = [];\n        // i am either default rect or a shape tweening color\n        const { colorFilter, isDefault } = this;\n        const { contentColors, containerRects, videoRate, duration } = args;\n        assertPopulatedArray(contentColors, 'contentColors');\n        const [rect, rectEnd] = containerRects;\n        const [color, colorEnd] = contentColors;\n        const maxSize = isDefault ? rect : tweenMaxSize(...containerRects);\n        const colorArgs = { videoRate, duration };\n        colorFilter.setValue(color || colorWhite, 'color');\n        colorFilter.setValue(colorEnd, `color${PropertyTweenSuffix}`);\n        colorFilter.setValue(maxSize.width, 'width');\n        colorFilter.setValue(maxSize.height, 'height');\n        const tweenSize = isDefault;\n        colorFilter.setValue(tweenSize ? rectEnd.width : undefined, `width${PropertyTweenSuffix}`);\n        colorFilter.setValue(tweenSize ? rectEnd.height : undefined, `height${PropertyTweenSuffix}`);\n        commandFilters.push(...colorFilter.commandFilters(colorArgs));\n        return commandFilters;\n    }\n    containerCommandFilters(args, tweening) {\n        const commandFilters = [];\n        const { contentColors: colors, commandFiles, filterInput: input } = args;\n        let filterInput = input;\n        // console.log(this.constructor.name, \"containerCommandFilters\", filterInput)\n        const noContentFilters = isPopulatedArray(colors);\n        const alpha = this.requiresAlpha(args, !!tweening.size);\n        if (alpha) {\n            assertPopulatedString(filterInput, 'container input');\n            const { contentColors: _, ...argsWithoutColors } = args;\n            const superArgs = {\n                ...argsWithoutColors, filterInput\n            };\n            commandFilters.push(...super.containerCommandFilters(superArgs, tweening));\n        }\n        else if (this.isDefault || noContentFilters) {\n            const { id } = this;\n            // if (!filterInput) console.log(this.constructor.name, \"containerCommandFilters calling commandFilesInput\", id)\n            filterInput ||= commandFilesInput(commandFiles, id, true);\n            assertPopulatedString(filterInput, 'final input');\n            commandFilters.push(...this.containerFinalCommandFilters({ ...args, filterInput }));\n        }\n        return commandFilters;\n    }\n    hasIntrinsicSizing = true;\n    initialCommandFilters(args, tweening, container = false) {\n        const commandFilters = [];\n        const { contentColors, ...argsWithoutColors } = args;\n        const { commandFiles, upload, track, filterInput: input, containerRects, videoRate } = argsWithoutColors;\n        if (upload)\n            return commandFilters;\n        let filterInput = input;\n        const alpha = this.requiresAlpha(args, !!tweening.size);\n        const { isDefault } = this;\n        const tweeningSize = tweening.size; // !(isDefault ? rectsEqual(...containerRects) : sizesEqual(...containerRects))\n        const maxSize = tweeningSize ? tweenMaxSize(...containerRects) : containerRects[0];\n        const evenSize = sizeEven(maxSize);\n        const contentInput = `content-${track}`;\n        const containerInput = `container-${track}`;\n        if (!tweening.canColor) {\n            if (isPopulatedString(filterInput) && !isDefault) {\n                if (alpha) {\n                    const formatFilter = 'format';\n                    const formatFilterId = idGenerate(formatFilter);\n                    const formatCommandFilter = {\n                        inputs: [filterInput], ffmpegFilter: formatFilter,\n                        options: { pix_fmts: 'yuv420p' },\n                        outputs: [formatFilterId]\n                    };\n                    commandFilters.push(formatCommandFilter);\n                    filterInput = formatFilterId;\n                }\n                else if (!sizesEqual(evenSize, maxSize)) {\n                    const colorArgs = {\n                        ...args,\n                        contentColors: [colorBlackOpaque, colorBlackOpaque],\n                        outputSize: evenSize\n                    };\n                    commandFilters.push(...this.colorBackCommandFilters(colorArgs, `${contentInput}-back`));\n                    const colorInput = arrayLast(arrayLast(commandFilters).outputs);\n                    assertPopulatedString(filterInput, 'overlay input');\n                    commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput));\n                    filterInput = arrayLast(arrayLast(commandFilters).outputs);\n                }\n            }\n        }\n        if (commandFilters.length)\n            arrayLast(commandFilters).outputs = [contentInput];\n        else if (isPopulatedString(filterInput) && contentInput !== filterInput) {\n            commandFilters.push(this.copyCommandFilter(filterInput, track));\n        }\n        if (alpha) {\n            const { id } = this;\n            // console.log(this.constructor.name, \"initialCommandFilters ALPHA calling commandFilesInput\", id)\n            const fileInput = commandFilesInput(commandFiles, id, true);\n            assertPopulatedString(fileInput, 'scale input');\n            const colorArgs = {\n                ...args,\n                contentColors: [colorBlackOpaque, colorBlackOpaque],\n                outputSize: maxSize\n            };\n            commandFilters.push(...this.colorBackCommandFilters(colorArgs, `${containerInput}-back`));\n            const colorInput = arrayLast(arrayLast(commandFilters).outputs);\n            commandFilters.push(...this.scaleCommandFilters({ ...args, filterInput: fileInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            assertPopulatedString(filterInput, 'overlay input');\n            commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            const cropArgs = { duration: 0, videoRate };\n            assertPopulatedString(filterInput, 'crop input');\n            const { cropFilter } = this;\n            cropFilter.setValue(maxSize.width, \"width\");\n            cropFilter.setValue(maxSize.height, \"height\");\n            cropFilter.setValue(0, \"x\");\n            cropFilter.setValue(0, \"y\");\n            commandFilters.push(...cropFilter.commandFilters({ ...cropArgs, filterInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            assertPopulatedString(filterInput, 'format input');\n            const formatFilter = 'format';\n            const formatCommandFilter = {\n                inputs: [filterInput], ffmpegFilter: formatFilter,\n                options: { pix_fmts: alpha ? 'yuv420p' : 'yuva420p' },\n                outputs: [containerInput]\n            };\n            commandFilters.push(formatCommandFilter);\n        }\n        return commandFilters;\n    }\n    intrinsicRect(editing = false) {\n        const { pathHeight: height, pathWidth: width } = this.definition;\n        // console.log(this.constructor.name, \"intrinsicRect\", this.definition)\n        return { width, height, ...PointZero };\n    }\n    isTweeningColor(args) {\n        const { contentColors } = args;\n        if (!isPopulatedArray(contentColors))\n            return false;\n        let [forecolor, forecolorEnd] = contentColors;\n        return forecolor !== forecolorEnd;\n    }\n    isTweeningSize(args) {\n        const { containerRects } = args;\n        if (!isPopulatedArray(containerRects)) {\n            // console.log(this.constructor.name, \"isTweeningSize FALSE BECAUSE containerRects NOT ARRAY\", args)\n            return false;\n        }\n        const equal = rectsEqual(...containerRects);\n        return !equal;\n    }\n    pathElement(rect, forecolor = '') {\n        const { definition } = this;\n        const inRect = this.intrinsicRect(true);\n        if (!sizeAboveZero(inRect)) {\n            const polygonElement = svgPolygonElement(rect, '', forecolor);\n            return polygonElement;\n        }\n        const { path } = definition;\n        const pathElement = svgPathElement(path, '');\n        svgSetTransformRects(pathElement, inRect, rect);\n        return pathElement;\n    }\n    requiresAlpha(args, tweeningSize) {\n        const { contentColors } = args;\n        const colorContent = isPopulatedArray(contentColors);\n        if (this.isDefault) {\n            if (colorContent)\n                return false; // can always make colored boxes\n            if (isBoolean(tweeningSize))\n                return tweeningSize;\n            return this.isTweeningSize(args); // need mask to dynamically crop content\n        }\n        if (!colorContent)\n            return true; // always need to mask content\n        return this.isTweeningColor(args); //tweeningSize || \n    }\n    visibleCommandFiles(args) {\n        const { isDefault, id } = this;\n        const alpha = this.requiresAlpha(args);\n        const tweeningColor = this.isTweeningColor(args);\n        if (isDefault && !alpha) {\n            // console.log(this.constructor.name, \"commandFiles NONE\", id, isDefault, alpha, tweeningColor)\n            return [];\n        }\n        const { definition } = this;\n        const { path } = definition;\n        const { contentColors: colors = [], containerRects, time, videoRate } = args;\n        assertPopulatedArray(containerRects, 'containerRects');\n        const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n        const [rect, rectEnd] = containerRects;\n        const maxSize = { ...PointZero, ...tweenMaxSize(rect, rectEnd) };\n        const { width: maxWidth, height: maxHeight } = maxSize;\n        let [forecolor] = colors;\n        if (alpha)\n            forecolor = colorWhite;\n        else if (tweeningColor)\n            forecolor = colorBlack;\n        let fill = 'none';\n        if (isDefault)\n            fill = colorWhite;\n        else if (alpha)\n            fill = colorBlack;\n        const intrinsicRect = isDefault ? maxSize : this.intrinsicRect();\n        const { width: inWidth, height: inHeight } = intrinsicRect;\n        const dimensionsString = `width=\"${inWidth}\" height=\"${inHeight}\"`;\n        // console.log(this.constructor.name, \"visibleCommandFiles\", this.definitionId, rect, rectEnd, intrinsicRect)\n        const transformAttribute = svgTransform(intrinsicRect, maxSize);\n        // console.log(this.constructor.name, \"visibleCommandFiles\", rect, rectEnd, transformAttribute)\n        const tags = [];\n        tags.push(`<svg viewBox=\"0 0 ${maxWidth} ${maxHeight}\" xmlns=\"${NamespaceSvg}\">`);\n        tags.push(`<g ${dimensionsString} transform=\"${transformAttribute}\" >`);\n        tags.push(`<rect ${dimensionsString} fill=\"${fill}\"/>`);\n        if (!isDefault)\n            tags.push(`<path d=\"${path}\" fill=\"${forecolor}\"/>`);\n        tags.push(\"</g>\");\n        tags.push(\"</svg>\");\n        const svgTag = tags.join(\"\");\n        const options = {};\n        if (duration) {\n            options.loop = 1;\n            options.framerate = videoRate;\n            options.t = duration;\n            // options.re = ''\n        }\n        const commandFile = {\n            type: GraphFileType.Svg, file: id, content: svgTag,\n            input: true, inputId: id, definition, options\n        };\n        // console.log(this.constructor.name, \"visibleCommandFiles\", commandFile)\n        return [commandFile];\n    }\n}\n\nfunction TweenableDefinitionMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            this.properties.push(propertyInstance({\n                name: \"muted\", type: DataType.Boolean\n            }));\n        }\n    };\n}\n\nconst ShapeContainerDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst ShapeContainerDefinitionWithContainer = ContainerDefinitionMixin(ShapeContainerDefinitionWithTweenable);\nclass ShapeContainerDefinitionClass extends ShapeContainerDefinitionWithContainer {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { path, pathHeight, pathWidth } = object;\n        if (path)\n            this.path = path;\n        if (isAboveZero(pathWidth))\n            this.pathWidth = pathWidth;\n        if (isAboveZero(pathHeight))\n            this.pathHeight = pathHeight;\n    }\n    definitionIcon(loader, size) {\n        const superElement = super.definitionIcon(loader, size);\n        if (superElement)\n            return superElement;\n        const { id, pathHeight: height, pathWidth: width, path } = this;\n        if (id === DefaultContainerId) {\n            return Promise.resolve(svgElement(size, svgPolygonElement(size, '', 'currentColor')));\n        }\n        const inSize = { width, height };\n        if (!(sizeAboveZero(inSize) && isPopulatedString(path)))\n            return;\n        const coverSize = sizeCover(inSize, size, true);\n        const outRect = { ...coverSize, ...centerPoint(size, coverSize) };\n        const pathElement = svgPathElement(path);\n        svgSetTransformRects(pathElement, inSize, outRect);\n        return Promise.resolve(svgElement(size, pathElement));\n    }\n    instanceFromObject(object = {}) {\n        return new ShapeContainerClass(this.instanceArgs(object));\n    }\n    path = \"\";\n    pathHeight = 0;\n    pathWidth = 0;\n    toJSON() {\n        const object = super.toJSON();\n        if (this.path)\n            object.path = this.path;\n        if (isAboveZero(this.pathHeight))\n            object.pathHeight = this.pathHeight;\n        if (isAboveZero(this.pathWidth))\n            object.pathWidth = this.pathWidth;\n        return object;\n    }\n}\n\nconst isTextContainer = (value) => {\n    return isContainer(value) && \"fontId\" in value;\n};\nfunction assertTextContainer(value) {\n    if (!isTextContainer(value))\n        throw new Error(\"expected TextContainer\");\n}\n\nconst TextContainerWithTweenable = TweenableMixin(InstanceBase);\nconst TextContainerWithContainer = ContainerMixin(TextContainerWithTweenable);\nclass TextContainerClass extends TextContainerWithContainer {\n    constructor(...args) {\n        const [object] = args;\n        object.lock ||= '';\n        super(...args);\n        const { intrinsic } = object;\n        if (isRect(intrinsic))\n            this._intrinsicRect = intrinsic;\n    }\n    canColor(args) { return true; }\n    canColorTween(args) { return true; }\n    _colorFilter;\n    get colorFilter() { return this._colorFilter ||= filterFromId('color'); }\n    definitionIds() { return [...super.definitionIds(), this.fontId]; }\n    _font;\n    get font() { return this._font ||= Defined.fromId(this.fontId); }\n    fileUrls(args) { return this.font.fileUrls(args); }\n    hasIntrinsicSizing = true;\n    initialCommandFilters(args, tweening) {\n        const commandFilters = [];\n        const { contentColors: colors = [], outputSize, track, filterInput: input, containerRects, videoRate, commandFiles, duration } = args;\n        let filterInput = input;\n        // console.log(this.constructor.name, \"initialCommandFilters\", filterInput, tweening)\n        if (filterInput) {\n            commandFilters.push(this.copyCommandFilter(filterInput, track));\n        }\n        const [rect, rectEnd] = containerRects;\n        const { height, width } = rect;\n        // console.log(this.constructor.name, \"initialCommandFilters\", merging, ...containerRects)\n        const maxSize = tweenMaxSize(...containerRects);\n        let colorInput = '';\n        const merging = !!filterInput || tweening.size;\n        if (merging) {\n            const backColor = filterInput ? colorBlack : colorBlackTransparent;\n            const colorArgs = {\n                ...args,\n                contentColors: [backColor, backColor],\n                outputSize: maxSize\n            };\n            commandFilters.push(...this.colorBackCommandFilters(colorArgs));\n            colorInput = arrayLast(arrayLast(commandFilters).outputs);\n        }\n        const textFile = commandFiles.find(commandFile => (commandFile.inputId === this.id && commandFile.type === GraphFileType.Txt));\n        assertTrue(textFile, 'text file');\n        const { resolved: textfile } = textFile;\n        assertPopulatedString(textfile, 'textfile');\n        const fontFile = commandFiles.find(commandFile => (commandFile.inputId === this.id && commandFile.type === LoadType.Font));\n        assertTrue(fontFile, 'font file');\n        const { resolved: fontfile } = fontFile;\n        assertPopulatedString(fontfile, 'fontfile');\n        const { textFilter, lock } = this;\n        const intrinsicRect = this.intrinsicRect();\n        const x = intrinsicRect.x * (rect.width / intrinsicRect.width);\n        const y = 0; // intrinsicRect.y * (height / intrinsicRect.height)\n        const [color = colorWhite, colorEnd] = colors;\n        assertPopulatedString(color);\n        const xEnd = intrinsicRect.x * (rectEnd.width / intrinsicRect.width);\n        const yEnd = 0; // intrinsicRect.y * (rectEnd.height / intrinsicRect.height)\n        // console.log(this.constructor.name, \"initialCommandFilters\", lock)\n        const intrinsicRatio = 1000 / intrinsicRect.height;\n        const textSize = Math.round(height * intrinsicRatio);\n        const textSizeEnd = Math.round(rectEnd.height * intrinsicRatio);\n        const options = {\n            x, y, width, height: textSize, color, textfile, fontfile,\n            stretch: !isOrientation(lock),\n            intrinsicHeight: intrinsicRect.height,\n            intrinsicWidth: intrinsicRect.width,\n            [`x${PropertyTweenSuffix}`]: xEnd,\n            [`y${PropertyTweenSuffix}`]: yEnd,\n            [`color${PropertyTweenSuffix}`]: colorEnd,\n            [`height${PropertyTweenSuffix}`]: textSizeEnd,\n            [`width${PropertyTweenSuffix}`]: rectEnd.width,\n        };\n        textFilter.setValues(options);\n        // console.log(this.constructor.name, \"initialCommandFilters\", options)\n        const textArgs = {\n            dimensions: outputSize, videoRate, duration, filterInput\n        };\n        commandFilters.push(...textFilter.commandFilters(textArgs));\n        if (merging) {\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            assertPopulatedString(filterInput, 'overlay filterInput');\n            commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            assertPopulatedString(filterInput, 'crop filterInput');\n            const cropArgs = {\n                duration: 0, videoRate, filterInput\n            };\n            const { cropFilter } = this;\n            cropFilter.setValue(maxSize.width, \"width\");\n            cropFilter.setValue(maxSize.height, \"height\");\n            cropFilter.setValue(0, \"x\");\n            cropFilter.setValue(0, \"y\");\n            commandFilters.push(...cropFilter.commandFilters(cropArgs));\n        }\n        return commandFilters;\n    }\n    _intrinsicRect;\n    intrinsicRect(_ = false) {\n        return this._intrinsicRect ||= this.intrinsicRectInitialize();\n    }\n    intrinsicRectInitialize() {\n        const { family } = this.font;\n        assertPopulatedString(family);\n        const clipString = this.string;\n        const height = 1000;\n        const dimensions = { width: 0, height, ...PointZero };\n        if (!clipString)\n            return dimensions;\n        const rect = stringFamilySizeRect(clipString, family, height);\n        // console.log(this.constructor.name, \"intrinsicRectInitialize\", rect)\n        return rect;\n    }\n    intrinsicsKnown(options) {\n        const { size } = options;\n        if (!size)\n            return true;\n        return isRect(this._intrinsicRect) || !!this.font?.family;\n    }\n    pathElement(rect) {\n        const { string, font } = this;\n        const { family } = font;\n        const svgItem = globalThis.document.createElementNS(NamespaceSvg, 'text');\n        svgItem.setAttribute('font-family', family);\n        svgItem.setAttribute('font-size', String(1000));\n        svgItem.append(string);\n        svgSetTransformRects(svgItem, this.intrinsicRect(true), rect);\n        return svgItem;\n    }\n    setValue(value, name, property) {\n        super.setValue(value, name, property);\n        if (property)\n            return;\n        switch (name) {\n            case 'fontId':\n                delete this._font;\n                delete this._intrinsicRect;\n                break;\n            case 'string':\n                delete this._intrinsicRect;\n                break;\n        }\n    }\n    _textFilter;\n    get textFilter() { return this._textFilter ||= filterFromId('text'); }\n    toJSON() {\n        const json = super.toJSON();\n        json.intrinsic = this.intrinsicRect(true);\n        return json;\n    }\n    visibleCommandFiles(args) {\n        const files = super.visibleCommandFiles(args);\n        const { string } = this;\n        const textGraphFile = {\n            definition: this.font, type: GraphFileType.Txt,\n            file: this.id, content: string, inputId: this.id,\n        };\n        files.push(textGraphFile);\n        return files;\n    }\n}\n\nclass FontClass extends InstanceBase {\n    fileUrls(args) {\n        return this.definition.fileUrls(args);\n    }\n}\n\nclass FontDefinitionClass extends DefinitionBase {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { source, url } = object;\n        const sourceOrUrl = source || url || '';\n        this.source = source || sourceOrUrl;\n        this.url = url || sourceOrUrl;\n    }\n    family = \"\";\n    fileUrls(args) {\n        const { visible, editing } = args;\n        if (!visible)\n            return [];\n        const { url, source } = this;\n        const file = editing ? url : source;\n        const graphFile = {\n            type: LoadType.Font, file, definition: this\n        };\n        return [graphFile];\n    }\n    instanceFromObject(object = {}) {\n        return new FontClass(this.instanceArgs(object));\n    }\n    loadType = LoadType.Font;\n    toJSON() {\n        const json = super.toJSON();\n        const { url, source } = this;\n        json.url = url;\n        json.source = source;\n        return json;\n    }\n    source = '';\n    type = DefinitionType.Font;\n    url = '';\n}\n\nconst label$r = \"Butcherman\";\nconst id$q = \"com.moviemasher.font.butcherman\";\nconst type$q = \"font\";\nconst source$9 = \"https://fonts.googleapis.com/css2?family=Butcherman\";\nvar fontButchermanJson = {\n  label: label$r,\n  id: id$q,\n  type: type$q,\n  source: source$9\n};\n\nconst label$q = \"Croissant One\";\nconst id$p = \"com.moviemasher.font.croissant-one\";\nconst type$p = \"font\";\nconst source$8 = \"https://fonts.googleapis.com/css2?family=Croissant+One\";\nvar fontCroissantOneJson = {\n  label: label$q,\n  id: id$p,\n  type: type$p,\n  source: source$8\n};\n\nconst label$p = \"League Spartan\";\nconst id$o = \"com.moviemasher.font.default\";\nconst type$o = \"font\";\nconst source$7 = \"https://fonts.googleapis.com/css2?family=League+Spartan\";\nvar fontDefaultJson = {\n  label: label$p,\n  id: id$o,\n  type: type$o,\n  source: source$7\n};\n\nconst label$o = \"Germania One\";\nconst id$n = \"com.moviemasher.font.germania-one\";\nconst type$n = \"font\";\nconst source$6 = \"https://fonts.googleapis.com/css2?family=Germania+One\";\nvar fontGermaniaOneJson = {\n  label: label$o,\n  id: id$n,\n  type: type$n,\n  source: source$6\n};\n\nconst label$n = \"Kenia\";\nconst id$m = \"com.moviemasher.font.kenia\";\nconst type$m = \"font\";\nconst source$5 = \"https://fonts.googleapis.com/css2?family=Kenia\";\nvar fontKeniaJson = {\n  label: label$n,\n  id: id$m,\n  type: type$m,\n  source: source$5\n};\n\nconst label$m = \"Luckiest Guy\";\nconst id$l = \"com.moviemasher.font.luckiest-guy\";\nconst type$l = \"font\";\nconst source$4 = \"https://fonts.googleapis.com/css2?family=Luckiest+Guy\";\nvar fontLuckiestGuyJson = {\n  label: label$m,\n  id: id$l,\n  type: type$l,\n  source: source$4\n};\n\nconst label$l = \"Monoton\";\nconst id$k = \"com.moviemasher.font.monoton\";\nconst type$k = \"font\";\nconst source$3 = \"https://fonts.googleapis.com/css2?family=Monoton\";\nvar fontMonotonJson = {\n  label: label$l,\n  id: id$k,\n  type: type$k,\n  source: source$3\n};\n\nconst label$k = \"Oleo Script\";\nconst id$j = \"com.moviemasher.font.oleo-script\";\nconst type$j = \"font\";\nconst source$2 = \"https://fonts.googleapis.com/css2?family=Oleo+Script\";\nvar fontOleoScriptJson = {\n  label: label$k,\n  id: id$j,\n  type: type$j,\n  source: source$2\n};\n\nconst label$j = \"Shojumaru\";\nconst id$i = \"com.moviemasher.font.shojumaru\";\nconst type$i = \"font\";\nconst source$1 = \"https://fonts.googleapis.com/css2?family=Shojumaru\";\nvar fontShojumaruJson = {\n  label: label$j,\n  id: id$i,\n  type: type$i,\n  source: source$1\n};\n\nconst label$i = \"Rubik+Dirt\";\nconst id$h = \"com.moviemasher.font.rubik-dirt\";\nconst type$h = \"font\";\nconst source = \"https://fonts.googleapis.com/css2?family=Rubik+Dirt\";\nvar fontRubikDirtJson = {\n  label: label$i,\n  id: id$h,\n  type: type$h,\n  source: source\n};\n\nconst fontDefaultId = fontDefaultJson.id;\nconst fontDefinition = (object) => {\n    const { id: idString } = object;\n    const id = idString && isPopulatedString(idString) ? idString : fontDefaultId;\n    return new FontDefinitionClass({ ...object, type: DefinitionType.Font, id });\n};\nconst fontDefault = fontDefinition(fontDefaultJson);\nconst fontDefaults = [\n    fontDefault,\n    fontDefinition(fontButchermanJson),\n    fontDefinition(fontCroissantOneJson),\n    fontDefinition(fontKeniaJson),\n    fontDefinition(fontGermaniaOneJson),\n    fontDefinition(fontLuckiestGuyJson),\n    fontDefinition(fontMonotonJson),\n    fontDefinition(fontOleoScriptJson),\n    fontDefinition(fontShojumaruJson),\n    fontDefinition(fontRubikDirtJson),\n];\nconst fontDefinitionFromId = (id) => {\n    const definition = fontDefaults.find(definition => definition.id === id);\n    if (definition)\n        return definition;\n    return fontDefinition({ id });\n};\nconst fontInstance = (object) => {\n    const { definitionId = '' } = object;\n    const definition = fontDefinitionFromId(definitionId);\n    return definition.instanceFromObject(object);\n};\nconst fontFromId = (definitionId) => {\n    const definition = fontDefinitionFromId(definitionId);\n    return definition.instanceFromObject();\n};\nFactories[DefinitionType.Font] = {\n    definition: fontDefinition,\n    definitionFromId: fontDefinitionFromId,\n    fromId: fontFromId,\n    instance: fontInstance,\n    defaults: fontDefaults,\n};\n\nconst TextContainerDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst TextContainerDefinitionWithContainer = ContainerDefinitionMixin(TextContainerDefinitionWithTweenable);\nconst TextContainerDefinitionIcon = 'M2.5 4v3h5v12h3V7h5V4h-13zm19 5h-9v3h3v7h3v-7h3V9z';\nclass TextContainerDefinitionClass extends TextContainerDefinitionWithContainer {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            name: 'string', custom: true, type: DataType.String, defaultValue: 'Text'\n        }));\n        this.properties.push(propertyInstance({\n            name: 'fontId', custom: true, type: DataType.FontId,\n            defaultValue: fontDefault.id\n        }));\n        this.properties.push(propertyInstance({\n            name: 'height', tweenable: true, custom: true, type: DataType.Percent,\n            defaultValue: 0.3, max: 2.0, group: DataGroup.Size\n        }));\n        this.properties.push(propertyInstance({\n            name: 'width', tweenable: true, custom: true, type: DataType.Percent,\n            defaultValue: 0.8, max: 2.0, group: DataGroup.Size\n        }));\n    }\n    definitionIcon(loader, size) {\n        const superElement = super.definitionIcon(loader, size);\n        if (superElement)\n            return superElement;\n        const inSize = { width: 24, height: 24 };\n        const coverSize = sizeCover(inSize, size, true);\n        const outRect = { ...coverSize, ...centerPoint(size, coverSize) };\n        const pathElement = svgPathElement(TextContainerDefinitionIcon);\n        svgSetTransformRects(pathElement, inSize, outRect);\n        return Promise.resolve(svgElement(size, pathElement));\n    }\n    instanceArgs(object) {\n        const textObject = object || {};\n        if (isUndefined(textObject.lock))\n            textObject.lock = Orientation.V;\n        return super.instanceArgs(textObject);\n    }\n    instanceFromObject(object = {}) {\n        return new TextContainerClass(this.instanceArgs(object));\n    }\n}\n\nconst label$h = \"Rectangle\";\nconst type$g = \"container\";\nvar defaultContainer = {\n  label: label$h,\n  type: type$g\n};\n\nconst label$g = \"Heart: Remix Icons\";\nconst type$f = \"container\";\nconst id$g = \"com.remixicon.container.heart\";\nconst pathWidth$7 = 24;\nconst pathHeight$7 = 24;\nconst path$7 = \"M16.5 3C19.538 3 22 5.5 22 9c0 7-7.5 11-10 12.5C9.5 20 2 16 2 9c0-3.5 2.5-6 5.5-6C9.36 3 11 4 12 5c1-1 2.64-2 4.5-2z\";\nvar heartContainer = {\n  label: label$g,\n  type: type$f,\n  id: id$g,\n  pathWidth: pathWidth$7,\n  pathHeight: pathHeight$7,\n  path: path$7\n};\n\nconst label$f = \"Cloud: Ant Design\";\nconst id$f = \"design.ant.container.cloud\";\nconst pathWidth$6 = 1024;\nconst pathHeight$6 = 1024;\nconst path$6 = \"M811.4 418.7C765.6 297.9 648.9 212 512.2 212S258.8 297.8 213 418.6C127.3 441.1 64 519.1 64 612c0 110.5 89.5 200 199.9 200h496.2C870.5 812 960 722.5 960 612c0-92.7-63.1-170.7-148.6-193.3z\";\nvar cloudContainer = {\n  label: label$f,\n  id: id$f,\n  pathWidth: pathWidth$6,\n  pathHeight: pathHeight$6,\n  path: path$6\n};\n\nconst label$e = \"Apple: Dev Icons\";\nconst type$e = \"container\";\nconst id$e = \"devicons.container.apple\";\nconst pathWidth$5 = 32;\nconst pathHeight$5 = 32;\nconst path$5 = \"M23.023 17.093c-0.033-3.259 2.657-4.822 2.777-4.901-1.512-2.211-3.867-2.514-4.705-2.548-2.002-0.204-3.91 1.18-4.926 1.18-1.014 0-2.583-1.15-4.244-1.121-2.185 0.033-4.199 1.271-5.323 3.227-2.269 3.936-0.58 9.769 1.631 12.963 1.081 1.561 2.37 3.318 4.061 3.254 1.63-0.064 2.245-1.055 4.215-1.055s2.524 1.055 4.248 1.021c1.753-0.032 2.864-1.591 3.936-3.159 1.24-1.814 1.751-3.57 1.782-3.659-0.038-0.017-3.416-1.312-3.451-5.202zM19.783 7.53c0.897-1.089 1.504-2.602 1.34-4.108-1.294 0.053-2.861 0.86-3.79 1.948-0.832 0.965-1.561 2.502-1.365 3.981 1.444 0.112 2.916-0.734 3.816-1.821z\";\nvar appleContainer = {\n  label: label$e,\n  type: type$e,\n  id: id$e,\n  pathWidth: pathWidth$5,\n  pathHeight: pathHeight$5,\n  path: path$5\n};\n\nconst label$d = \"Starburst: Typicons\";\nconst type$d = \"container\";\nconst id$d = \"com.s-ings.container.starburst\";\nconst pathWidth$4 = 24;\nconst pathHeight$4 = 24;\nconst path$4 = \"M19.064 10.109l1.179-2.387c.074-.149.068-.327-.015-.471-.083-.145-.234-.238-.401-.249l-2.656-.172-.172-2.656c-.011-.167-.104-.317-.249-.401-.145-.084-.322-.09-.472-.015l-2.385 1.18-1.477-2.215c-.186-.278-.646-.278-.832 0l-1.477 2.215-2.385-1.18c-.151-.075-.327-.069-.472.015-.145.083-.238.234-.249.401l-.171 2.656-2.657.171c-.167.011-.318.104-.401.249-.084.145-.089.322-.015.472l1.179 2.386-2.214 1.477c-.139.093-.223.249-.223.416s.083.323.223.416l2.215 1.477-1.18 2.386c-.074.15-.068.327.015.472.083.144.234.238.401.248l2.656.171.171 2.657c.011.167.104.317.249.401.144.083.32.088.472.015l2.386-1.179 1.477 2.214c.093.139.249.223.416.223s.323-.083.416-.223l1.477-2.214 2.386 1.179c.15.073.327.068.472-.015s.238-.234.249-.401l.171-2.656 2.656-.172c.167-.011.317-.104.401-.249.083-.145.089-.322.015-.472l-1.179-2.385 2.214-1.478c.139-.093.223-.249.223-.416s-.083-.323-.223-.416l-2.214-1.475z\";\nvar starburstContainer = {\n  label: label$d,\n  type: type$d,\n  id: id$d,\n  pathWidth: pathWidth$4,\n  pathHeight: pathHeight$4,\n  path: path$4\n};\n\nconst label$c = \"Rounded Rect\";\nconst type$c = \"container\";\nconst id$c = \"com.moviemasher.container.rounded-rect\";\nconst pathWidth$3 = 1920;\nconst pathHeight$3 = 1080;\nconst path$3 = \"M 358.00 980.00 C 215.51 980.00 100.00 864.49 100.00 722.00 L 100.00 358.00 C 100.00 215.51 215.51 100.00 358.00 100.00 L 1562.00 100.00 C 1704.49 100.00 1820.00 215.51 1820.00 358.00 L 1820.00 722.00 C 1820.00 864.49 1704.49 980.00 1562.00 980.00 Z M 358.00 980.00\";\nvar roundedRectContainer = {\n  label: label$c,\n  type: type$c,\n  id: id$c,\n  pathWidth: pathWidth$3,\n  pathHeight: pathHeight$3,\n  path: path$3\n};\n\nconst label$b = \"Text\";\nconst type$b = \"text\";\nconst id$b = \"com.moviemasher.container.text\";\nconst fontId = \"com.moviemasher.font.default\";\nvar textContainer = {\n  label: label$b,\n  type: type$b,\n  id: id$b,\n  fontId: fontId\n};\n\nconst label$a = \"Fire: Ant Design\";\nconst type$a = \"container\";\nconst id$a = \"design.ant.container.fire\";\nconst pathWidth$2 = 1024;\nconst pathHeight$2 = 1024;\nconst path$2 = \"M834.1 469.2A347.49 347.49 0 0 0 751.2 354l-29.1-26.7a8.09 8.09 0 0 0-13 3.3l-13 37.3c-8.1 23.4-23 47.3-44.1 70.8-1.4 1.5-3 1.9-4.1 2-1.1.1-2.8-.1-4.3-1.5-1.4-1.2-2.1-3-2-4.8 3.7-60.2-14.3-128.1-53.7-202C555.3 171 510 123.1 453.4 89.7l-41.3-24.3c-5.4-3.2-12.3 1-12 7.3l2.2 48c1.5 32.8-2.3 61.8-11.3 85.9-11 29.5-26.8 56.9-47 81.5a295.64 295.64 0 0 1-47.5 46.1 352.6 352.6 0 0 0-100.3 121.5A347.75 347.75 0 0 0 160 610c0 47.2 9.3 92.9 27.7 136a349.4 349.4 0 0 0 75.5 110.9c32.4 32 70 57.2 111.9 74.7C418.5 949.8 464.5 959 512 959s93.5-9.2 136.9-27.3A348.6 348.6 0 0 0 760.8 857c32.4-32 57.8-69.4 75.5-110.9a344.2 344.2 0 0 0 27.7-136c0-48.8-10-96.2-29.9-140.9z\";\nvar fireContainer = {\n  label: label$a,\n  type: type$a,\n  id: id$a,\n  pathWidth: pathWidth$2,\n  pathHeight: pathHeight$2,\n  path: path$2\n};\n\nconst label$9 = \"Flag: Ant Design\";\nconst type$9 = \"container\";\nconst id$9 = \"design.ant.container.flag\";\nconst pathWidth$1 = 1024;\nconst pathHeight$1 = 1024;\nconst path$1 = \"M880 305H624V192c0-17.7-14.3-32-32-32H184v-40c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v784c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V640h248v113c0 17.7 14.3 32 32 32h416c17.7 0 32-14.3 32-32V337c0-17.7-14.3-32-32-32z\";\nvar flagContainer = {\n  label: label$9,\n  type: type$9,\n  id: id$9,\n  pathWidth: pathWidth$1,\n  pathHeight: pathHeight$1,\n  path: path$1\n};\n\nconst label$8 = \"Oval\";\nconst type$8 = \"container\";\nconst id$8 = \"com.moviemasher.container.oval\";\nconst pathWidth = 24;\nconst pathHeight = 24;\nconst path = \"M0,12 a12,12 0 1,0 24,0 a12,12 0 1,0 -24,0\";\nvar ovalContainer = {\n  label: label$8,\n  type: type$8,\n  id: id$8,\n  pathWidth: pathWidth,\n  pathHeight: pathHeight,\n  path: path\n};\n\nconst containerDefaults = [\n    new TextContainerDefinitionClass(textContainer),\n    new ShapeContainerDefinitionClass({ id: DefaultContainerId, ...defaultContainer }),\n    new ShapeContainerDefinitionClass(roundedRectContainer),\n    new ShapeContainerDefinitionClass(ovalContainer),\n    new ShapeContainerDefinitionClass(starburstContainer),\n    new ShapeContainerDefinitionClass(heartContainer),\n    new ShapeContainerDefinitionClass(cloudContainer),\n    new ShapeContainerDefinitionClass(fireContainer),\n    new ShapeContainerDefinitionClass(flagContainer),\n    new ShapeContainerDefinitionClass(appleContainer),\n];\nconst containerDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id, 'containerDefinition id');\n    // console.log(\"containerDefinition\", id, object, containerDefaults)\n    return new ShapeContainerDefinitionClass({ ...object, type: DefinitionType.Container });\n};\nconst containerDefinitionFromId = (id) => {\n    const definition = containerDefaults.find(definition => definition.id === id);\n    if (definition)\n        return definition;\n    return containerDefinition({ id });\n};\nconst containerInstance = (object) => {\n    const { definitionId } = object;\n    if (!definitionId)\n        throw Errors.id;\n    const definition = containerDefinitionFromId(definitionId);\n    const instance = definition.instanceFromObject(object);\n    return instance;\n};\nconst containerFromId = (id) => {\n    const definition = containerDefinitionFromId(id);\n    const instance = definition.instanceFromObject({ definitionId: id });\n    return instance;\n};\nFactories[DefinitionType.Container] = {\n    definition: containerDefinition,\n    definitionFromId: containerDefinitionFromId,\n    fromId: containerFromId,\n    instance: containerInstance,\n    defaults: containerDefaults,\n};\n\nfunction ContentDefinitionMixin(Base) {\n    return class extends Base {\n        type = DefinitionType.Content;\n    };\n}\n\nfunction ModularMixin(Base) {\n    return class extends Base {\n        commandFilters(args) {\n            const commandFilters = [];\n            const { videoRate, filterInput, time } = args;\n            assertPopulatedString(filterInput);\n            const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n            const { filters } = this.definition;\n            const filterArgs = {\n                videoRate, duration, filterInput\n            };\n            commandFilters.push(...filters.flatMap(filter => {\n                this.setFilterValues(filter);\n                const filters = filter.commandFilters(filterArgs);\n                if (filters.length) {\n                    filterArgs.filterInput = arrayLast(arrayLast(filters).outputs);\n                }\n                return filters;\n            }));\n            return commandFilters;\n        }\n        setFilterValues(filter) {\n            const filterNames = filter.properties.map(property => property.name);\n            const propertyNames = this.properties.map(property => property.name);\n            const shared = propertyNames.filter(name => filterNames.includes(name));\n            shared.forEach(name => {\n                const property = this.properties.find(property => property.name === name);\n                assertProperty(property);\n                const { tweenable } = property;\n                filter.setValue(this.value(name), name);\n                if (tweenable) {\n                    const tweenName = `${name}${PropertyTweenSuffix}`;\n                    filter.setValue(this.value(tweenName), tweenName);\n                }\n            });\n        }\n        svgFilters(previewSize, containerRect, time, range) {\n            const svgFilters = [];\n            const { filters } = this.definition;\n            svgFilters.push(...filters.flatMap(filter => {\n                this.setFilterValues(filter);\n                return filter.filterSvgFilter();\n            }));\n            // console.log(this.constructor.name, \"svgFilters\", svgFilters.length)\n            return svgFilters;\n        }\n    };\n}\n\nconst EffectWithModular = ModularMixin(InstanceBase);\nclass EffectClass extends EffectWithModular {\n    _tweenable;\n    get tweenable() { return this._tweenable; }\n    set tweenable(value) { this._tweenable = value; }\n    selectables() { return [this, ...this.tweenable.selectables()]; }\n    selectType = SelectType.None;\n    selectedItems(actions) {\n        return this.properties.map(property => {\n            const undoValue = this.value(property.name);\n            const target = this;\n            return {\n                value: undoValue,\n                selectType: SelectType.None, property,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    const options = { target, property, redoValue, undoValue };\n                    actions.create(options);\n                }\n            };\n        });\n    }\n}\n\nfunction ModularDefinitionMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { properties, filters, initializeFilter, finalizeFilter } = object;\n            if (properties?.length)\n                this.properties.push(...properties.map(property => propertyInstance({ ...property, custom: true })));\n            if (initializeFilter)\n                this.initializeFilter = filterInstance(initializeFilter);\n            if (finalizeFilter)\n                this.finalizeFilter = filterInstance(finalizeFilter);\n            if (filters)\n                this.filters.push(...filters.map(filter => filterInstance(filter)));\n        }\n        filters = [];\n        finalizeFilter;\n        initializeFilter;\n        toJSON() {\n            const object = super.toJSON();\n            const custom = this.properties.filter(property => property.custom);\n            if (custom.length)\n                object.properties = custom;\n            if (this.filters.length)\n                object.filters = this.filters;\n            return object;\n        }\n    };\n}\n\nconst EffectDefinitionWithModular = ModularDefinitionMixin(DefinitionBase);\nclass EffectDefinitionClass extends EffectDefinitionWithModular {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({ name: \"label\", defaultValue: \"\" }));\n    }\n    instanceArgs(object) {\n        const args = super.instanceArgs(object);\n        args.label ||= this.label;\n        return args;\n    }\n    instanceFromObject(object = {}) {\n        return new EffectClass(this.instanceArgs(object));\n    }\n    type = DefinitionType.Effect;\n}\n\nconst label$7 = \"Blur\";\nconst type$7 = \"effect\";\nconst id$7 = \"com.moviemasher.effect.blur\";\nconst filters$5 = [\n  {\n    id: \"com.moviemasher.filter.convolution\",\n    parameters: [\n      {\n        name: \"matrix\",\n        value: \"1,1,1,1,1,1,1,1,1\"\n      },\n      {\n        name: \"multiplier\",\n        value: \"0.11\"\n      }\n    ]\n  }\n];\nvar effectBlurJson = {\n  label: label$7,\n  type: type$7,\n  id: id$7,\n  filters: filters$5\n};\n\nconst label$6 = \"Chromakey\";\nconst type$6 = \"effect\";\nconst id$6 = \"com.moviemasher.effect.chromakey\";\nconst properties$2 = [\n  {\n    name: \"blend\",\n    defaultValue: 0,\n    step: 0.01,\n    min: 0,\n    max: 1\n  },\n  {\n    name: \"similarity\",\n    defaultValue: 0.9,\n    step: 0.01,\n    min: 0,\n    max: 1\n  },\n  {\n    name: \"color\",\n    type: \"rgb\",\n    defaultValue: \"#00FF00\"\n  }\n];\nconst filters$4 = [\n  {\n    id: \"com.moviemasher.filter.chromakey\",\n    parameters: [\n      {\n        name: \"color\",\n        value: \"color\",\n        dataType: \"string\"\n      },\n      {\n        name: \"blend\",\n        value: \"blend\",\n        dataType: \"string\"\n      },\n      {\n        name: \"similarity\",\n        value: \"similarity\",\n        dataType: \"string\"\n      }\n    ]\n  }\n];\nvar effectChromaKeyJson = {\n  label: label$6,\n  type: type$6,\n  id: id$6,\n  properties: properties$2,\n  filters: filters$4\n};\n\nconst label$5 = \"Emboss\";\nconst type$5 = \"effect\";\nconst id$5 = \"com.moviemasher.effect.emboss\";\nconst properties$1 = [\n];\nconst filters$3 = [\n  {\n    id: \"com.moviemasher.filter.convolution\",\n    parameters: [\n      {\n        name: \"matrix\",\n        value: \"-2,-1,0,-1,1,1,0,1,2\"\n      }\n    ]\n  }\n];\nvar effectEmbossJson = {\n  label: label$5,\n  type: type$5,\n  id: id$5,\n  properties: properties$1,\n  filters: filters$3\n};\n\nconst label$4 = \"Grayscale\";\nconst type$4 = \"effect\";\nconst id$4 = \"com.moviemasher.effect.grayscale\";\nconst filters$2 = [\n  {\n    id: \"com.moviemasher.filter.colorchannelmixer\",\n    parameters: [\n      {\n        name: \"rr\",\n        value: 0.3\n      },\n      {\n        name: \"rg\",\n        value: 0.4\n      },\n      {\n        name: \"rb\",\n        value: 0.3\n      },\n      {\n        name: \"ra\",\n        value: 0\n      },\n      {\n        name: \"gr\",\n        value: 0.3\n      },\n      {\n        name: \"gg\",\n        value: 0.4\n      },\n      {\n        name: \"gb\",\n        value: 0.3\n      },\n      {\n        name: \"ga\",\n        value: 0\n      },\n      {\n        name: \"br\",\n        value: 0.3\n      },\n      {\n        name: \"bg\",\n        value: 0.4\n      },\n      {\n        name: \"bb\",\n        value: 0.3\n      },\n      {\n        name: \"ba\",\n        value: 0\n      },\n      {\n        name: \"ar\",\n        value: 0\n      },\n      {\n        name: \"ag\",\n        value: 0\n      },\n      {\n        name: \"ab\",\n        value: 0\n      },\n      {\n        name: \"aa\",\n        value: 1\n      }\n    ]\n  }\n];\nvar effectGrayscaleJson = {\n  label: label$4,\n  type: type$4,\n  id: id$4,\n  filters: filters$2\n};\n\nconst label$3 = \"Sepia\";\nconst type$3 = \"effect\";\nconst id$3 = \"com.moviemasher.effect.sepia\";\nconst filters$1 = [\n  {\n    id: \"com.moviemasher.filter.colorchannelmixer\",\n    parameters: [\n      {\n        name: \"rr\",\n        value: 0.393\n      },\n      {\n        name: \"rg\",\n        value: 0.769\n      },\n      {\n        name: \"rb\",\n        value: 0.189\n      },\n      {\n        name: \"gr\",\n        value: 0.349\n      },\n      {\n        name: \"gg\",\n        value: 0.686\n      },\n      {\n        name: \"gb\",\n        value: 0.168\n      },\n      {\n        name: \"br\",\n        value: 0.272\n      },\n      {\n        name: \"bg\",\n        value: 0.534\n      },\n      {\n        name: \"bb\",\n        value: 0.131\n      }\n    ]\n  }\n];\nvar effectSepiaJson = {\n  label: label$3,\n  type: type$3,\n  id: id$3,\n  filters: filters$1\n};\n\nconst label$2 = \"Sharpen\";\nconst type$2 = \"effect\";\nconst id$2 = \"com.moviemasher.effect.sharpen\";\nconst properties = [\n];\nconst filters = [\n  {\n    id: \"com.moviemasher.filter.convolution\",\n    parameters: [\n      {\n        name: \"matrix\",\n        value: \"0,-1,0,-1,5,-1,0,-1,0\"\n      }\n    ]\n  }\n];\nvar effectSharpenJson = {\n  label: label$2,\n  type: type$2,\n  id: id$2,\n  properties: properties,\n  filters: filters\n};\n\n// import effectTextJson from \"../../Definitions/DefinitionObjects/effect/text.json\"\nconst effectDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id);\n    return new EffectDefinitionClass({ ...object, type: DefinitionType.Effect });\n};\nconst effectDefaults = [\n    effectDefinition(effectBlurJson),\n    effectDefinition(effectChromaKeyJson),\n    effectDefinition(effectEmbossJson),\n    effectDefinition(effectGrayscaleJson),\n    effectDefinition(effectSepiaJson),\n    effectDefinition(effectSharpenJson),\n    // effectDefinition(effectTextJson),\n];\nconst effectDefinitionFromId = (id) => {\n    const definition = effectDefaults.find(definition => definition.id === id);\n    if (definition)\n        return definition;\n    return effectDefinition({ id });\n};\nconst effectInstance = (object) => {\n    const { definitionId = '' } = object;\n    // console.log(\"effectInstance\", definitionId, object)\n    const definition = effectDefinitionFromId(definitionId);\n    return definition.instanceFromObject(object);\n};\nconst effectFromId = (definitionId) => {\n    const definition = effectDefinitionFromId(definitionId);\n    return definition.instanceFromObject();\n};\nFactories[DefinitionType.Effect] = {\n    definition: effectDefinition,\n    definitionFromId: effectDefinitionFromId,\n    fromId: effectFromId,\n    instance: effectInstance,\n    defaults: effectDefaults,\n};\n\nconst isAudio = (value) => {\n    return isContent(value) && isAudioDefinition(value.definition);\n};\nconst isAudioDefinition = (value) => {\n    return isDefinition(value) && value.type === DefinitionType.Audio;\n};\n\nfunction ContentMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { isDefaultOrAudio, container } = this;\n            if (!(isDefaultOrAudio || container)) {\n                this.addProperties(object, propertyInstance({\n                    name: 'x', type: DataType.Percent, defaultValue: 0.5,\n                    group: DataGroup.Point, tweenable: true,\n                }));\n                this.addProperties(object, propertyInstance({\n                    name: 'y', type: DataType.Percent, defaultValue: 0.5,\n                    group: DataGroup.Point, tweenable: true,\n                }));\n                this.addProperties(object, propertyInstance({\n                    name: 'lock', type: DataType.String, defaultValue: Orientation.H,\n                    group: DataGroup.Size,\n                }));\n            }\n            const { effects } = object;\n            if (effects)\n                this.effects.push(...effects.map(effectObject => {\n                    const instance = effectInstance(effectObject);\n                    instance.tweenable = this;\n                    return instance;\n                }));\n        }\n        audibleCommandFiles(args) {\n            const graphFileArgs = {\n                ...args, audible: true, visible: false\n            };\n            return this.fileCommandFiles(graphFileArgs);\n        }\n        audibleCommandFilters(args) {\n            const commandFilters = [];\n            const { time, quantize, commandFiles, clipTime } = args;\n            // console.log(this.constructor.name, \"initialCommandFilters\", time, clipTime)\n            const timeDuration = time.isRange ? time.lengthSeconds : 0;\n            const duration = timeDuration ? Math.min(timeDuration, clipTime.lengthSeconds) : 0;\n            const { id } = this;\n            // console.log(this.constructor.name, \"audibleCommandFilters calling commandFilesInput\", id)\n            let filterInput = commandFilesInput(commandFiles, id, false);\n            const trimFilter = 'atrim';\n            const trimId = idGenerate(trimFilter);\n            const trimOptions = {};\n            const { frame } = this.definitionTime(time, clipTime);\n            if (duration)\n                trimOptions.duration = duration;\n            if (frame)\n                trimOptions.start = timeFromArgs(frame, quantize).seconds;\n            const commandFilter = {\n                inputs: [filterInput],\n                ffmpegFilter: trimFilter,\n                options: trimOptions,\n                outputs: [trimId]\n            };\n            commandFilters.push(commandFilter);\n            filterInput = trimId;\n            const delays = (clipTime.seconds - time.seconds) * 1000;\n            if (delays) {\n                const adelayFilter = 'adelay';\n                const adelayId = idGenerate(adelayFilter);\n                const adelayCommandFilter = {\n                    ffmpegFilter: adelayFilter,\n                    options: { delays, all: 1 },\n                    inputs: [filterInput], outputs: [adelayId]\n                };\n                commandFilters.push(adelayCommandFilter);\n                filterInput = adelayId;\n            }\n            commandFilters.push(...this.amixCommandFilters({ ...args, filterInput }));\n            return commandFilters;\n        }\n        contentCommandFilters(args, tweening) {\n            // console.log(this.constructor.name, \"contentCommandFilters returning empty\")\n            return this.effectsCommandFilters(args);\n        }\n        contentPreviewItemPromise(containerRect, time, timeRange, icon) {\n            return this.itemPromise(containerRect, time, timeRange, icon);\n        }\n        contentRects(args) {\n            const { containerRects: rects, time, timeRange, loading, editing } = args;\n            const tuple = isArray(rects) ? rects : [rects, rects];\n            if (loading && !this.intrinsicsKnown({ editing, size: true })) {\n                return tuple;\n            }\n            const intrinsicRect = this.intrinsicRect(editing);\n            if (!sizeAboveZero(intrinsicRect))\n                return tuple;\n            const { lock } = this;\n            const tweenRects = this.tweenRects(time, timeRange);\n            const locked = tweenRectsLock(tweenRects, lock);\n            const coverSizes = tweenCoverSizes(intrinsicRect, rects, locked);\n            const [size, sizeEnd] = coverSizes;\n            const coverPoints = tweenCoverPoints(coverSizes, rects, locked);\n            const [point, pointEnd] = coverPoints;\n            const rect = rectFromSize(size, point);\n            const rectEnd = rectFromSize(sizeEnd, pointEnd);\n            // console.log(this.constructor.name, \"contentRects\", lock, locked, isArray(rects) ? rects[0] : rects,  \"->\", rect)\n            return [rect, rectEnd];\n        }\n        contentSvgFilter(contentItem, outputSize, containerRect, time, clipTime) {\n            const { effects, isDefaultOrAudio } = this;\n            if (isDefaultOrAudio || !effects.length)\n                return;\n            const svgFilters = this.effects.flatMap(effect => effect.svgFilters(outputSize, containerRect, time, clipTime));\n            // const size = sizeCopy(this.contentRect(containerRect, time, clipTime))\n            const filter = svgFilterElement(svgFilters, contentItem);\n            svgSet(filter, '200%', 'width');\n            svgSet(filter, '200%', 'height');\n            return filter;\n        }\n        definitionIds() {\n            return [\n                ...super.definitionIds(),\n                ...this.effects.flatMap(effect => effect.definitionIds()),\n            ];\n        }\n        effectsCommandFilters(args) {\n            const commandFilters = [];\n            const { filterInput: input } = args;\n            let filterInput = input;\n            assertPopulatedString(filterInput);\n            const { effects, isDefaultOrAudio } = this;\n            if (isDefaultOrAudio)\n                return commandFilters;\n            commandFilters.push(...effects.flatMap(effect => {\n                const filters = effect.commandFilters({ ...args, filterInput });\n                if (filters.length)\n                    filterInput = arrayLast(arrayLast(filters).outputs);\n                return filters;\n            }));\n            return commandFilters;\n        }\n        effects = [];\n        intrinsicRect(_ = false) { return RectZero; }\n        get isDefault() {\n            return this.definitionId === \"com.moviemasher.content.default\";\n        }\n        get isDefaultOrAudio() {\n            return this.isDefault || isAudio(this);\n        }\n        itemPromise(containerRect, time, range, icon) {\n            throw new Error(Errors.unimplemented);\n        }\n        selectedItems(actions) {\n            const selectedItems = super.selectedItems(actions);\n            if (this.isDefaultOrAudio || this.container)\n                return selectedItems;\n            // add effects \n            const { effects, selectType } = this;\n            const undoEffects = [...effects];\n            const effectable = this;\n            const selectedEffects = {\n                selectType,\n                value: this.effects,\n                removeHandler: (effect) => {\n                    const options = {\n                        redoSelection: { ...actions.selection, effect: undefined },\n                        effects,\n                        undoEffects,\n                        redoEffects: effects.filter(other => other !== effect),\n                        type: ActionType.MoveEffect\n                    };\n                    actions.create(options);\n                },\n                moveHandler: (effect, index = 0) => {\n                    assertPositive(index, 'index');\n                    const redoEffects = undoEffects.filter(e => e !== effect);\n                    const currentIndex = undoEffects.indexOf(effect);\n                    const insertIndex = currentIndex < index ? index - 1 : index;\n                    redoEffects.splice(insertIndex, 0, effect);\n                    const options = {\n                        effects, undoEffects, redoEffects, type: ActionType.MoveEffect,\n                        effectable\n                    };\n                    actions.create(options);\n                },\n                addHandler: (effect, insertIndex = 0) => {\n                    assertPositive(insertIndex, 'index');\n                    const redoEffects = [...effects];\n                    redoEffects.splice(insertIndex, 0, effect);\n                    effect.tweenable = this;\n                    const options = {\n                        effects,\n                        undoEffects,\n                        redoEffects,\n                        redoSelection: { ...actions.selection, effect },\n                        type: ActionType.MoveEffect\n                    };\n                    actions.create(options);\n                },\n            };\n            selectedItems.push(selectedEffects);\n            return selectedItems;\n        }\n        selectedProperty(property) {\n            const { name } = property;\n            switch (name) {\n                case 'effects': // return !(this.container || this.isDefaultOrAudio)\n                case 'lock': //return this.container && !isAudio(this)\n                case 'width':\n                case 'height':\n                case 'x':\n                case 'y': return !(this.isDefaultOrAudio);\n            }\n            return super.selectedProperty(property);\n        }\n        toJSON() {\n            const json = super.toJSON();\n            json.effects = this.effects;\n            return json;\n        }\n    };\n}\n\nconst isColorContent = (value) => {\n    return isContent(value) && \"color\" in value;\n};\n\nconst ColorContentWithTweenable = TweenableMixin(InstanceBase);\nconst ColorContentWithContent = ContentMixin(ColorContentWithTweenable);\nclass ColorContentClass extends ColorContentWithContent {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        this.addProperties(object, propertyInstance({\n            tweenable: true, name: 'color', type: DataType.Rgb,\n            defaultValue: this.definition.color, group: DataGroup.Color\n        }));\n    }\n    _colorFilter;\n    get colorFilter() { return this._colorFilter ||= filterFromId('color'); }\n    contentColors(time, range) {\n        const [color, colorEndOrNot] = this.tweenValues('color', time, range);\n        assertPopulatedString(color);\n        const colorEnd = isPopulatedString(colorEndOrNot) ? colorEndOrNot : color;\n        return [color, colorEnd];\n    }\n    contentPreviewItemPromise(containerRect, time, range, icon) {\n        const { colorFilter } = this;\n        const [color] = this.tweenValues('color', time, range);\n        const { x, y, width, height } = containerRect;\n        colorFilter.setValues({ width, height, color });\n        const svg = colorFilter.filterSvg();\n        svg.setAttribute('x', String(x));\n        svg.setAttribute('y', String(y));\n        return Promise.resolve(svg);\n    }\n}\n\nconst ColorContentDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst ColorContentDefinitionWithContent = ContentDefinitionMixin(ColorContentDefinitionWithTweenable);\nclass ColorContentDefinitionClass extends ColorContentDefinitionWithContent {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { color } = object;\n        if (isPopulatedString(color))\n            this.color = color;\n    }\n    color = colorBlack;\n    instanceFromObject(object = {}) {\n        return new ColorContentClass(this.instanceArgs(object));\n    }\n}\n\nconst label$1 = \"Color\";\nconst type$1 = \"content\";\nconst id$1 = \"com.moviemasher.content.default\";\nconst color = \"#FFFFFF\";\nvar defaultContent = {\n  label: label$1,\n  type: type$1,\n  id: id$1,\n  color: color\n};\n\nconst contentDefaults = [\n    new ColorContentDefinitionClass({ ...defaultContent, id: DefaultContentId })\n];\nconst contentDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id, 'contentDefinition id');\n    throw 'contentDefinition';\n    // return new ContentDefinitionClass({ ...object, type: DefinitionType.Content })\n};\nconst contentDefinitionFromId = (id) => {\n    const definition = contentDefaults.find(definition => definition.id === id);\n    if (definition)\n        return definition;\n    return contentDefinition({ id });\n};\nconst contentInstance = (object) => {\n    const { definitionId } = object;\n    if (!definitionId)\n        throw Errors.id;\n    const definition = contentDefinitionFromId(definitionId);\n    const instance = definition.instanceFromObject(object);\n    return instance;\n};\nconst contentFromId = (id) => {\n    const definition = contentDefinitionFromId(id);\n    const instance = definition.instanceFromObject({ definitionId: id });\n    return instance;\n};\nFactories[DefinitionType.Content] = {\n    definition: contentDefinition,\n    definitionFromId: contentDefinitionFromId,\n    fromId: contentFromId,\n    instance: contentInstance,\n    defaults: contentDefaults,\n};\n\nconst AudibleSampleRate = 44100;\nconst AudibleChannels = 2;\nclass AudibleContext {\n    addSource(id, source) {\n        // console.log(\"addSource\", id)\n        this.sourcesById.set(id, source);\n    }\n    _context;\n    get context() {\n        if (!this._context) {\n            const Klass = AudioContext || window.webkitAudioContext;\n            if (!Klass)\n                throw Errors.audibleContext;\n            this._context = new Klass();\n        }\n        return this._context;\n    }\n    createBuffer(seconds) {\n        const length = AudibleSampleRate * seconds;\n        return this.context.createBuffer(AudibleChannels, length, AudibleSampleRate);\n    }\n    createBufferSource(buffer) {\n        // console.trace(this.constructor.name, \"createBufferSource\")\n        const sourceNode = this.context.createBufferSource();\n        if (buffer)\n            sourceNode.buffer = buffer;\n        return sourceNode;\n    }\n    createGain() { return this.context.createGain(); }\n    get currentTime() { return this.context.currentTime; }\n    decode(buffer) {\n        return new Promise((resolve, reject) => (this.context.decodeAudioData(buffer, audioData => resolve(audioData), error => reject(error))));\n    }\n    deleteSource(id) {\n        // console.log(\"deleteSource\", id)\n        const source = this.getSource(id);\n        if (!source)\n            return;\n        this.sourcesById.delete(id);\n        const { gainSource, gainNode } = source;\n        gainNode.disconnect(this.destination);\n        gainSource.disconnect(gainNode);\n        gainSource.stop();\n    }\n    get destination() { return this.context.destination; }\n    getSource(id) {\n        return this.sourcesById.get(id);\n    }\n    hasSource(id) { return this.sourcesById.has(id); }\n    sourcesById = new Map();\n    startAt(id, source, start, duration, offset, loops = false) {\n        const gainNode = this.createGain();\n        source.loop = loops;\n        source.connect(gainNode);\n        gainNode.connect(this.destination);\n        source.start(this.currentTime + start, offset, duration);\n        this.addSource(id, { gainSource: source, gainNode });\n    }\n}\nconst AudibleContextInstance = new AudibleContext();\n\nconst createContextAudible = () => { return new AudibleContext(); };\nconst ContextFactory = {\n    audible: createContextAudible,\n};\n\nconst isMashAndDefinitionsObject = (value) => {\n    return isObject(value) && \"mashObject\" in value && \"definitionObjects\" in value;\n};\nconst isMash = (value) => {\n    return isObject(value) && \"composition\" in value;\n};\nfunction assertMash(value, name) {\n    if (!isMash(value))\n        throwError(value, \"Mash\", name);\n}\n\nclass EditedClass extends PropertiedClass {\n    constructor(args) {\n        super();\n        const { createdAt, id, icon, preloader, quantize } = args;\n        if (preloader)\n            this._preloader = preloader;\n        if (isPopulatedString(id))\n            this._id = id;\n        if (isPopulatedString(icon))\n            this.icon = icon;\n        if (isPopulatedString(createdAt))\n            this.createdAt = createdAt;\n        if (isAboveZero(quantize))\n            this.quantize = quantize;\n        this.properties.push(propertyInstance({\n            name: 'label', type: DataType.String, defaultValue: ''\n        }));\n        this.properties.push(propertyInstance({\n            name: 'color', type: DataType.Rgb, defaultValue: colorBlack\n        }));\n        this.propertiesInitialize(args);\n    }\n    get buffer() { throw new Error(Errors.unimplemented + 'get buffer'); }\n    set buffer(value) { throw new Error(Errors.unimplemented + 'set buffer'); }\n    createdAt = '';\n    data = {};\n    dataPopulate(rest) {\n        const propertyNames = this.properties.map(property => property.name);\n        Object.entries(rest).forEach(([key, value]) => {\n            if (propertyNames.find(name => name === key))\n                return;\n            this.data[key] = value;\n        });\n    }\n    destroy() { }\n    _editor;\n    get editor() { return this._editor; }\n    set editor(value) { this._editor = value; }\n    _emitter;\n    get emitter() { return this._emitter; }\n    set emitter(value) {\n        this._emitter = value;\n        this.emitterChanged();\n    }\n    emitterChanged() { }\n    editedGraphFiles(args) { return []; }\n    icon = '';\n    _id = '';\n    get id() { return this._id ||= idTemporary(); }\n    set id(value) {\n        this._id = value;\n        this.emitter?.emit(EventType.Save);\n    }\n    _imageSize = { ...SizeZero };\n    get imageSize() { return this._imageSize; }\n    set imageSize(value) {\n        assertSizeAboveZero(value, 'imageSize');\n        this._imageSize = value;\n    }\n    loadPromise(args) { throw Errors.unimplemented; }\n    get loading() { return false; }\n    get mashes() { throw Errors.unimplemented; }\n    _preloader;\n    get preloader() {\n        return this._preloader;\n    }\n    putPromise() { throw new Error(Errors.unimplemented); }\n    quantize = Default.mash.quantize;\n    reload() { return; }\n    selectables() { return []; }\n    selectType = SelectType.None;\n    selectedItems(actions) { return []; }\n    previewItems(options) { throw Errors.unimplemented; }\n    toJSON() {\n        const json = super.toJSON();\n        json.createdAt = this.createdAt;\n        json.quantize = this.quantize;\n        json.id = this.id;\n        if (this.icon)\n            json.icon = this.icon;\n        Object.entries(this.data).forEach(([key, value]) => {\n            if (isUndefined(json[key]))\n                json[key] = value;\n        });\n        return json;\n    }\n}\n\nconst isClipObject = (value) => {\n    return isInstanceObject(value);\n};\nconst isClip = (value) => {\n    return isInstance(value) && \"contentId\" in value;\n};\nfunction assertClip(value, name) {\n    if (!isClip(value))\n        throwError(value, \"Clip\", name);\n}\n\nconst isTrack = (value) => {\n    return isObject(value) && \"frameForClipNearFrame\" in value;\n};\nfunction assertTrack(value, name) {\n    if (!isTrack(value))\n        throwError(value, 'Track', name);\n}\n\nfunction PreloadableDefinitionMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { source, url, bytes, mimeType } = object;\n            const sourceOrUrl = source || url || '';\n            this.source = source || sourceOrUrl;\n            this.url = url || sourceOrUrl;\n            if (bytes)\n                this.bytes = bytes;\n            if (mimeType)\n                this.mimeType = mimeType;\n        }\n        bytes = 0;\n        loadType;\n        mimeType = '';\n        source;\n        toJSON() {\n            const json = super.toJSON();\n            if (this.url)\n                json.url = this.url;\n            if (this.source)\n                json.source = this.source;\n            if (this.bytes)\n                json.bytes = this.bytes;\n            if (this.mimeType)\n                json.mimeType = this.mimeType;\n            return json;\n        }\n        url;\n    };\n}\n\nfunction PreloadableMixin(Base) {\n    return class extends Base {\n    };\n}\n\nfunction UpdatableSizeMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { container } = object;\n            const min = container ? 0.0 : 1.0;\n            this.addProperties(object, propertyInstance({\n                tweenable: true, name: 'width', type: DataType.Percent,\n                group: DataGroup.Size, defaultValue: 1.0, max: 2.0, min\n            }));\n            this.addProperties(object, propertyInstance({\n                tweenable: true, name: 'height', type: DataType.Percent,\n                group: DataGroup.Size, defaultValue: 1.0, max: 2.0, min\n            }));\n        }\n        colorMaximize = true;\n        containerCommandFilters(args, tweening) {\n            // console.log(this.constructor.name, \"containerCommandFilters\")\n            const commandFilters = [];\n            const { commandFiles, containerRects, filterInput: input, videoRate, track } = args;\n            let filterInput = input;\n            const maxSize = tweening.size ? tweenMaxSize(...containerRects) : containerRects[0];\n            // add color box first\n            const colorArgs = {\n                ...args,\n                contentColors: [colorBlackOpaque, colorBlackOpaque],\n                outputSize: maxSize, //{ width: maxSize.width * 2, height: maxSize.height * 2 }\n            };\n            commandFilters.push(...this.colorBackCommandFilters(colorArgs, `container-${track}-back`));\n            const colorInput = arrayLast(arrayLast(commandFilters).outputs);\n            const { id } = this;\n            // console.log(this.constructor.name, \"containerCommandFilters calling commandFilesInput\", id)\n            const fileInput = commandFilesInput(commandFiles, id, true);\n            // then add file input, scaled\n            commandFilters.push(...this.scaleCommandFilters({ ...args, filterInput: fileInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            if (tweening.size) {\n                // overlay scaled file input onto color box\n                assertPopulatedString(filterInput, 'overlay input');\n                commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput));\n                filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            }\n            // crop file input\n            const cropArgs = { duration: 0, videoRate };\n            assertPopulatedString(filterInput, 'crop input');\n            const { cropFilter } = this;\n            cropFilter.setValue(maxSize.width, \"width\");\n            cropFilter.setValue(maxSize.height, \"height\");\n            cropFilter.setValue(0, \"x\");\n            cropFilter.setValue(0, \"y\");\n            commandFilters.push(...cropFilter.commandFilters({ ...cropArgs, filterInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            if (!tweening.size) {\n                // overlay scaled and cropped file input onto color box\n                assertPopulatedString(filterInput, 'overlay input');\n                commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput));\n                filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            }\n            assertPopulatedString(filterInput, 'alphamerge input');\n            commandFilters.push(...this.alphamergeCommandFilters({ ...args, filterInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            // then we need to do effects, opacity, etc, and merge\n            commandFilters.push(...this.containerFinalCommandFilters({ ...args, filterInput }));\n            return commandFilters;\n        }\n        containerPreviewItemPromise(containerRect, time, range, icon) {\n            return this.itemPromise(containerRect, time, range, icon);\n        }\n        contentCommandFilters(args, tweening) {\n            const commandFilters = [];\n            const { containerRects, visible, time, videoRate, clipTime, commandFiles, filterInput: input, track, upload } = args;\n            if (!visible)\n                return commandFilters;\n            assertTimeRange(clipTime);\n            assertPopulatedArray(containerRects, 'containerRects');\n            const { id } = this;\n            let filterInput = input || commandFilesInput(commandFiles, id, visible);\n            const contentArgs = {\n                containerRects: containerRects, time, timeRange: clipTime\n            };\n            const contentRects = this.contentRects(contentArgs);\n            const tweeningContainer = !rectsEqual(...containerRects);\n            const [contentRect, contentRectEnd] = contentRects;\n            const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n            const maxContainerSize = tweeningContainer ? tweenMaxSize(...containerRects) : containerRects[0];\n            const colorInput = `content-${track}-back`;\n            if (!upload) {\n                const colorArgs = {\n                    ...args, contentColors: [colorTransparent, colorTransparent],\n                    outputSize: maxContainerSize\n                };\n                commandFilters.push(...this.colorBackCommandFilters(colorArgs, colorInput));\n            }\n            const scaleArgs = {\n                ...args, filterInput, containerRects: contentRects\n            };\n            commandFilters.push(...this.scaleCommandFilters(scaleArgs));\n            if (upload)\n                return commandFilters;\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            if (tweening.size) {\n                commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput));\n                filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            }\n            const cropArgs = {\n                duration, videoRate\n            };\n            const { cropFilter } = this;\n            cropFilter.setValue(maxContainerSize.width, \"width\");\n            cropFilter.setValue(maxContainerSize.height, \"height\");\n            cropFilter.setValue(contentRect.x, \"x\");\n            cropFilter.setValue(contentRect.y, \"y\");\n            cropFilter.setValue(contentRectEnd.x, `x${PropertyTweenSuffix}`);\n            cropFilter.setValue(contentRectEnd.y, `y${PropertyTweenSuffix}`);\n            commandFilters.push(...cropFilter.commandFilters({ ...cropArgs, filterInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            const { setsarFilter } = this;\n            setsarFilter.setValue(\"1/1\", \"sar\");\n            commandFilters.push(...setsarFilter.commandFilters({ ...cropArgs, filterInput }));\n            filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            if (!tweening.size) {\n                commandFilters.push(...this.overlayCommandFilters(colorInput, filterInput, this.definition.alpha));\n                filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            }\n            commandFilters.push(...super.contentCommandFilters({ ...args, filterInput }, tweening));\n            return commandFilters;\n        }\n        _setsarFilter;\n        get setsarFilter() { return this._setsarFilter ||= filterFromId('setsar'); }\n        hasIntrinsicSizing = true;\n        iconUrl(size, time, clipTime) {\n            return this.definition.url;\n        }\n        initialCommandFilters(args, tweening, container = false) {\n            const commandFilters = [];\n            const { filterInput, track } = args;\n            if (container) {\n                // relabel input as content\n                assertPopulatedString(filterInput);\n                commandFilters.push(this.copyCommandFilter(filterInput, track));\n            }\n            return commandFilters;\n        }\n        intrinsicRect(editing = false) {\n            const key = editing ? 'previewSize' : 'sourceSize';\n            const { [key]: size } = this.definition;\n            assertSizeAboveZero(size, key);\n            const rect = { ...PointZero, ...size };\n            // console.log(this.constructor.name, \"intrinsicRect\", editing, rect)\n            return rect;\n        }\n        intrinsicsKnown(options) {\n            const { editing, size } = options;\n            if (!size)\n                return true;\n            const key = editing ? 'previewSize' : 'sourceSize';\n            const { [key]: definitionSize } = this.definition;\n            return sizeAboveZero(definitionSize);\n        }\n        itemIconPromise(rect, time, range, cache) {\n            const { clip } = this;\n            const { preloader } = clip.track.mash;\n            const url = this.iconUrl(sizeCopy(rect), time, range);\n            const imageUrl = urlPrependProtocol('image', url);\n            // const lock = stretch ? '' : Orientation.V\n            const svgUrl = urlPrependProtocol('svg', imageUrl, { ...rect });\n            const definition = cache ? this.definition : undefined;\n            return preloader.loadPromise(svgUrl, definition);\n        }\n        // protected previewItem?: SvgItem\n        itemPreviewPromise(rect, time, range) {\n            return this.itemIconPromise(rect, time, range);\n        }\n        itemPromise(containerRect, time, range, icon) {\n            const { container } = this;\n            const rect = container ? containerRect : this.itemContentRect(containerRect, time, range);\n            if (icon)\n                return this.itemIconPromise(rect, time, range);\n            return this.itemPreviewPromise(rect, time, range).then(svgItem => {\n                svgSetDimensions(svgItem, rect);\n                return svgItem;\n            });\n        }\n        itemContentRect(containerRect, time, timeRange) {\n            const contentArgs = {\n                containerRects: containerRect, time, timeRange, editing: true\n            };\n            const [contentRect] = this.contentRects(contentArgs);\n            const { x, y } = contentRect;\n            const point = { x: containerRect.x - x, y: containerRect.y - y };\n            const rect = rectFromSize(contentRect, point);\n            return rect;\n        }\n    };\n}\n\nfunction UpdatableSizeDefinitionMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { sourceSize, previewSize } = object;\n            if (sizeAboveZero(previewSize))\n                this.previewSize = previewSize;\n            if (sizeAboveZero(sourceSize))\n                this.sourceSize = sourceSize;\n        }\n        alpha;\n        previewSize;\n        sourceSize;\n        toJSON() {\n            const json = super.toJSON();\n            const { sourceSize, previewSize } = this;\n            if (sourceSize)\n                json.sourceSize = this.sourceSize;\n            if (previewSize)\n                json.previewSize = this.previewSize;\n            return json;\n        }\n    };\n}\n\nconst UpdatableDurationDefinitionTypes = [\n    DefinitionType.Audio,\n    DefinitionType.Video,\n    DefinitionType.VideoSequence,\n];\nconst isUpdatableDuration = (value) => {\n    return isPreloadable(value) && \"startOptions\" in value;\n};\nfunction assertUpdatableDuration(value, name) {\n    if (!isUpdatableDuration(value))\n        throwError(value, \"Updatable\", name);\n}\nconst isUpdatableDurationType = (value) => {\n    return isDefinitionType(value) && UpdatableDurationDefinitionTypes.includes(value);\n};\nconst isUpdatableDurationDefinition = (value) => {\n    return isPreloadableDefinition(value) && \"audibleSource\" in value;\n};\nfunction assertUpdatableDurationDefinition(value, name) {\n    if (!isUpdatableDurationDefinition(value))\n        throwError(value, \"UpdatableDefinition\", name);\n}\n\nconst AudibleGainDelimiter = ',';\nfunction UpdatableDurationMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { gain } = object;\n            if (isDefined(gain)) {\n                if (isString(gain)) {\n                    if (gain.includes(AudibleGainDelimiter)) {\n                        const floats = gain.split(AudibleGainDelimiter).map(string => parseFloat(string));\n                        const z = floats.length / 2;\n                        for (let i = 0; i < z; i += 1) {\n                            this.gainPairs.push([floats[i * 2], floats[i * 2 + 1]]);\n                        }\n                        this.gain = -1;\n                    }\n                    else\n                        this.gain = Number(gain);\n                }\n                else if (isPositive(gain))\n                    this.gain = gain;\n            }\n        }\n        definitionTime(masherTime, clipRange) {\n            const superTime = super.definitionTime(masherTime, clipRange);\n            const { startTrim, endTrim, definition } = this;\n            const { duration } = definition;\n            const durationTime = timeFromSeconds(duration, clipRange.fps);\n            const durationFrames = durationTime.frame - (startTrim + endTrim);\n            const offset = superTime.frame % durationFrames;\n            return superTime.withFrame(offset + startTrim).divide(this.speed);\n        }\n        frames(quantize) {\n            const { definition, startTrim, endTrim } = this;\n            const frames = definition.frames(quantize);\n            return frames - (startTrim + endTrim);\n        }\n        gain = 1.0;\n        gainPairs = [];\n        fileUrls(args) {\n            const { editing, audible, time } = args;\n            if (!audible || (editing && !time.isRange)) {\n                return [];\n            }\n            if (!(this.mutable() && !this.muted))\n                return [];\n            const { definition } = this;\n            const file = definition.urlAudible(editing);\n            const graphFile = {\n                type: LoadType.Audio, file, definition, input: true\n            };\n            return [graphFile];\n        }\n        hasGain() {\n            if (this.gain === 0)\n                return true;\n            if (isPositive(this.gain))\n                return false;\n            if (this.gainPairs.length !== 2)\n                return false;\n            const [first, second] = this.gainPairs;\n            if (first.length !== 2)\n                return false;\n            if (second.length !== 2)\n                return false;\n            if (Math.max(...first))\n                return false;\n            const [time, value] = second;\n            return time === 1 && value === 0;\n        }\n        hasIntrinsicTiming = true;\n        initialCommandFilters(args, tweening, container = false) {\n            const commandFilters = [];\n            const { time, quantize, commandFiles, clipTime, videoRate, duration } = args;\n            const { id } = this;\n            // console.log(this.constructor.name, \"initialCommandFilters calling commandFilesInput\", id)\n            let filterInput = commandFilesInput(commandFiles, id, true);\n            assertPopulatedString(filterInput, 'filterInput');\n            const trimFilter = 'trim';\n            const trimId = idGenerate(trimFilter);\n            const trimOptions = {};\n            if (duration)\n                trimOptions.duration = duration;\n            const { frame } = this.definitionTime(time, clipTime);\n            if (frame)\n                trimOptions.start = timeFromArgs(frame, quantize).seconds;\n            const commandFilter = {\n                inputs: [filterInput],\n                ffmpegFilter: trimFilter,\n                options: trimOptions,\n                outputs: [trimId]\n            };\n            commandFilters.push(commandFilter);\n            filterInput = trimId;\n            if (duration) {\n                const fpsFilter = 'fps';\n                const fpsId = idGenerate(fpsFilter);\n                const fpsCommandFilter = {\n                    ffmpegFilter: fpsFilter,\n                    options: { fps: videoRate },\n                    inputs: [filterInput], outputs: [fpsId]\n                };\n                commandFilters.push(fpsCommandFilter);\n                filterInput = fpsId;\n            }\n            const setptsFilter = 'setpts';\n            const setptsId = idGenerate(setptsFilter);\n            const setptsCommandFilter = {\n                ffmpegFilter: setptsFilter,\n                options: { expr: 'PTS-STARTPTS' },\n                inputs: [filterInput], outputs: [setptsId]\n            };\n            commandFilters.push(setptsCommandFilter);\n            return commandFilters;\n        }\n        intrinsicsKnown(options) {\n            const superKnown = super.intrinsicsKnown(options);\n            if (!superKnown)\n                return false;\n            const { duration } = options;\n            if (!duration)\n                return true;\n            return isAboveZero(this.definition.duration);\n        }\n        mutable() { return this.definition.audio; }\n        selectedProperty(property) {\n            const { name } = property;\n            switch (name) {\n                case 'gain': return this.mutable() && !this.muted;\n            }\n            return super.selectedProperty(property);\n        }\n        setValue(value, name, property) {\n            super.setValue(value, name, property);\n            if (property)\n                return;\n            switch (name) {\n                case 'startTrim':\n                case 'endTrim':\n                case 'speed':\n                    // console.log(this.constructor.name, \"setValue\", name, value)\n                    this.clip.resetTiming(this);\n                    break;\n            }\n        }\n        startOptions(seconds, timeRange) {\n            let offset = timeRange.withFrame(this.startTrim).seconds;\n            let start = timeRange.seconds - seconds;\n            let duration = timeRange.lengthSeconds;\n            if (start < 0) {\n                offset -= start;\n                duration += start;\n                start = 0;\n            }\n            return { start, offset, duration };\n        }\n        toJSON() {\n            const json = super.toJSON();\n            const { speed, gain } = this;\n            if (speed !== 1.0)\n                json.speed = speed;\n            if (gain !== 1.0)\n                json.gain = gain;\n            return json;\n        }\n        _trimFilter;\n        get trimFilter() { return this._trimFilter ||= filterFromId('trim'); }\n    };\n}\n\nfunction UpdatableDurationDefinitionMixin(Base) {\n    return class extends Base {\n        constructor(...args) {\n            super(...args);\n            const [object] = args;\n            const { audioUrl, audio, loop, duration, waveform, loadedAudio } = object;\n            if (audio || audioUrl || loadedAudio) {\n                this.audio = true;\n                if (isPopulatedString(audioUrl))\n                    this.audioUrl = audioUrl;\n                if (waveform)\n                    this.waveform = waveform;\n                if (loadedAudio)\n                    this.loadedAudio = loadedAudio;\n            }\n            // console.log(this.constructor.name, \"audio\", audio, this.audio, this.audioUrl)\n            if (isAboveZero(duration))\n                this.duration = duration;\n            // console.log(this.constructor.name, \"duration\", duration, this.duration)\n            if (loop) {\n                this.loop = loop;\n                this.properties.push(propertyInstance({ name: 'loops', defaultValue: 1 }));\n            }\n            // group: DataGroup.Timing, \n            this.properties.push(propertyInstance({\n                name: \"gain\", defaultValue: 1.0, type: DataType.Percent,\n                min: 0, max: 2.0, step: 0.01\n            }));\n            this.properties.push(propertyInstance({\n                name: \"speed\", defaultValue: 1.0, type: DataType.Percent,\n                min: 0.1, max: 2.0, step: 0.1,\n                group: DataGroup.Timing,\n            }));\n            this.properties.push(propertyInstance({\n                name: \"startTrim\", defaultValue: 0, type: DataType.Frame,\n                step: 1, min: 0,\n                group: DataGroup.Timing,\n            }));\n            this.properties.push(propertyInstance({\n                name: \"endTrim\", defaultValue: 0, type: DataType.Frame,\n                step: 1, min: 0,\n                group: DataGroup.Timing,\n            }));\n        }\n        audibleSource(preloader) {\n            const { loadedAudio } = this;\n            if (loadedAudio) {\n                // console.log(this.constructor.name, \"audibleSource loadedAudio\")\n                return AudibleContextInstance.createBufferSource(loadedAudio);\n            }\n            const { audioUrl } = this;\n            if (!isPopulatedString(audioUrl)) {\n                // console.log(this.constructor.name, \"audibleSource no audioUrl\")\n                this.audio = false;\n                return;\n            }\n            const protocolUrl = urlPrependProtocol('audio', audioUrl);\n            // console.log(this.constructor.name, \"audibleSource\", protocolUrl)\n            const cache = preloader.getCache(protocolUrl);\n            if (!cache) {\n                // console.log(this.constructor.name, \"audibleSource not cached\", protocolUrl)\n                return;\n            }\n            const { error, result } = cache;\n            if (error || !isLoadedAudio(result)) {\n                // console.log(this.constructor.name, \"audibleSource error\", error, protocolUrl, result)\n                this.audio = false;\n                this.audioUrl = '';\n                return;\n            }\n            this.loadedAudio = result;\n            // console.log(this.constructor.name, \"audibleSource cached\", protocolUrl)\n            return AudibleContextInstance.createBufferSource(result);\n        }\n        audio = false;\n        audioUrl = '';\n        duration = 0;\n        frames(quantize) {\n            const { duration } = this;\n            // console.log(this.constructor.name, \"frames duration =\", duration)\n            if (!duration)\n                return Duration.Unknown;\n            return timeFromSeconds(this.duration, quantize, 'floor').frame;\n        }\n        loadedAudio;\n        loop = false;\n        toJSON() {\n            const json = super.toJSON();\n            const { duration, audio, loop, waveform, audioUrl, url } = this;\n            if (duration)\n                json.duration = duration;\n            if (audio)\n                json.audio = audio;\n            if (loop)\n                json.loop = loop;\n            if (waveform)\n                json.waveform = waveform;\n            if (url)\n                json.url = url;\n            else if (audioUrl)\n                json.audioUrl = audioUrl;\n            return json;\n        }\n        urlAudible(editing = false) {\n            // console.log(this.constructor.name, \"urlAudible\", editing, this.audioUrl)\n            if (editing) {\n                return urlPrependProtocol('audio', this.audioUrl || this.url);\n            }\n            return this.source;\n        }\n        waveform;\n    };\n}\n\nclass AudioPreview {\n    constructor(object) {\n        const { buffer, gain, preloader } = object;\n        if (isPositive(gain))\n            this.gain = gain;\n        if (isAboveZero(buffer))\n            this.buffer = buffer;\n        this.preloader = preloader;\n    }\n    adjustClipGain(clip, quantize) {\n        const timeRange = clip.timeRange(quantize);\n        const avs = this.clipSources(clip);\n        avs.forEach(av => { this.adjustSourceGain(av, timeRange); });\n    }\n    adjustSourceGain(av, timeRange) {\n        const source = AudibleContextInstance.getSource(av.id);\n        if (!source) {\n            // console.log(this.constructor.name, \"adjustSourceGain no source\", clip.id)\n            return;\n        }\n        const { gainNode } = source;\n        if (this.gain === 0.0) {\n            gainNode.gain.value = 0.0;\n            return;\n        }\n        const gain = av.gain;\n        if (isPositive(gain)) {\n            gainNode.gain.value = this.gain * gain;\n            return;\n        }\n        // position/gain pairs...\n        const options = isTimeRange(timeRange) ? av.startOptions(this.seconds, timeRange) : timeRange;\n        const { start, duration } = options;\n        gainNode.gain.cancelScheduledValues(0);\n        av.gainPairs.forEach(pair => {\n            const [position, value] = pair;\n            gainNode.gain.linearRampToValueAtTime(this.gain * value, start + position * duration);\n        });\n    }\n    buffer = Default.mash.buffer;\n    bufferClips(clips, quantize) {\n        // console.log(this.constructor.name, \"compositeAudible\", clips.length)\n        if (!this.createSources(clips, quantize))\n            return false;\n        this.destroySources(clips);\n        return true;\n    }\n    bufferSource;\n    clear() { }\n    clipSources(clip) {\n        const avs = [];\n        const { container, content } = clip;\n        if (isUpdatableDuration(container) && !container.muted)\n            avs.push(container);\n        if (isUpdatableDuration(content) && !content.muted)\n            avs.push(content);\n        return avs;\n    }\n    createSources(clips, quantize, time) {\n        // console.log(this.constructor.name, \"createSources\", clips.length, \"clip(s)\", quantize, time, this.playing)\n        if (!this.playing && !time)\n            return false;\n        const addingClips = clips.filter(clip => !this.playingClips.includes(clip));\n        // console.log(this.constructor.name, \"createSources\", addingClips.length, \"addingClip(s)\")\n        if (!addingClips.length)\n            return true;\n        let okay = true;\n        addingClips.forEach(clip => {\n            const avs = this.clipSources(clip);\n            const timeRange = clip.timeRange(quantize);\n            const filtered = avs.filter(av => !AudibleContextInstance.hasSource(av.id));\n            okay &&= filtered.every(av => {\n                const startSeconds = this.playing ? this.seconds : time?.seconds || 0;\n                const options = av.startOptions(startSeconds, timeRange);\n                const { start, duration, offset } = options;\n                if (isPositive(start) && isAboveZero(duration)) {\n                    const { definition, id } = av;\n                    assertUpdatableDurationDefinition(definition);\n                    const audibleSource = definition.audibleSource(this.preloader);\n                    if (!audibleSource) {\n                        if (!start) {\n                            // console.log(this.constructor.name, \"createSources no audible source\", definition.label)\n                            // wanted to start immediately but it's not loaded\n                            return false;\n                        }\n                        return true;\n                    }\n                    const { loop } = definition;\n                    // console.log(this.constructor.name, \"createSources\", options, loop)\n                    AudibleContextInstance.startAt(id, audibleSource, start, duration, offset, loop);\n                    this.adjustSourceGain(av, options);\n                }\n                else\n                    console.error(this.constructor.name, \"createSources\", options);\n                return true;\n            });\n        });\n        this.playingClips.push(...addingClips);\n        return okay;\n    }\n    destroySources(clipsToKeep = []) {\n        const sourceClips = [...this.playingClips];\n        const clipsToRemove = sourceClips.filter(clip => !clipsToKeep.includes(clip));\n        clipsToRemove.forEach(clip => {\n            const avs = this.clipSources(clip);\n            avs.forEach(av => AudibleContextInstance.deleteSource(av.id));\n        });\n        this.playingClips = clipsToKeep;\n        // console.log(this.constructor.name, \"destroySources removed\", clipsToRemove.length, \"kept\", this.playingClips.length)\n    }\n    gain = Default.mash.gain;\n    setGain(value, quantize) {\n        if (this.gain === value)\n            return;\n        this.gain = value;\n        if (this.playing) {\n            this.playingClips.forEach(clip => this.adjustClipGain(clip, quantize));\n        }\n    }\n    playing = false;\n    playingClips = [];\n    preloader;\n    get seconds() {\n        const ellapsed = AudibleContextInstance.currentTime - this.contextSecondsWhenStarted;\n        const started = ellapsed + this.startedMashAt;\n        // console.log(\"seconds\", started, \"=\", this.startedMashAt, \"+\", ellapsed, '=', audibleContext.currentTime, '-', this.contextSecondsWhenStarted)\n        return started;\n    }\n    startContext() {\n        // console.log(this.constructor.name, \"startContext\")\n        if (this.bufferSource)\n            throw Errors.internal + 'bufferSource startContext';\n        if (this.playing)\n            throw Errors.internal + 'playing';\n        const buffer = AudibleContextInstance.createBuffer(this.buffer);\n        this.bufferSource = AudibleContextInstance.createBufferSource(buffer);\n        this.bufferSource.loop = true;\n        this.bufferSource.connect(AudibleContextInstance.destination);\n        this.bufferSource.start(0);\n    }\n    // called when playhead starts moving\n    startPlaying(time, clips, quantize) {\n        if (!this.bufferSource)\n            throw Errors.internal + 'bufferSource startPlaying';\n        if (this.playing)\n            throw Errors.internal + 'playing';\n        const { seconds } = time;\n        this.playing = true;\n        this.startedMashAt = seconds;\n        this.contextSecondsWhenStarted = AudibleContextInstance.currentTime;\n        // console.log(this.constructor.name, \"startPlaying\", \"startedMashAt\", this.startedMashAt, \"contextSecondsWhenStarted\", this.contextSecondsWhenStarted)\n        if (!this.createSources(clips, quantize, time)) {\n            // console.log(this.constructor.name, \"startPlaying stalled\")\n            this.stopPlaying();\n            return false;\n        }\n        // console.log(this.constructor.name, \"startPlaying\", this.startedMashAt, this.contextSecondsWhenStarted)\n        return true;\n    }\n    // position of masher (in seconds) when startPlaying called\n    startedMashAt = 0;\n    // currentTime of context (in seconds) was created when startPlaying called\n    contextSecondsWhenStarted = 0;\n    stopContext() {\n        if (!this.bufferSource)\n            return;\n        this.bufferSource.stop();\n        this.bufferSource.disconnect(AudibleContextInstance.destination);\n        delete this.bufferSource;\n    }\n    stopPlaying() {\n        // console.log(this.constructor.name, \"stopPlaying\")\n        if (!this.playing)\n            return;\n        this.playing = false;\n        this.destroySources();\n        this.startedMashAt = 0;\n        this.contextSecondsWhenStarted = 0;\n    }\n}\n\nconst FilterGraphInputVisible = 'BACKCOLOR';\nconst FilterGraphInputAudible = 'SILENCE';\nclass FilterGraphClass {\n    constructor(args) {\n        const { upload, mash, background, size, time, streaming, videoRate, visible } = args;\n        assertMash(mash);\n        this.mash = mash;\n        this.time = time;\n        this.videoRate = videoRate;\n        this.background = background;\n        this.upload = upload;\n        // console.log(this.constructor.name, \"upload\", args.upload)\n        this.size = size;\n        // console.log(this.constructor.name, this.id, \"size\", size)\n        // console.log(this.constructor.name, this.id, \"visible\", visible)\n        if (visible)\n            this.visible = true;\n        if (streaming)\n            this.streaming = true;\n        assertTrue(isAboveZero(this.videoRate), 'videoRate');\n        assertTrue(this.time.fps === this.quantize, 'time is in mash rate');\n    }\n    _id;\n    get id() { return this._id ||= idGenerate('filtergraph'); }\n    get avType() { return this.visible ? AVType.Video : AVType.Audio; }\n    background;\n    get commandFilterVisible() {\n        const { duration, videoRate: rate, background, size } = this;\n        // console.log(this.constructor.name, this.id, \"commandFilterVisible size\", size)\n        const color = background || colorTransparent;\n        const colorCommandFilter = {\n            ffmpegFilter: 'color',\n            options: { color, rate, size: `${size.width}x${size.height}` },\n            inputs: [], outputs: [FilterGraphInputVisible]\n        };\n        if (duration)\n            colorCommandFilter.options.duration = duration;\n        return colorCommandFilter;\n    }\n    get commandFilterAudible() {\n        const { duration } = this;\n        const silenceCommandFilter = {\n            ffmpegFilter: 'aevalsrc',\n            options: { exprs: 0, duration },\n            inputs: [], outputs: [FilterGraphInputAudible]\n        };\n        if (duration)\n            silenceCommandFilter.options.duration = duration;\n        return silenceCommandFilter;\n    }\n    _clips;\n    get clips() { return this._clips ||= this.clipsInitialize; }\n    get clipsInitialize() {\n        const { time, mash, avType } = this;\n        return mash.clipsInTimeOfType(time, avType).sort(sortByTrack);\n    }\n    get commandInputs() {\n        return this.inputCommandFiles.map(commandFile => {\n            const { options } = commandFile;\n            const input = { source: this.preloader.key(commandFile), options };\n            return input;\n        });\n    }\n    _commandFiles;\n    get filterGraphCommandFiles() {\n        return this._commandFiles ||= this.commandFilesInitialize;\n    }\n    get commandFilesInitialize() {\n        // console.log(this.constructor.name, \"commandFilesInitialize\")\n        const { time, videoRate, quantize, size: outputSize, clips, visible, preloader } = this;\n        // console.log(this.constructor.name, this.id, \"commandFilesInitialize\", visible, outputSize)\n        const commandFiles = clips.flatMap(clip => {\n            const clipTime = clip.timeRange(quantize);\n            const chainArgs = {\n                time, quantize, visible, outputSize: outputSize, videoRate, clipTime\n            };\n            return clip.clipCommandFiles(chainArgs);\n        });\n        commandFiles.forEach(commandFile => {\n            const { definition } = commandFile;\n            assertDefinition(definition);\n            const resolved = preloader.key(commandFile);\n            // console.log(this.constructor.name, \"commandFilesInitialize\", label, resolved)\n            commandFile.resolved = resolved;\n        });\n        return commandFiles;\n    }\n    get commandFilters() {\n        const filters = [];\n        const { time, quantize, size: outputSize, clips, visible, videoRate, filterGraphCommandFiles: commandFiles, upload } = this;\n        // console.log(this.constructor.name, \"commandFilters upload\", upload)\n        // console.log(this.constructor.name, this.id, \"commandFilters\", visible, outputSize)\n        const chainArgs = {\n            videoRate, time, quantize, visible, outputSize, commandFiles,\n            chainInput: '', clipTime: timeRangeFromTime(time), track: 0, upload\n        };\n        if (visible) {\n            if (!upload) {\n                filters.push(this.commandFilterVisible);\n                chainArgs.chainInput = FilterGraphInputVisible;\n            }\n        }\n        else {\n            filters.push(this.commandFilterAudible);\n            chainArgs.chainInput = FilterGraphInputAudible;\n        }\n        const { length } = clips;\n        clips.forEach((clip, index) => {\n            chainArgs.clipTime = clip.timeRange(quantize);\n            chainArgs.track = index;\n            // console.log(this.constructor.name, \"commandFilters\", chainArgs)\n            filters.push(...clip.commandFilters(chainArgs));\n            const lastFilter = arrayLast(filters);\n            if (index < length - 1) {\n                if (!lastFilter.outputs.length)\n                    lastFilter.outputs.push(idGenerate('clip'));\n            }\n            chainArgs.chainInput = arrayLast(lastFilter.outputs);\n        });\n        return filters;\n    }\n    get duration() { return this.time.lengthSeconds; }\n    get inputCommandFiles() { return this.filterGraphCommandFiles.filter(file => file.input); }\n    mash;\n    get preloader() { return this.mash.preloader; }\n    get quantize() { return this.mash.quantize; }\n    size;\n    streaming = false;\n    time;\n    upload;\n    visible = false;\n    videoRate;\n}\n\nclass FilterGraphsClass {\n    args;\n    constructor(args) {\n        this.args = args;\n        const { avType, times, mash, ...rest } = args;\n        // console.log(this.constructor.name, \"upload\", args.upload)\n        const { length } = times;\n        if (!length) { // no clips in timeline\n            this.time = timeFromArgs();\n            return;\n        }\n        const [time] = times;\n        const startFrames = [];\n        const endFrames = [];\n        const rates = [];\n        times.forEach(time => {\n            rates.push(time.fps);\n            startFrames.push(time.frame);\n            if (time.isRange)\n                endFrames.push(time.timeRange.end);\n        });\n        if (endFrames.length) {\n            const rate = Math.max(...rates);\n            if (rate !== Math.min(...rates))\n                throw Errors.internal + 'timeranges fps';\n            const startFrame = Math.min(...startFrames);\n            const endFrame = Math.max(...endFrames);\n            this.time = timeRangeFromArgs(startFrame, rate, endFrame);\n        }\n        else {\n            assertTrue(length === 1, 'just one time');\n            this.time = time;\n        }\n        if (avType !== AVType.Video) {\n            assertTrue(length === 1 || avType !== AVType.Audio, 'single time for avtype audio');\n            const filterGraphArgs = {\n                ...rest, time: this.time, mash, visible: false,\n            };\n            this.filterGraphAudible = new FilterGraphClass(filterGraphArgs);\n        }\n        if (avType !== AVType.Audio) {\n            this.filterGraphsVisible.push(...times.map(time => {\n                const filterGraphArgs = {\n                    ...rest, time, mash, visible: true\n                };\n                const filterGraph = new FilterGraphClass(filterGraphArgs);\n                return filterGraph;\n            }));\n        }\n    }\n    assureDuration() { }\n    assureSize() { }\n    get duration() { return this.time.lengthSeconds; }\n    filterGraphsVisible = [];\n    filterGraphAudible;\n    get filterGraphVisible() { return this.filterGraphsVisible[0]; }\n    _graphFiles;\n    get fileUrls() {\n        const graphs = [...this.filterGraphsVisible];\n        if (this.filterGraphAudible)\n            graphs.push(this.filterGraphAudible);\n        return this._graphFiles ||= graphs.flatMap(graph => graph.filterGraphCommandFiles);\n    }\n    get graphFilesInput() {\n        return this.fileUrls.filter(graphFile => graphFile.input);\n    }\n    get loadPromise() {\n        return this.args.mash.preloader.loadFilesPromise(this.fileUrls);\n    }\n    time;\n}\n\nconst TrackPreviewHandleSize = 8;\nconst TrackPreviewLineSize = 2;\nclass TrackPreviewClass {\n    args;\n    constructor(args) {\n        this.args = args;\n    }\n    get clip() { return this.args.clip; }\n    get container() { return this.clip.container; }\n    get editor() { return this.preview.editor; }\n    get icon() { return !!this.args.icon; }\n    get id() { return this.clip.id; }\n    pointerDown() {\n        const clickPoint = { ...PointZero };\n        const { editor, container, timeRange, rect, clip } = this;\n        const { rect: contentRect } = editor;\n        const removeWindowHandlers = () => {\n            // console.log(\"removeWindowHandlers\")\n            globalThis.window.removeEventListener('pointermove', pointerMoveStart);\n            globalThis.window.removeEventListener('pointermove', pointerMove);\n            globalThis.window.removeEventListener('pointerup', pointerUp);\n            globalThis.window.removeEventListener('pointerup', pointerDown);\n        };\n        const pointerUp = (event) => {\n            eventStop(event);\n            removeWindowHandlers();\n            // if (editor.dragging) {\n            // console.log(\"pointerUp unsetting dragging and redrawing\")\n            editor.dragging = false;\n            editor.redraw();\n            // }\n        };\n        const pointerMove = (event) => {\n            // console.log(\"pointerMove\")\n            eventStop(event);\n            const { offE, offN, offS, offW } = container;\n            const { x, y, width, height } = rect;\n            let totalWidth = contentRect.width - width;\n            let totalHeight = contentRect.height - height;\n            let initialX = 0;\n            let initialY = 0;\n            if (offE) {\n                initialX -= width;\n                totalWidth += width;\n            }\n            if (offW)\n                totalWidth += width;\n            if (offN) {\n                initialY -= height;\n                totalHeight += height;\n            }\n            if (offS)\n                totalHeight += height;\n            const { clientX, clientY } = event;\n            const localX = clientX - contentRect.x;\n            const localY = clientY - contentRect.y;\n            const clickX = clickPoint.x - contentRect.x;\n            const clickY = clickPoint.y - contentRect.y;\n            const xPos = localX - (clickX - x);\n            const yPos = localY - (clickY - y);\n            const limitedX = tweenMinMax(xPos, initialX, initialX + totalWidth);\n            const limitedY = tweenMinMax(yPos, initialY, initialY + totalHeight);\n            const pointsTweening = tweeningPoints(container);\n            const { lastTime } = timeRange;\n            const timesEqual = editor.time.equalsTime(lastTime);\n            const tweening = pointsTweening && timesEqual;\n            const xKey = tweening ? `x${PropertyTweenSuffix}` : 'x';\n            const yKey = tweening ? `y${PropertyTweenSuffix}` : 'y';\n            const undoValues = {\n                [xKey]: container.value(xKey), [yKey]: container.value(yKey)\n            };\n            const redoValues = {\n                [xKey]: totalWidth ? limitedX / totalWidth : undoValues[xKey],\n                [yKey]: totalHeight ? limitedY / totalHeight : undoValues[yKey]\n            };\n            const args = {\n                property: DataGroup.Point, target: container,\n                type: ActionType.ChangeMultiple, redoValues, undoValues\n            };\n            editor.actions.create(args);\n        };\n        const pointerMoveStart = (event) => {\n            // console.log(\"pointerMoveStart setting dragging\")\n            eventStop(event);\n            const { clientX: x, clientY: y } = event;\n            const nowPoint = { x, y };\n            if (pointsEqual(nowPoint, clickPoint))\n                return;\n            // make sure we're either not tweening, or on start/end frame\n            if (tweeningPoints(container)) {\n                const { time } = editor;\n                const closest = time.closest(timeRange);\n                if (!time.equalsTime(closest)) {\n                    removeWindowHandlers();\n                    // console.log(\"pointerMoveStart going to\", closest)\n                    editor.goToTime(closest);\n                    return;\n                }\n            }\n            // set new move listener, and call it\n            // console.log(\"pointerMoveStart setting dragging\")\n            editor.dragging = true;\n            globalThis.window.removeEventListener('pointermove', pointerMoveStart);\n            globalThis.window.addEventListener('pointermove', pointerMove);\n            pointerMove(event);\n        };\n        const pointerDown = (event) => {\n            // console.log(\"pointerDown\")\n            eventStop(event);\n            // event.stopPropagation()\n            if (!(event instanceof PointerEvent))\n                return;\n            const { clientX: x, clientY: y } = event;\n            clickPoint.x = x;\n            clickPoint.y = y;\n            globalThis.window.addEventListener('pointermove', pointerMoveStart);\n            globalThis.window.addEventListener('pointerup', pointerUp);\n            if (editor.selection.clip !== clip) {\n                editor.selection.set(clip);\n            }\n        };\n        return pointerDown;\n    }\n    get preview() { return this.args.preview; }\n    get quantize() { return this.preview.quantize; }\n    _rect;\n    get rect() { return this._rect || this.rectInitialize; }\n    get rectInitialize() {\n        const { time, timeRange, clip, size } = this;\n        assertSizeAboveZero(size, `${this.constructor.name}.rectInitialize size`);\n        const containerRectArgs = {\n            size, time, timeRange, editing: true,\n        };\n        const containerRects = clip.rects(containerRectArgs);\n        assertTrue(rectsEqual(...containerRects));\n        return containerRects[0];\n    }\n    get size() { return this.preview.size; }\n    editingSvgItem(classes, inactive) {\n        // console.log(this.constructor.name, \"editingSvgItem\", className)\n        const { container, rect } = this;\n        const svgItem = container.pathElement(rect);\n        svgItem.setAttribute('vector-effect', 'non-scaling-stroke');\n        svgAddClass(svgItem, classes);\n        if (!inactive)\n            svgItem.addEventListener('pointerdown', this.pointerDown());\n        return svgItem;\n    }\n    svgBoundsElement(lineClasses, handleClasses, inactive) {\n        const items = [];\n        const handle = TrackPreviewHandleSize;\n        const line = TrackPreviewLineSize;\n        const halfLine = line / 2;\n        const { rect, container } = this;\n        const { directions } = container;\n        const { width, height, x, y } = rect;\n        const lineRect = { x: x - halfLine, y: y - halfLine, width: width, height: line };\n        items.push(svgPolygonElement(lineRect, lineClasses));\n        lineRect.y = y + height - halfLine;\n        items.push(svgPolygonElement(lineRect, lineClasses));\n        lineRect.x = x + width - halfLine;\n        lineRect.height = height;\n        lineRect.width = line;\n        lineRect.y = y;\n        items.push(svgPolygonElement(lineRect, lineClasses));\n        lineRect.x = x - halfLine;\n        items.push(svgPolygonElement(lineRect, lineClasses));\n        const size = { width, height };\n        directions.forEach(direction => {\n            const point = this.svgHandlePoint(size, direction);\n            const rect = { x: x + point.x, y: y + point.y, width: handle, height: handle };\n            const element = svgPolygonElement(rect, [...handleClasses, direction.toLowerCase()]);\n            items.push(element);\n            if (inactive)\n                return;\n            element.addEventListener('pointerdown', (event) => {\n                // console.log(\"pointerdown\", direction)\n                this.editor.selection.set(this.clip);\n                eventStop(event);\n            });\n        });\n        // svgSetTransformPoint(groupElement, rect)\n        return items;\n    }\n    svgHandlePoint(dimensions, direction) {\n        const handle = TrackPreviewHandleSize;\n        const halfHandle = handle / 2;\n        const { width, height } = dimensions;\n        const point = { ...PointZero };\n        const [first, second] = String(direction).split('');\n        assertDirection(first, direction);\n        const last = second || first;\n        assertDirection(last);\n        switch (last) {\n            case Direction.W:\n                point.x = -halfHandle;\n                break;\n            case Direction.E:\n                point.x = width - halfHandle;\n                break;\n            default: point.x = Math.round(width / 2) - halfHandle;\n        }\n        switch (first) {\n            case Direction.N:\n                point.y = -halfHandle;\n                break;\n            case Direction.S:\n                point.y = height - halfHandle;\n                break;\n            default: point.y = Math.round(height / 2) - halfHandle;\n        }\n        return point;\n    }\n    get time() { return this.preview.time; }\n    _timeRange;\n    get timeRange() { return this._timeRange ||= this.clip.timeRange(this.quantize); }\n}\n\nclass PreviewClass {\n    constructor(args) {\n        const { selectedClip, editor, time, mash, background, onlyClip, size } = args;\n        this.mash = mash;\n        this.size = size || mash.imageSize;\n        this.time = time;\n        this.background = background;\n        this.selectedClip = selectedClip;\n        this.onlyClip = onlyClip;\n        if (isObject(editor))\n            this.editor = editor;\n    }\n    audible = false;\n    background;\n    _clips;\n    get clips() { return this._clips ||= this.clipsInitialize; }\n    get clipsInitialize() {\n        const { mash, time, onlyClip } = this;\n        if (onlyClip)\n            return [onlyClip];\n        return mash.clipsInTimeOfType(time, AVType.Video).sort(sortByTrack);\n    }\n    combine = false;\n    get duration() { return this.time.lengthSeconds; }\n    get editing() { return isObject(this.editor); }\n    editor;\n    get intrinsicSizePromise() {\n        const { clips, preloader } = this;\n        const options = { editing: true, size: true };\n        const unknownClips = clips.filter(clip => !clip.intrinsicsKnown(options));\n        const files = unknownClips.flatMap(clip => clip.intrinsicGraphFiles(options));\n        return preloader.loadFilesPromise(files);\n    }\n    get itemsPromise() {\n        const { clips, size, time, onlyClip } = this;\n        let promise = Promise.resolve([]);\n        const icon = !!onlyClip;\n        clips.forEach(clip => {\n            promise = promise.then(lastTuple => {\n                return clip.previewItemsPromise(size, time, icon).then(svgItems => {\n                    return [...lastTuple, ...svgItems];\n                });\n            });\n        });\n        return promise;\n    }\n    mash;\n    onlyClip;\n    get preloader() { return this.mash.preloader; }\n    get quantize() { return this.mash.quantize; }\n    size;\n    selectedClip;\n    streaming = false;\n    _svgItems;\n    time;\n    _trackPreviews;\n    get trackPreviews() { return this._trackPreviews ||= this.trackPreviewsInitialize; }\n    get trackPreviewsInitialize() {\n        const trackPreviews = [];\n        const { time, quantize, clips } = this;\n        const tweenTime = time.isRange ? undefined : time.scale(quantize);\n        clips.forEach(clip => {\n            const clipTimeRange = clip.timeRange(quantize);\n            const range = clipTimeRange.scale(time.fps);\n            const frame = Math.max(0, time.frame - range.frame);\n            const timeRange = range.withFrame(frame);\n            const filterChainArgs = {\n                clip, preview: this, tweenTime, timeRange, icon: !!this.onlyClip\n            };\n            trackPreviews.push(new TrackPreviewClass(filterChainArgs));\n        });\n        return trackPreviews;\n    }\n    get svgItemsPromise() {\n        return this.previewItemsPromise;\n    }\n    get previewItemsPromise() {\n        if (this._svgItems)\n            return Promise.resolve(this._svgItems);\n        const sizePromise = this.intrinsicSizePromise;\n        const itemsPromise = sizePromise.then(() => this.itemsPromise);\n        return itemsPromise.then(svgItems => {\n            return this._svgItems = this.tupleItems(svgItems);\n        });\n    }\n    tupleItems(svgItems) {\n        const { size, editing, background, selectedClip, editor } = this;\n        const previewItems = [...svgItems];\n        const trackClasses = 'track';\n        previewItems.forEach(item => svgAddClass(item, trackClasses));\n        const backgroundClasses = 'background';\n        if (background) {\n            const backgroundPolygon = svgPolygonElement(size, backgroundClasses, background);\n            const backgroundSvg = svgElement(size, backgroundPolygon);\n            previewItems.unshift(backgroundSvg);\n        }\n        if (!(editing && svgItems.length))\n            return previewItems;\n        assertObject(editor);\n        // TODO: get classes from theme\n        const { dragging } = editor;\n        const { trackPreviews } = this;\n        const selectedPreview = trackPreviews.find(preview => preview.clip === selectedClip);\n        const hoverItems = trackPreviews.map(trackPreview => {\n            const trackSelected = trackPreview === selectedPreview;\n            const classes = ['outline'];\n            if (!(dragging || trackSelected))\n                classes.push('animate');\n            // console.log(this.constructor.name, \"tupleItems\", dragging, trackSelected)\n            return trackPreview.editingSvgItem(classes);\n        });\n        const outlineClasses = ['outlines'];\n        const hoversSvg = svgElement(size, hoverItems);\n        svgAddClass(hoversSvg, outlineClasses);\n        previewItems.push(hoversSvg);\n        if (!selectedPreview)\n            return previewItems;\n        const classes = ['bounds', 'back'];\n        const lineClasses = ['line'];\n        const handleClasses = ['handle'];\n        const activeSvg = svgElement(size, selectedPreview.svgBoundsElement(lineClasses, handleClasses, true));\n        svgAddClass(activeSvg, classes);\n        classes[1] = 'fore';\n        const passiveSvg = svgElement(size, selectedPreview.svgBoundsElement(lineClasses, handleClasses));\n        svgAddClass(passiveSvg, classes);\n        previewItems.push(activeSvg, passiveSvg);\n        return previewItems;\n    }\n    visible = true;\n}\n\nclass ClipClass extends InstanceBase {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { container, content } = object;\n        this.containerInitialize(container || {});\n        this.contentInitialize(content || {});\n    }\n    assureTimingAndSizing(timing, sizing, tweenable) {\n        const { timing: myTiming, sizing: mySizing, containerId } = this;\n        // const containerOk = containerId !== DefaultContainerId\n        // const contentOk = contentId !== DefaultContentId\n        let timingOk = myTiming !== timing;\n        let sizingOk = mySizing !== sizing;\n        timingOk ||= tweenable.hasIntrinsicTiming;\n        sizingOk ||= tweenable.hasIntrinsicSizing;\n        // timingOk ||= timing === Timing.Container ? containerOk : contentOk\n        // sizingOk ||= sizing === Sizing.Container ? containerOk : contentOk\n        if (!timingOk) {\n            if (timing === Timing.Content && containerId) {\n                this.timing = Timing.Container;\n            }\n            else\n                this.timing = Timing.Custom;\n            // console.log(this.constructor.name, \"assureTimingAndSizing setting timing\", type, isTimingDefinitionType(type), myTiming, \"->\", this.timing)\n        }\n        if (!sizingOk) {\n            if (sizing === Sizing.Content && containerId) {\n                this.sizing = Sizing.Container;\n            }\n            else\n                this.sizing = Sizing.Preview;\n            // console.log(this.constructor.name, \"assureTimingAndSizing setting sizing\", type, isSizingDefinitionType(type), mySizing, \"->\", this.sizing)\n        }\n        return !(sizingOk && timingOk);\n    }\n    get audible() {\n        return this.mutable;\n    }\n    clipFileUrls(args) {\n        const files = [];\n        const { quantize } = args;\n        const { content, container, frames } = this;\n        if (isAboveZero(frames))\n            args.clipTime ||= this.timeRange(quantize);\n        if (container)\n            files.push(...container.fileUrls(args));\n        files.push(...content.fileUrls(args));\n        return files;\n    }\n    clipIcon(size, scale, buffer = 1) {\n        const { container } = this;\n        // TODO: display audio waveform...\n        if (!container)\n            return;\n        const { track } = this;\n        const { quantize, imageSize } = track.mash;\n        assertSizeAboveZero(imageSize, 'track.mash.imageSize');\n        const frameSize = sizeEven(sizeCover(imageSize, size, true));\n        assertSizeAboveZero(frameSize, `${this.constructor.name}.clipIcon containedSize`);\n        const widthAndBuffer = frameSize.width + buffer;\n        const cellCount = Math.ceil(size.width / widthAndBuffer);\n        const clipTime = this.timeRange(quantize);\n        const { startTime } = clipTime;\n        const previews = [];\n        const { mash } = track;\n        let pixel = 0;\n        for (let i = 0; i < cellCount; i++) {\n            const { copy: time } = startTime;\n            const previewArgs = {\n                mash, time, onlyClip: this, size: frameSize,\n            };\n            const preview = new PreviewClass(previewArgs);\n            previews.push(preview);\n            pixel += widthAndBuffer;\n            startTime.frame = clipTime.frame + pixelToFrame(pixel, scale, 'floor');\n        }\n        let svgItemPromise = Promise.resolve([]);\n        previews.forEach(preview => {\n            svgItemPromise = svgItemPromise.then(items => {\n                return preview.svgItemsPromise.then(svgItems => {\n                    return [...items, ...svgItems];\n                });\n            });\n        });\n        return svgItemPromise.then(svgItems => {\n            const point = { ...PointZero };\n            const containerSvg = svgElement(size);\n            svgItems.forEach(groupItem => {\n                svgSetDimensions(groupItem, point);\n                svgAppend(containerSvg, groupItem);\n                point.x += widthAndBuffer;\n            });\n            return containerSvg;\n        });\n    }\n    clipCommandFiles(args) {\n        const commandFiles = [];\n        const { visible, quantize, outputSize: outputSize, time } = args;\n        const clipTime = this.timeRange(quantize);\n        const { content, container } = this;\n        const contentArgs = { ...args, clipTime };\n        // console.log(this.constructor.name, \"commandFiles\", visible, outputSize)\n        if (visible) {\n            assertSizeAboveZero(outputSize, 'outputSize');\n            assertContainer(container);\n            const containerRectArgs = {\n                size: outputSize, time, timeRange: clipTime, loading: true\n            };\n            const containerRects = this.rects(containerRectArgs);\n            // console.log(this.constructor.name, \"clipCommandFiles\", containerRects)\n            const colors = isColorContent(content) ? content.contentColors(time, clipTime) : undefined;\n            const fileArgs = {\n                ...contentArgs, outputSize, contentColors: colors, containerRects\n            };\n            if (!colors) {\n                const contentFiles = content.visibleCommandFiles(fileArgs);\n                // console.log(this.constructor.name, \"commandFiles content:\", contentFiles.length)\n                commandFiles.push(...contentFiles);\n            }\n            const containerFiles = container.visibleCommandFiles(fileArgs);\n            // console.log(this.constructor.name, \"commandFiles container:\", containerFiles.length)\n            commandFiles.push(...containerFiles);\n        }\n        else {\n            assertTrue(!visible, 'outputSize && container');\n            commandFiles.push(...this.content.audibleCommandFiles(contentArgs));\n        }\n        return commandFiles;\n    }\n    commandFilters(args) {\n        const commandFilters = [];\n        const { visible, quantize, outputSize, time } = args;\n        const clipTime = this.timeRange(quantize);\n        const contentArgs = { ...args, clipTime };\n        const { content, container } = this;\n        if (!visible)\n            return this.content.audibleCommandFilters(contentArgs);\n        assertSizeAboveZero(outputSize, 'outputSize');\n        assertContainer(container);\n        const containerRectArgs = {\n            size: outputSize, time, timeRange: clipTime\n        };\n        const containerRects = this.rects(containerRectArgs);\n        contentArgs.containerRects = containerRects;\n        const tweening = {\n            point: !pointsEqual(...containerRects),\n            size: !sizesEqual(...containerRects),\n        };\n        // console.log(this.constructor.name, \"commandFilters\", contentArgs.containerRects)\n        const isColor = isColorContent(content);\n        const colors = isColor ? content.contentColors(time, clipTime) : undefined;\n        const hasColorContent = isPopulatedArray(colors);\n        if (hasColorContent) {\n            tweening.color = colors[0] !== colors[1];\n            tweening.canColor = tweening.color ? container.canColorTween(args) : container.canColor(args);\n        }\n        const timeDuration = time.isRange ? time.lengthSeconds : 0;\n        const duration = timeDuration ? Math.min(timeDuration, clipTime.lengthSeconds) : 0;\n        const containerArgs = {\n            ...contentArgs, contentColors: colors, outputSize, containerRects, duration\n        };\n        if (hasColorContent) {\n            if (!tweening.canColor) {\n                // inject color filter, I will alphamerge to colorize myself later\n                commandFilters.push(...container.containerColorCommandFilters(containerArgs));\n                containerArgs.filterInput = arrayLast(arrayLast(commandFilters).outputs);\n            }\n        }\n        else {\n            commandFilters.push(...content.commandFilters(containerArgs, tweening));\n            containerArgs.filterInput = arrayLast(arrayLast(commandFilters).outputs);\n        }\n        commandFilters.push(...container.commandFilters(containerArgs, tweening, true));\n        return commandFilters;\n    }\n    _container;\n    get container() { return this._container || this.containerInitialize(); }\n    containerInitialize(containerObject = {}) {\n        const { containerId } = this;\n        const definitionId = containerId || containerObject.definitionId;\n        if (!isPopulatedString(definitionId))\n            return;\n        const definition = Defined.fromId(definitionId);\n        const object = { ...containerObject, definitionId, container: true };\n        const instance = definition.instanceFromObject(object);\n        assertContainer(instance);\n        this.assureTimingAndSizing(Timing.Container, Sizing.Container, instance);\n        instance.clip = this;\n        if (this.timing === Timing.Container && this._track)\n            this.resetTiming(instance);\n        // console.log(this.constructor.name, \"containerInitialize\", object, instance.constructor.name, instance.definitionId, instance.type)\n        return this._container = instance;\n    }\n    _content;\n    get content() { return this._content || this.contentInitialize(); }\n    contentInitialize(contentObject = {}) {\n        const { contentId } = this;\n        const definitionId = contentId || contentObject.definitionId;\n        assertPopulatedString(definitionId);\n        const definition = Defined.fromId(definitionId);\n        const object = { ...contentObject, definitionId };\n        const instance = definition.instanceFromObject(object);\n        assertContent(instance);\n        if (this.assureTimingAndSizing(Timing.Content, Sizing.Content, instance)) {\n            const { container } = this;\n            if (container) {\n                this.assureTimingAndSizing(Timing.Container, Sizing.Container, container);\n            }\n        }\n        instance.clip = this;\n        if (this.timing === Timing.Content && this._track)\n            this.resetTiming(instance);\n        // console.log(this.constructor.name, \"contentInitialize\", object, instance.constructor.name, instance.definitionId, instance.type)\n        return this._content = instance;\n    }\n    copy() {\n        const object = { ...this.toJSON(), id: '' };\n        return this.definition.instanceFromObject(object);\n    }\n    definitionIds() {\n        const ids = [\n            ...super.definitionIds(),\n            ...this.content.definitionIds(),\n        ];\n        if (this.container)\n            ids.push(...this.container.definitionIds());\n        return ids;\n    }\n    get endFrame() { return this.frame + this.frames; }\n    endTime(quantize) {\n        return timeFromArgs(this.endFrame, quantize);\n    }\n    intrinsicsKnown(options) {\n        const { content, container } = this;\n        let known = content.intrinsicsKnown(options);\n        if (container)\n            known &&= container.intrinsicsKnown(options);\n        return known;\n    }\n    intrinsicGraphFiles(options) {\n        const { content, container } = this;\n        const files = [];\n        if (!content.intrinsicsKnown(options)) {\n            files.push(content.intrinsicGraphFile(options));\n        }\n        if (container && !container.intrinsicsKnown(options)) {\n            files.push(container.intrinsicGraphFile(options));\n        }\n        return files;\n    }\n    maxFrames(_quantize, _trim) { return 0; }\n    get mutable() {\n        const { content } = this;\n        const contentMutable = content.mutable();\n        if (contentMutable) {\n            // console.log(this.constructor.name, \"mutable content\", content.definitionId, content.definition.id)\n            return true;\n        }\n        const { container } = this;\n        if (!container)\n            return false;\n        const containerMutable = container.mutable();\n        // console.log(this.constructor.name, \"mutable container\", containerMutable, container.definitionId, container.definition.id)\n        return containerMutable;\n    }\n    get notMuted() {\n        const { content, muted } = this;\n        if (muted)\n            return false;\n        if (content.mutable() && !content.muted)\n            return true;\n        const { container } = this;\n        if (!container?.mutable())\n            return true;\n        return !container.muted;\n    }\n    previewItemsPromise(size, time, icon) {\n        assertSizeAboveZero(size, 'previewItemsPromise');\n        const timeRange = this.timeRange(this.track.mash.quantize);\n        const svgTime = time || timeRange.startTime;\n        const { container, content } = this;\n        assertContainer(container);\n        const containerRectArgs = {\n            size, time: svgTime, timeRange, editing: true,\n        };\n        const containerRects = this.rects(containerRectArgs);\n        assertTrue(rectsEqual(...containerRects));\n        const [containerRect] = containerRects;\n        return container.containedContent(content, containerRect, size, svgTime, timeRange, icon);\n    }\n    rectIntrinsic(size, loading, editing) {\n        const rect = { ...size, ...PointZero };\n        const { sizing } = this;\n        if (sizing === Sizing.Preview)\n            return rect;\n        const target = sizing === Sizing.Container ? this.container : this.content;\n        assertTweenable(target);\n        const known = target.intrinsicsKnown({ editing, size: true });\n        if (loading && !known)\n            return rect;\n        assertTrue(known, 'intrinsicsKnown');\n        const targetRect = target.intrinsicRect(editing);\n        // console.log(this.constructor.name, \"rectIntrinsic KNOWN\", targetRect, sizing, target.definition.label)\n        return targetRect;\n    }\n    rects(args) {\n        const { size, loading, editing } = args;\n        const intrinsicRect = this.rectIntrinsic(size, loading, editing);\n        // console.log(this.constructor.name, \"rects intrinsicRect\", intrinsicRect, args)\n        const { container } = this;\n        assertContainer(container);\n        return container.containerRects(args, intrinsicRect);\n    }\n    resetTiming(tweenable, quantize) {\n        const { timing } = this;\n        // console.log(\"resetTiming\", timing)\n        const track = this._track;\n        switch (timing) {\n            case Timing.Custom: {\n                // console.log(\"resetTiming\", this.frames)\n                if (isAboveZero(this.frames))\n                    break;\n                this.frames = Default.duration * (quantize || track.mash.quantize);\n                break;\n            }\n            case Timing.Container: {\n                const container = isContainer(tweenable) ? tweenable : this.container;\n                if (!container)\n                    break;\n                // if (!isUpdatableDuration(container)) break\n                this.frames = container.frames(quantize || track.mash.quantize);\n                break;\n            }\n            case Timing.Content: {\n                const content = isContent(tweenable) ? tweenable : this.content;\n                if (!content)\n                    break;\n                // if (!isUpdatableDuration(content)) break    \n                this.frames = content.frames(quantize || track.mash.quantize);\n                break;\n            }\n        }\n    }\n    selectType = SelectType.Clip;\n    selectables() { return [this, ...this.track.selectables()]; }\n    selectedItems(actions) {\n        const selected = [];\n        const { properties } = this;\n        const props = properties.filter(property => this.selectedProperty(property));\n        props.forEach(property => {\n            const { name } = property;\n            const isFrames = name === 'frames' || name === 'frame';\n            const undoValue = this.value(name);\n            const target = this;\n            selected.push({\n                value: undoValue,\n                selectType: SelectType.Clip, property,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    const options = { property, target, redoValue, undoValue,\n                        type: isFrames ? ActionType.ChangeFrame : ActionType.Change\n                    };\n                    actions.create(options);\n                }\n            });\n        });\n        return selected;\n    }\n    selectedProperty(property) {\n        const { name, type } = property;\n        switch (type) {\n            case DataType.ContainerId:\n            case DataType.ContentId: return false;\n        }\n        switch (name) {\n            case 'sizing': return !isAudio(this.content);\n            case 'timing': {\n                if (this.content.hasIntrinsicTiming)\n                    break;\n                return !!this.container?.hasIntrinsicSizing;\n            }\n            case 'frame': return !this.track.dense;\n            case 'frames': return this.timing === Timing.Custom;\n        }\n        return true;\n    }\n    setValue(value, name, property) {\n        super.setValue(value, name, property);\n        switch (name) {\n            case 'containerId': {\n                // console.log(this.constructor.name, \"setValue\", name, value, !!property)\n                if (this._container)\n                    this.containerInitialize(this._container.toJSON());\n                break;\n            }\n            case 'contentId': {\n                // console.log(this.constructor.name, \"setValue\", name, value, !!property)\n                if (this._content)\n                    this.contentInitialize(this._content.toJSON());\n                break;\n            }\n        }\n    }\n    // private _svgElement?: SVGSVGElement\n    // private get svgElement() { \n    //   return this._svgElement ||= svgElement() \n    // }\n    // private updateSvg(rect: Rect) {\n    //   svgSetDimensions(this.svgElement, rect)\n    // }\n    time(quantize) { return timeFromArgs(this.frame, quantize); }\n    timeRange(quantize) {\n        const { frame, frames } = this;\n        assertPositive(frame, \"timeRange frame\");\n        assertAboveZero(frames, \"timeRange frames\");\n        return timeRangeFromArgs(this.frame, quantize, this.frames);\n    }\n    timeRangeRelative(timeRange, quantize) {\n        const range = this.timeRange(quantize).scale(timeRange.fps);\n        const frame = Math.max(0, timeRange.frame - range.frame);\n        return timeRange.withFrame(frame);\n    }\n    toJSON() {\n        const json = super.toJSON();\n        const { container, content } = this;\n        json.content = content;\n        json.contentId = content.definitionId;\n        if (container) {\n            json.container = container;\n            json.containerId = container.definitionId;\n        }\n        else\n            json.containerId = \"\";\n        return json;\n    }\n    toString() {\n        return `[Clip ${this.label}]`;\n    }\n    _track;\n    get track() { return this._track; }\n    set track(value) { this._track = value; }\n    get trackNumber() {\n        const { track } = this;\n        return track ? track.index : -1;\n    }\n    set trackNumber(value) { if (value < 0)\n        delete this._track; }\n    get visible() {\n        return !!this.containerId;\n    }\n}\n\nclass ClipDefinitionClass extends DefinitionBase {\n    constructor(...args) {\n        super(...args);\n        this.properties.push(propertyInstance({\n            name: \"containerId\", type: DataType.ContainerId,\n            defaultValue: DefaultContainerId\n        }));\n        this.properties.push(propertyInstance({\n            name: \"contentId\", type: DataType.ContentId,\n            defaultValue: DefaultContentId\n        }));\n        this.properties.push(propertyInstance({\n            name: \"label\", type: DataType.String\n        }));\n        this.properties.push(propertyInstance({\n            name: \"sizing\", type: DataType.Sizing, defaultValue: Sizing.Content,\n            // group: DataGroup.Sizing,\n        }));\n        this.properties.push(propertyInstance({\n            name: \"timing\", type: DataType.Timing, defaultValue: Timing.Content,\n            group: DataGroup.Timing,\n        }));\n        this.properties.push(propertyInstance({\n            name: \"frame\",\n            type: DataType.Frame,\n            group: DataGroup.Timing,\n            defaultValue: Duration.None, min: 0, step: 1\n        }));\n        this.properties.push(propertyInstance({\n            name: \"frames\", type: DataType.Frame, defaultValue: Duration.Unknown,\n            min: 1, step: 1,\n            group: DataGroup.Timing,\n        }));\n    }\n    audible = false;\n    instanceArgs(object = {}) {\n        const args = super.instanceArgs(object);\n        const { containerId, contentId } = args;\n        const defaultContent = isUndefined(contentId) || contentId === DefaultContentId;\n        let defaultContainer = isUndefined(containerId) || containerId === DefaultContainerId;\n        if (args.sizing === Sizing.Content && defaultContent) {\n            // console.log(\"instanceArgs setting sizing to container\", object)\n            args.sizing = Sizing.Container;\n        }\n        if (args.sizing === Sizing.Container && defaultContainer) {\n            // console.log(\"instanceArgs setting sizing to preview\", object)\n            args.sizing = Sizing.Preview;\n        }\n        if (args.timing === Timing.Content && defaultContent) {\n            args.timing = Timing.Container;\n        }\n        if (args.timing === Timing.Container && defaultContainer) {\n            args.timing = Timing.Custom;\n        }\n        // console.log(\"instanceArgs\", args)\n        return args;\n    }\n    instanceFromObject(object = {}) {\n        return new ClipClass(this.instanceArgs(object));\n    }\n    streamable = false;\n    type = DefinitionType.Clip;\n    visible = false;\n}\n\nconst label = \"Visible\";\nconst type = \"visible\";\nconst id = \"com.moviemasher.clip.default\";\nconst containerId = \"com.moviemasher.container.default\";\nconst contentId = \"com.moviemasher.content.default\";\nvar clipDefaultJson = {\n  label: label,\n  type: type,\n  id: id,\n  containerId: containerId,\n  contentId: contentId\n};\n\nconst clipDefault = new ClipDefinitionClass(clipDefaultJson);\nconst clipDefaultId = clipDefault.id;\nconst clipDefaults = [clipDefault];\nconst clipDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id);\n    return new ClipDefinitionClass({ ...object, type: DefinitionType.Clip });\n};\nconst clipDefinitionFromId = (id) => {\n    const definition = clipDefaults.find(definition => definition.id === id);\n    if (definition)\n        return definition;\n    return clipDefinition({ id });\n};\nconst clipInstance = (object = {}) => {\n    const { definitionId = clipDefaultId } = object;\n    if (!definitionId)\n        throw Errors.id;\n    const definition = clipDefinitionFromId(definitionId);\n    const instance = definition.instanceFromObject(object);\n    return instance;\n};\nconst clipFromId = (id) => {\n    const definition = clipDefinitionFromId(id);\n    const instance = definition.instanceFromObject({ definitionId: id });\n    return instance;\n};\nFactories[DefinitionType.Clip] = {\n    definition: clipDefinition,\n    definitionFromId: clipDefinitionFromId,\n    fromId: clipFromId,\n    instance: clipInstance,\n    defaults: clipDefaults,\n};\n\nclass TrackClass extends PropertiedClass {\n    constructor(args) {\n        super();\n        const { clips, index: layer, dense } = args;\n        if (isPositive(layer))\n            this.index = layer;\n        this.dense = isDefined(dense) ? !!dense : !this.index;\n        this.properties.push(propertyInstance({ name: \"dense\", defaultValue: false }));\n        this.propertiesInitialize(args);\n        if (clips) {\n            this.clips.push(...clips.map(clip => {\n                const instance = clipInstance(clip);\n                instance.track = this;\n                return instance;\n            }));\n        }\n    }\n    addClips(clips, insertIndex = 0) {\n        let clipIndex = insertIndex || 0;\n        if (!this.dense)\n            clipIndex = 0; // ordered by clip.frame values\n        const origIndex = clipIndex; // note original, since it may decrease...\n        // build array of my clips excluding the clips we're inserting\n        const spliceClips = this.clips.filter((other, index) => {\n            const moving = clips.includes(other);\n            // insert index should be decreased when clip is moving and comes before\n            if (origIndex && moving && index < origIndex)\n                clipIndex -= 1;\n            return !moving;\n        });\n        // insert the clips we're adding at the correct index, then sort properly\n        spliceClips.splice(clipIndex, 0, ...clips);\n        this.sortClips(spliceClips);\n        arraySet(this.clips, spliceClips);\n    }\n    assureFrame(clips) {\n        const clipsArray = clips || this.clips;\n        let changed = false;\n        let endFrame = 0;\n        const ranges = [];\n        const { dense } = this;\n        clipsArray.forEach(clip => {\n            const { frame } = clip;\n            if (dense ? frame !== endFrame : ranges.some(range => range.includes(frame))) {\n                changed = true;\n                clip.frame = endFrame;\n            }\n            endFrame = clip.frame + clip.frames;\n            if (!dense)\n                ranges.push(clip.timeRange(1));\n        });\n        return changed;\n    }\n    assureFrames(quantize, clips) {\n        const suppliedClips = isDefined(clips);\n        const clipsArray = clips || this.clips;\n        // console.log(this.constructor.name, \"assureFrames\", clipsArray.length, \"clip(s)\")\n        clipsArray.forEach(clip => {\n            const { frames } = clip;\n            if (isAboveZero(frames))\n                return;\n            clip.resetTiming(undefined, quantize);\n            if (isAboveZero(clip.frames) || !suppliedClips)\n                return;\n            clip.frames = Math.floor(Default.duration * quantize);\n        });\n    }\n    clips = [];\n    dense = false;\n    frameForClipNearFrame(clip, frame = 0) {\n        if (this.dense)\n            return frame;\n        const others = this.clips.filter(other => clip !== other && other.endFrame > frame);\n        if (!others.length)\n            return frame;\n        const startFrame = clip.frame;\n        const endFrame = clip.endFrame;\n        const frames = endFrame - startFrame;\n        let lastFrame = frame;\n        others.find(clip => {\n            if (clip.frame >= lastFrame + frames)\n                return true;\n            lastFrame = clip.endFrame;\n        });\n        return lastFrame;\n    }\n    get frames() {\n        const { clips } = this;\n        const { length } = clips;\n        if (!length)\n            return Duration.None;\n        for (const clip of clips) {\n            const { frames: clipFrames } = clip;\n            switch (clipFrames) {\n                case Duration.Unknown:\n                case Duration.Unlimited: return clipFrames;\n            }\n        }\n        const clip = arrayLast(clips);\n        const { frame, frames } = clip;\n        return frame + frames;\n    }\n    _identifier;\n    get identifier() { return this._identifier ||= idGenerate('track'); }\n    index = 0;\n    _mash;\n    get mash() {\n        const { _mash } = this;\n        assertMash(_mash);\n        return _mash;\n    }\n    set mash(value) { this._mash = value; }\n    removeClips(clips) {\n        const newClips = this.clips.filter(other => !clips.includes(other));\n        assertTrue(newClips.length !== this.clips.length);\n        clips.forEach(clip => clip.trackNumber = -1);\n        this.sortClips(newClips);\n        arraySet(this.clips, newClips);\n    }\n    selectType = SelectType.Track;\n    selectables() { return [this, ...this.mash.selectables()]; }\n    selectedItems(actions) {\n        return this.properties.map(property => {\n            const undoValue = this.value(property.name);\n            const target = this;\n            return {\n                value: undoValue,\n                property, selectType: SelectType.Track,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    const options = { target, property, redoValue, undoValue };\n                    actions.create(options);\n                }\n            };\n        });\n    }\n    sortClips(clips) {\n        const sortClips = clips || this.clips;\n        const changed = this.assureFrame(sortClips);\n        sortClips.sort(sortByFrame);\n        return changed;\n    }\n    toJSON() {\n        const json = super.toJSON();\n        json.clips = this.clips;\n        return json;\n    }\n}\n\nconst trackInstance = (object) => new TrackClass(object);\n/**\n * @category Factory\n */\nconst TrackFactory = { instance: trackInstance };\n\nclass NonePreview extends PreviewClass {\n    get clips() { return []; }\n}\n\nclass MashClass extends EditedClass {\n    constructor(args) {\n        super(args);\n        const { createdAt, icon, id, label, frame, preloader, rendering, tracks, ...rest } = args;\n        this.dataPopulate(rest);\n        if (isPopulatedString(rendering))\n            this._rendering = rendering;\n        if (isPopulatedString(createdAt))\n            this.createdAt = createdAt;\n        if (isAboveZero(frame))\n            this._frame = frame;\n        if (isPopulatedArray(tracks))\n            tracks.forEach((trackObject, index) => {\n                const trackArgs = {\n                    dense: !index, ...trackObject, index\n                };\n                const track = trackInstance(trackArgs);\n                track.mash = this;\n                track.assureFrames(this.quantize);\n                track.sortClips();\n                this.tracks.push(track);\n            });\n        this.assureTrack();\n        this.tracks.sort(sortByIndex);\n        this._preview = new NonePreview({ mash: this, time: timeFromArgs() });\n        this.label ||= Default.mash.label;\n    }\n    addClipToTrack(clip, trackIndex = 0, insertIndex = 0, frame) {\n        const clipsArray = isArray(clip) ? clip : [clip];\n        const trackClips = this.trackClips(clipsArray, trackIndex);\n        this.emitIfFramesChange(() => {\n            trackClips.forEach(entry => {\n                const [index, clips] = entry;\n                const newTrack = this.tracks[index];\n                assertTrack(newTrack, 'track');\n                clips.forEach(clip => {\n                    const oldTrackNumber = clip.trackNumber;\n                    if (isPositive(oldTrackNumber) && oldTrackNumber !== index) {\n                        clip.track.removeClips([clip]);\n                    }\n                    if (isPositive(frame))\n                        clip.frame = frame;\n                    clip.track = newTrack;\n                });\n                newTrack.assureFrames(this.quantize, clips);\n                newTrack.addClips(clips, insertIndex);\n            });\n        });\n    }\n    addTrack(options = {}) {\n        if (!isPositive(options.index))\n            options.index = this.tracks.length;\n        const track = trackInstance(options);\n        track.mash = this;\n        this.tracks.push(track);\n        this.tracks.sort(sortByIndex);\n        this.emitter?.emit(EventType.Track);\n        return track;\n    }\n    assureTrack() {\n        if (!this.tracks.length) {\n            const trackArgs = { dense: true };\n            const track = trackInstance(trackArgs);\n            track.mash = this;\n            this.tracks.push(track);\n        }\n    }\n    _buffer = Default.mash.buffer;\n    get buffer() { return this._buffer; }\n    set buffer(value) {\n        if (!isAboveZero(value))\n            throw Errors.invalid.argument + 'buffer ' + value;\n        if (this._buffer !== value) {\n            this._buffer = value;\n            if (this._composition)\n                this.composition.buffer = value;\n        }\n    }\n    bufferStart() {\n        if (this._bufferTimer)\n            return;\n        this._bufferTimer = setInterval(() => {\n            if (this._paused)\n                return;\n            const options = {\n                editing: true, audible: true\n            };\n            this.loadPromiseUnlessBuffered(options);\n            const clips = this.clipsAudibleInTime(this.timeToBuffer);\n            this.composition.bufferClips(clips, this.quantize);\n        }, Math.round((this.buffer * 1000) / 2));\n    }\n    bufferStop() {\n        if (!this._bufferTimer)\n            return;\n        clearInterval(this._bufferTimer);\n        delete this._bufferTimer;\n    }\n    _bufferTimer;\n    changeTiming(propertied, property, value) {\n        this.emitIfFramesChange(() => {\n            propertied.setValue(value, property);\n        });\n    }\n    clearDrawInterval() {\n        if (!this.drawInterval)\n            return;\n        clearInterval(this.drawInterval);\n        this.drawInterval = undefined;\n    }\n    clearPreview() {\n        // console.log(this.constructor.name, \"clearPreview\")\n        delete this._preview;\n    }\n    clipIntersects(clip, range) {\n        if (!clip.frames)\n            return true;\n        return clip.timeRange(this.quantize).intersects(range);\n    }\n    get clips() {\n        return this.tracks.map(track => track.clips).flat();\n    }\n    clipsAudibleInTime(time) {\n        const { clips } = this;\n        const clipsAudible = clips.filter(clip => clip.mutable && clip.notMuted);\n        return this.filterIntersecting(clipsAudible, time);\n    }\n    clipsInTime(time) {\n        return this.filterIntersecting(this.clips, time);\n    }\n    clipsInTimeOfType(time, avType = AVType.Both) {\n        switch (avType) {\n            case AVType.Both: return this.clipsInTime(time);\n            case AVType.Audio: return this.clipsAudibleInTime(time);\n            case AVType.Video: return this.clipsVisibleInTime(time);\n        }\n    }\n    get clipsVisible() {\n        return this.clips.filter(clip => clip.container);\n    }\n    clipsVisibleInTime(time) {\n        return this.filterIntersecting(this.clipsVisible, time);\n    }\n    compositeVisible(time) {\n        this.drawingTime = time;\n        this.clearPreview();\n        this.emitter?.emit(EventType.Draw);\n    }\n    // private counter = 0\n    compositeVisibleRequest(time) {\n        // console.log(this.constructor.name, \"compositeVisibleRequest\", time)\n        requestAnimationFrame(() => {\n            // if (this.counter) console.timeEnd(`anim-frame-${this.counter}`)\n            // this.counter++\n            // console.time(`anim-frame-${this.counter}`)\n            this.compositeVisible(time);\n        });\n    }\n    _composition;\n    get composition() {\n        if (!this._composition) {\n            const options = {\n                buffer: this.buffer,\n                gain: this.gain,\n                preloader: this.preloader,\n            };\n            // console.log(this.constructor.name, \"composition creating\")\n            this._composition = new AudioPreview(options);\n        }\n        return this._composition;\n    }\n    get definitionIds() {\n        const { clips } = this;\n        const ids = clips.flatMap(clip => clip.definitionIds());\n        const set = [...new Set(ids)];\n        // console.log(this.constructor.name, \"definitionIds\", set.length)\n        return set;\n    }\n    destroy() {\n        this.paused = true;\n        this.clearDrawInterval();\n    }\n    draw() {\n        const { time } = this;\n        this.compositeVisible(time);\n    }\n    drawInterval;\n    drawRequest() {\n        // console.log(this.constructor.name, \"drawRequest\")\n        const { time } = this;\n        this.compositeVisibleRequest(time);\n    }\n    drawTime(time) {\n        // console.log(this.constructor.name, \"drawTime\")\n        const timeChange = time !== this.time;\n        this.drawnTime = time;\n        this.drawRequest();\n        this.emitter?.emit(timeChange ? EventType.Time : EventType.Loaded);\n    }\n    drawWhilePlayerNotPlaying() {\n        // console.log(this.constructor.name, \"drawWhilePlayerNotPlaying\")\n        const now = performance.now();\n        const ellapsed = now - this.drawnSeconds;\n        if (ellapsed < 1.0 / this.quantize)\n            return;\n        this.drawnSeconds = now;\n        const { time } = this;\n        const clips = this.clipsVisibleInTime(time);\n        const streamableClips = clips.filter(clip => clip.definition.streamable);\n        if (!streamableClips.length)\n            return;\n        const files = this.graphFilesUnloaded({ time, editing: true, visible: true });\n        const loading = files.length;\n        if (loading)\n            return;\n        this.drawRequest();\n    }\n    drawingTime;\n    drawnSeconds = 0;\n    drawnTime;\n    get duration() { return this.endTime.seconds; }\n    emitIfFramesChange(method) {\n        const origFrames = this.frames;\n        method();\n        const { frames } = this;\n        if (origFrames !== frames) {\n            this.emitter?.emit(EventType.Duration);\n            if (this.frame > frames)\n                this.seekToTime(timeFromArgs(frames, this.quantize));\n        }\n    }\n    get endTime() { return timeFromArgs(this.frames, this.quantize); }\n    filterGraphs(options = {}) {\n        const { background, time, avType, graphType, size, videoRate, ...rest } = options;\n        const definedTime = time || this.time;\n        const definedAVType = avType || (definedTime.isRange ? AVType.Both : AVType.Video);\n        const filterGraphsOptions = {\n            ...rest,\n            times: this.timeRanges(definedAVType, definedTime),\n            avType: definedAVType,\n            graphType: graphType || GraphType.Mash,\n            size: size || this.imageSize,\n            videoRate: videoRate || definedTime.fps,\n            mash: this,\n            background: background || this.color,\n        };\n        // console.log(this.constructor.name, \"filterGraphs filterGraphsOptions\", filterGraphsOptions.upload, options.upload)\n        return new FilterGraphsClass(filterGraphsOptions);\n    }\n    filterIntersecting(clips, time) {\n        const scaled = time.scale(this.quantize);\n        return clips.filter(clip => this.clipIntersects(clip, scaled));\n    }\n    _frame = 0; // initial frame supplied to constructor\n    get frame() { return this.time.scale(this.quantize, \"floor\").frame; }\n    get frames() {\n        const { tracks } = this;\n        if (tracks.length) {\n            const frames = this.tracks.map(track => track.frames);\n            if (isPositive(Math.min(...frames)))\n                return Math.max(0, ...frames);\n            return Duration.Unknown;\n        }\n        return Duration.None;\n    }\n    _gain = Default.mash.gain;\n    get gain() { return this._gain; }\n    set gain(value) {\n        if (!isPositive(value))\n            throw Errors.invalid.argument + 'gain ' + value;\n        if (this._gain !== value) {\n            this._gain = value;\n            if (this._composition)\n                this.composition.setGain(value, this.quantize);\n        }\n    }\n    graphFileOptions(options = {}) {\n        const { time, audible, visible, editing, streaming } = options;\n        const definedTime = time || this.time;\n        const { isRange } = definedTime;\n        const definedVisible = visible || !isRange;\n        const definedAudible = isRange && audible;\n        const args = {\n            editing,\n            streaming,\n            audible: definedAudible, visible: definedVisible,\n            time: definedTime,\n            quantize: this.quantize,\n        };\n        const okay = definedVisible || definedAudible;\n        // if (!okay) console.log(this.constructor.name, \"graphFileArgs\", args)\n        assertTrue(okay, \"audible || visible\");\n        return args;\n    }\n    editedGraphFiles(options) {\n        const args = this.graphFileOptions(options);\n        const { time, audible, visible } = args;\n        const { quantize } = this;\n        assertTime(time);\n        const scaled = time.scale(this.quantize);\n        const type = (audible && visible) ? AVType.Both : (audible ? AVType.Audio : AVType.Video);\n        const clips = this.clipsInTimeOfType(scaled, type);\n        return clips.flatMap(clip => {\n            const clipTime = clip.timeRange(quantize);\n            const graphFileArgs = {\n                ...args, clipTime, quantize, time\n            };\n            return clip.clipFileUrls(graphFileArgs);\n        });\n    }\n    graphFilesUnloaded(options) {\n        const files = this.editedGraphFiles(options);\n        if (!files.length)\n            return [];\n        const { preloader } = this;\n        return files.filter(file => !preloader.loadedFile(file));\n    }\n    handleDrawInterval() {\n        // console.log(this.constructor.name, \"handleDrawInterval\", this._playing)\n        // what time does the audio context think it is?\n        const { seconds } = this.composition;\n        // what time would masher consider to be in end frame?\n        const nextFrameTime = this.time.withFrame(this.time.frame);\n        // are we beyond the end of mash?\n        if (seconds >= this.endTime.seconds) {\n            // should we loop back to beginning?\n            if (this.loop)\n                this.seekToTime(this.time.withFrame(0));\n            else {\n                this.paused = true;\n                this.emitter?.emit(EventType.Ended);\n            }\n        }\n        else {\n            // are we at or beyond the next frame?\n            if (seconds >= nextFrameTime.seconds) {\n                const compositionTime = timeFromSeconds(seconds, this.time.fps);\n                // go to where the audio context thinks we are\n                this.drawTime(compositionTime);\n            }\n        }\n    }\n    _layer;\n    get layer() { return this._layer; }\n    set layer(value) { this._layer = value; }\n    loadPromise(args = {}) {\n        const promise = this.loadPromiseUnlessBuffered(args);\n        // console.log(this.constructor.name, \"loadPromise\", args, \"loadPromiseUnlessBuffered\", promise)\n        return promise || Promise.resolve();\n    }\n    loadingPromises = [];\n    get loading() { return !!this.loadingPromises.length; }\n    loadPromiseUnlessBuffered(options = {}) {\n        options.time ||= this.timeToBuffer;\n        const files = this.graphFilesUnloaded(options);\n        if (!files.length) {\n            // console.log(this.constructor.name, \"loadPromiseUnlessBuffered no unloaded graph files\")\n            return;\n        }\n        const promise = this.preloader.loadFilesPromise(files);\n        const removedPromise = promise.then(() => {\n            const index = this.loadingPromises.indexOf(promise);\n            if (index < 0)\n                throw Errors.internal + \"couldn't find promise~\";\n            this.loadingPromises.splice(index, 1);\n        });\n        this.loadingPromises.push(promise);\n        return removedPromise;\n    }\n    loop = false;\n    get mashes() { return [this]; }\n    _paused = true;\n    get paused() { return this._paused; }\n    set paused(value) {\n        const paused = value || !this.frames;\n        // console.log(this.constructor.name, \"set paused\", forcedValue)\n        if (this._paused === paused)\n            return;\n        this._paused = paused;\n        if (paused) {\n            this.playing = false;\n            this.bufferStop();\n            if (this._bufferTimer) {\n                clearInterval(this._bufferTimer);\n                delete this._bufferTimer;\n            }\n            this.composition.stopContext();\n            this.emitter?.emit(EventType.Pause);\n        }\n        else {\n            this.composition.startContext();\n            this.bufferStart();\n            const promise = this.loadPromiseUnlessBuffered({\n                editing: true, audible: true, visible: true\n            });\n            if (promise)\n                promise.then(() => {\n                    this.playing = true;\n                });\n            else\n                this.playing = true;\n            // console.log(\"Mash emit\", EventType.Play)\n            this.emitter?.emit(EventType.Play);\n        }\n    }\n    _playing = false;\n    get playing() { return this._playing; }\n    set playing(value) {\n        // console.trace(this.constructor.name, \"set playing\", value)\n        if (this._playing !== value) {\n            this._playing = value;\n            if (value) {\n                const { quantize, time } = this;\n                const clips = this.clipsAudibleInTime(this.timeToBuffer);\n                // console.log(\"playing\", value, this.time, clips.length)\n                if (!this.composition.startPlaying(time, clips, quantize)) {\n                    // console.log(this.constructor.name, \"playing audio not cached on first try\", this.time, clips.length)\n                    // audio was not cached\n                    const currentClips = this.clipsAudibleInTime(this.timeToBuffer);\n                    if (!this.composition.startPlaying(time, currentClips, quantize)) {\n                        // console.log(this.constructor.name, \"playing audio not cached on second try\", this.time, currentClips.length)\n                        this._playing = false;\n                        return;\n                    }\n                }\n                this.emitter?.emit(EventType.Playing);\n                this.setDrawInterval();\n            }\n            else {\n                this.composition.stopPlaying();\n                this.clearDrawInterval();\n            }\n        }\n    }\n    _preview;\n    preview(options) {\n        return this._preview ||= this.previewInitialize(options);\n    }\n    previewInitialize(options) {\n        return new PreviewClass(this.previewArgs(options));\n    }\n    previewArgs(options = {}) {\n        const { editor } = options;\n        const clip = editor?.selection.clip;\n        const selectedClip = isClip(clip) ? clip : undefined;\n        const { drawingTime, time, quantize } = this;\n        const svgTime = drawingTime || time;\n        const args = {\n            selectedClip,\n            time: svgTime.scale(quantize),\n            mash: this,\n            ...options,\n        };\n        if (isUndefined(options.background))\n            args.background = this.color;\n        return args;\n    }\n    putPromise() {\n        const { quantize, preloader } = this;\n        // make sure we've loaded fonts in order to calculate intrinsic rect\n        const files = this.clips.flatMap(clip => {\n            const { container } = clip;\n            if (isTextContainer(container)) {\n                if (!container.intrinsicsKnown({ editing: true, size: true })) {\n                    const args = {\n                        editing: true, visible: true, quantize,\n                        time: clip.time(quantize), clipTime: clip.timeRange(quantize)\n                    };\n                    return container.fileUrls(args);\n                }\n            }\n            return [];\n        });\n        return preloader.loadFilesPromise(files);\n    }\n    removeClipFromTrack(clip) {\n        const clips = isArray(clip) ? clip : [clip];\n        this.emitIfFramesChange(() => {\n            clips.forEach(clip => {\n                const track = clip.track;\n                track.removeClips([clip]);\n            });\n        });\n    }\n    removeTrack(index) {\n        const trackIndex = isPositive(index) ? index : this.tracks.length - 1;\n        assertPositive(trackIndex);\n        this.emitIfFramesChange(() => { this.tracks.splice(trackIndex, 1); });\n        this.emitter?.emit(EventType.Track);\n    }\n    _rendering = '';\n    get rendering() { return this._rendering; }\n    set rendering(value) {\n        this._rendering = value;\n        this.emitter?.emit(EventType.Render);\n    }\n    restartAfterStop(time, paused, seeking) {\n        // console.log(this.constructor.name, \"restartAfterStop\", time, this.time)\n        if (time.equalsTime(this.time)) { // otherwise we must have gotten a seek call\n            if (seeking) {\n                delete this.seekTime;\n                this.emitter?.emit(EventType.Seeked);\n            }\n            this.drawTime(time);\n            if (!paused) {\n                // this.composition.startContext()\n                this.playing = true;\n            }\n        }\n    }\n    reload() { return this.stopLoadAndDraw(); }\n    seekTime;\n    seekToTime(time) {\n        if (this.seekTime !== time) {\n            this.seekTime = time;\n            this.emitter?.emit(EventType.Seeking);\n            this.emitter?.emit(EventType.Time);\n        }\n        return this.stopLoadAndDraw(true);\n    }\n    selectType = SelectType.Mash;\n    selectables() {\n        const selectables = [this];\n        if (this._layer)\n            selectables.push(...this.layer.selectables());\n        return selectables;\n    }\n    selectedItems(actions) {\n        return this.properties.map(property => {\n            const undoValue = this.value(property.name);\n            const target = this;\n            return {\n                value: undoValue,\n                selectType: SelectType.Mash, property,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    const options = { property, target, redoValue, undoValue };\n                    actions.create(options);\n                }\n            };\n        });\n    }\n    setDrawInterval() {\n        if (this.drawInterval)\n            return;\n        this.clearDrawInterval();\n        this.drawInterval = setInterval(() => { this.handleDrawInterval(); }, 500 / this.time.fps);\n    }\n    stopLoadAndDraw(seeking) {\n        const { time, paused, playing } = this;\n        if (playing)\n            this.playing = false;\n        const promise = this.loadPromiseUnlessBuffered({\n            editing: true, visible: true, audible: playing\n        });\n        if (promise)\n            return promise.then(() => {\n                this.restartAfterStop(time, paused, seeking);\n            });\n        this.restartAfterStop(time, paused, seeking);\n    }\n    previewItems(options) {\n        return this.preview(options).previewItemsPromise;\n    }\n    get time() {\n        return this.seekTime || this.drawnTime || timeFromArgs(this._frame, this.quantize);\n    }\n    get timeRange() {\n        const { endTime, time } = this;\n        const scaled = endTime.scale(time.fps);\n        const range = timeRangeFromTime(time, scaled.frame);\n        // console.log(this.constructor.name, \"timeRange\", range, time, endTime)\n        return range;\n    }\n    timeRanges(avType, startTime) {\n        // const { time: startTime, graphType, avType } = args\n        const time = startTime || this.time;\n        const { quantize } = this;\n        const start = time.scale(this.quantize, 'floor');\n        const end = start.isRange ? start.timeRange.endTime : undefined;\n        const fullRangeClips = this.clipsInTimeOfType(time, avType);\n        const { length } = fullRangeClips;\n        if (!length)\n            return [];\n        if (length === 1 || !start.isRange || avType === AVType.Audio)\n            return [time];\n        const frames = new Set();\n        fullRangeClips.forEach(clip => {\n            frames.add(Math.max(clip.frame, start.frame));\n            frames.add(Math.min(clip.frame + clip.frames, end.frame));\n        });\n        const uniqueFrames = [...frames].sort((a, b) => a - b);\n        let frame = uniqueFrames.shift();\n        const ranges = uniqueFrames.map(uniqueFrame => {\n            const range = timeRangeFromArgs(frame, quantize, uniqueFrame - frame);\n            frame = uniqueFrame;\n            return range;\n        });\n        return ranges;\n    }\n    get timeToBuffer() {\n        const { time, quantize, buffer, paused } = this;\n        if (paused)\n            return timeFromArgs(time.scale(quantize, 'floor').frame, quantize);\n        return timeRangeFromTimes(time, timeFromSeconds(buffer + time.seconds, time.fps));\n    }\n    toJSON() {\n        const json = super.toJSON();\n        json.tracks = this.tracks;\n        if (this._rendering)\n            json.rendering = this.rendering;\n        return json;\n    }\n    trackClips(clips, trackIndex) {\n        const oneTrack = isPositive(trackIndex);\n        if (oneTrack)\n            return [[trackIndex, clips]];\n        let index = this.tracks.length - clips.length;\n        return clips.map(clip => [index++, [clip]]);\n    }\n    tracks = [];\n}\n\nconst mashInstance = (object = {}) => new MashClass(object);\nconst isMashClass = (value) => value instanceof MashClass;\nfunction assertMashClass(value) {\n    if (!isMashClass(value))\n        throw new Error(\"expected MashClass\");\n}\n\nclass LayerClass extends PropertiedClass {\n    constructor(args) {\n        super();\n        this.properties.push(propertyInstance({ name: 'label', type: DataType.String }));\n        this.propertiesInitialize(args);\n    }\n    _cast;\n    get cast() { return this._cast; }\n    set cast(value) { this._cast = value; }\n    _id;\n    get id() { return this._id ||= idGenerate('layer'); }\n    get mashes() { throw Errors.unimplemented + 'mashes'; }\n    selectType = SelectType.Layer;\n    selectables() { return [this, ...this.cast.selectables()]; }\n    selectedItems(actions) {\n        return this.properties.map(property => {\n            const undoValue = this.value(property.name);\n            const target = this;\n            return {\n                value: undoValue,\n                selectType: SelectType.Layer, property,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    const options = { property, target, redoValue, undoValue };\n                    actions.create(options);\n                }\n            };\n        });\n    }\n    toJSON() {\n        const json = super.toJSON();\n        json.type = this.type;\n        json.triggers = this.triggers;\n        return json;\n    }\n    triggers = [];\n    type;\n}\n\nclass LayerFolderClass extends LayerClass {\n    constructor(args) {\n        super(args);\n        // propertiesInitialize doesn't set defaults\n        const { label, layers, collapsed } = args;\n        if (!label)\n            this.label = Default.label;\n        this.collapsed = collapsed;\n        this.layers = layers;\n    }\n    collapsed;\n    layers;\n    get mashes() {\n        return this.layers.flatMap(layer => layer.mashes);\n    }\n    toJSON() {\n        const json = super.toJSON();\n        json.layers = this.layers;\n        json.collapsed = this.collapsed;\n        return json;\n    }\n    type = LayerType.Folder;\n}\n\nconst DirectionLabels = [\n    \"top\",\n    \"right\",\n    \"bottom\",\n    \"left\",\n    \"top right\",\n    \"bottom right\",\n    \"bottom left\",\n    \"top left\",\n];\n\nclass LayerMashClass extends LayerClass {\n    constructor(args) {\n        super(args);\n        const { mash } = args;\n        // console.log(\"LayerMashClass\", this.label, mash.label)\n        if (!this.label)\n            this.label = mash.label;\n        this.mash = mash;\n        mash.layer = this;\n    }\n    get mashes() { return [this.mash]; }\n    mash;\n    toJSON() {\n        const json = super.toJSON();\n        json.mash = this.mash;\n        return json;\n    }\n    type = LayerType.Mash;\n}\n\nconst isLayerObject = (value) => {\n    return isObject(value) && \"type\" in value && isLayerType(value.type);\n};\nconst isLayerFolderObject = (value) => {\n    return isLayerObject(value) && value.type === LayerType.Folder;\n};\nconst isLayerMashObject = (value) => {\n    return isLayerObject(value) && value.type === LayerType.Mash;\n};\n\n({ type: LayerType.Folder, collapsed: false, layers: [] });\n({ type: LayerType.Mash, mash: {} });\nconst layerFolderInstance = (object, cast) => {\n    const { preloader } = object;\n    object.layers ||= [];\n    const args = {\n        ...object,\n        layers: object.layers.map(layer => layerInstance({ preloader, ...layer }))\n    };\n    return new LayerFolderClass(args);\n};\nconst layerMashInstance = (object, cast) => {\n    const { preloader } = object;\n    object.mash ||= {};\n    const mash = mashInstance({ preloader, ...object.mash });\n    const args = {\n        ...object,\n        mash\n    };\n    return new LayerMashClass(args);\n};\nconst layerInstance = (layerObject, cast) => {\n    if (isLayerMashObject(layerObject))\n        return layerMashInstance(layerObject);\n    if (isLayerFolderObject(layerObject))\n        return layerFolderInstance(layerObject);\n    throw new Error(\"expected LayerObject\");\n};\nconst isLayer = (value) => value instanceof LayerClass;\nfunction assertLayer(value) {\n    if (!isLayer(value))\n        throw \"expected Layer\";\n}\nconst isLayerMash = (value) => value instanceof LayerMashClass;\nfunction assertLayerMash(value) {\n    if (!isLayerMash(value))\n        throw \"expected LayerMash\";\n}\nconst isLayerFolder = (value) => value instanceof LayerFolderClass;\nfunction assertLayerFolder(value) {\n    if (!isLayerFolder(value))\n        throw \"expected LayerFolder\";\n}\n\nconst CastLayerFolders = (layers) => {\n    return layers.flatMap(layer => {\n        if (isLayerFolder(layer)) {\n            return [layer, ...CastLayerFolders(layer.layers)];\n        }\n        return [];\n    });\n};\nconst CastPositionIndex = (index, droppingPosition) => {\n    if (droppingPosition === DroppingPosition.After)\n        return index + 1;\n    return index;\n};\nconst CastFindLayerFolder = (layer, layers) => {\n    if (layers.includes(layer))\n        return;\n    const layerFolders = CastLayerFolders(layers);\n    return layerFolders.find(layerFolder => layerFolder.layers.includes(layer));\n};\nconst CastLayersAndIndex = (layers, layerAndPosition) => {\n    const { layer, position = DroppingPosition.At } = layerAndPosition;\n    const numeric = isNumber(position);\n    const defined = !!layer;\n    const folder = defined && isLayerFolder(layer);\n    const index = numeric ? position : 0;\n    if (!defined || numeric)\n        return {\n            index: index, layers: folder ? layer.layers : layers\n        };\n    if (folder && position === DroppingPosition.At)\n        return {\n            index: 0, layers: layer.layers\n        };\n    const layerFolder = CastFindLayerFolder(layer, layers);\n    if (!layerFolder)\n        return { index, layers };\n    const { layers: folderLayers } = layerFolder;\n    const currentIndex = folderLayers.indexOf(layer);\n    if (currentIndex < 0)\n        throw new Error(Errors.internal);\n    return { layers: folderLayers, index: CastPositionIndex(currentIndex, position) };\n};\nclass CastClass extends EditedClass {\n    constructor(args) {\n        super(args);\n        const { createdAt, icon, id, label, definitions, layers, preloader, ...rest } = args;\n        this.dataPopulate(rest);\n        if (isPopulatedArray(layers))\n            this.layers.push(...layers.map(object => this.createLayer(object)));\n        this.label ||= Default.cast.label;\n    }\n    addLayer(layer, layerAndPosition = {}) {\n        const { layers, index } = CastLayersAndIndex(this.layers, layerAndPosition);\n        layers.splice(index, 0, layer);\n    }\n    _buffer = Default.cast.buffer;\n    get buffer() { return this._buffer; }\n    set buffer(value) {\n        if (!isAboveZero(value))\n            throw Errors.invalid.argument + 'buffer ' + value;\n        if (this._buffer !== value) {\n            this._buffer = value;\n            this.mashes.forEach(mash => { mash.buffer = value; });\n        }\n    }\n    createLayer(layerObject) {\n        const { preloader } = this;\n        const object = {\n            preloader,\n            ...layerObject\n        };\n        const layer = layerInstance(object);\n        assertLayer(layer);\n        layer.cast = this;\n        return layer;\n    }\n    destroy() {\n        this.mashes.forEach(mash => mash.destroy());\n    }\n    emitterChanged() {\n        this.mashes.forEach(mash => mash.emitter = this.emitter);\n    }\n    editedGraphFiles(args) {\n        return this.mashes.flatMap(mash => mash.editedGraphFiles(args));\n    }\n    get imageSize() { return super.imageSize; }\n    set imageSize(value) {\n        super.imageSize = value;\n        const { imageSize } = this;\n        this.mashes.forEach(mash => { mash.imageSize = imageSize; });\n    }\n    layers = [];\n    get layerFolders() {\n        return CastLayerFolders(this.layers);\n    }\n    loadPromise(args) {\n        return Promise.all(this.mashes.map(mash => mash.loadPromise(args))).then(EmptyMethod);\n    }\n    get loading() {\n        return this.mashes.some(mash => mash.loading);\n    }\n    get mashes() { return this.layers.flatMap(layer => layer.mashes); }\n    moveLayer(layer, layerAndPosition) {\n        const result = this.removeLayer(layer);\n        this.addLayer(layer, layerAndPosition);\n        return result;\n    }\n    putPromise() {\n        return Promise.all(this.mashes.map(mash => mash.putPromise())).then(EmptyMethod);\n    }\n    reload() {\n        // TODO: reload mashes?\n        return;\n    }\n    removeLayer(layer) {\n        const layerFolder = CastFindLayerFolder(layer, this.layers);\n        const layers = layerFolder?.layers || this.layers;\n        const index = layers.indexOf(layer);\n        if (index < 0) {\n            console.error(\"removeLayer\", index, layers.length, layer.label, layerFolder?.label);\n            throw new Error(Errors.internal);\n        }\n        layers.splice(index, 1);\n        return { position: index, layer: layerFolder };\n    }\n    selectType = SelectType.Cast;\n    selectables() { return [this]; }\n    selectedItems(actions) {\n        return this.properties.map(property => {\n            const undoValue = this.value(property.name);\n            const target = this;\n            return {\n                value: undoValue,\n                selectType: SelectType.Cast, property,\n                changeHandler: (property, redoValue) => {\n                    assertPopulatedString(property);\n                    const options = { property, target, redoValue, undoValue };\n                    actions.create(options);\n                },\n            };\n        });\n    }\n    setValue(value, name, property) {\n        super.setValue(value, name, property);\n        if (property)\n            return;\n        switch (name) {\n            case 'color': {\n                this.mashes.forEach(mash => mash.setValue(value, name, property));\n                break;\n            }\n        }\n    }\n    previewItems(args) {\n        const { mashes, imageSize } = this;\n        const allSvgs = [];\n        const { background = this.color } = args;\n        const mashArgs = { ...args, color: '' };\n        const element = svgElement(imageSize, svgPolygonElement(imageSize, '', background));\n        let promise = Promise.resolve([element]);\n        arrayReversed(mashes).forEach((mash) => {\n            promise = promise.then(svgs => {\n                allSvgs.push(...svgs);\n                return mash.previewItems(mashArgs);\n            });\n        });\n        return promise.then(svgs => {\n            allSvgs.push(...svgs);\n            return allSvgs;\n        });\n    }\n    toJSON() {\n        const json = super.toJSON();\n        json.layers = this.layers;\n        return json;\n    }\n}\n\nconst castInstance = (object = {}, preloader) => {\n    const castArgs = { ...object, preloader };\n    return new CastClass(castArgs);\n};\nconst isCast = (value) => value instanceof CastClass;\nfunction assertCast(value) {\n    if (!isCast(value))\n        throw new Error(\"expected Cast\");\n}\n\nconst isEdited = (value) => {\n    return isMash(value) || isCast(value);\n};\nfunction assertEdited(value) {\n    if (!isEdited(value))\n        throwError(value, 'Edited');\n}\n\nclass Action {\n    constructor(object) {\n        const { redoSelection, type, undoSelection } = object;\n        this.redoSelection = redoSelection;\n        this.type = type;\n        this.undoSelection = undoSelection;\n    }\n    get cast() {\n        const { cast } = this.redoSelection;\n        if (isCast(cast))\n            return cast;\n        const { cast: undoCast } = this.undoSelection;\n        assertCast(undoCast);\n        return undoCast;\n    }\n    done = false;\n    get mash() {\n        const { mash } = this.redoSelection;\n        if (isMash(mash))\n            return mash;\n        const { mash: undoMash } = this.undoSelection;\n        assertMash(undoMash);\n        return undoMash;\n    }\n    redo() {\n        this.redoAction();\n        this.done = true;\n    }\n    redoAction() { throw Errors.unimplemented + 'redoAction'; }\n    redoSelection;\n    get selection() {\n        if (this.done)\n            return this.redoSelection;\n        return this.undoSelection;\n    }\n    type;\n    undo() {\n        this.undoAction();\n        this.done = false;\n    }\n    undoAction() { throw Errors.unimplemented + 'undoAction'; }\n    undoSelection;\n}\nconst isAction = (value) => value instanceof Action;\nfunction assertAction(value) {\n    if (!isAction(value))\n        throw new Error('expected Action');\n}\nconst isActionInit = (value) => isAction(value.action);\nconst isActionEvent = (value) => {\n    return isCustomEvent(value) && value.detail;\n};\n\n/**\n * @category Action\n */\nclass AddTrackAction extends Action {\n    constructor(object) {\n        super(object);\n        const { createTracks } = object;\n        this.createTracks = createTracks;\n    }\n    createTracks;\n    redoAction() {\n        for (let i = 0; i < this.createTracks; i += 1) {\n            this.mash.addTrack();\n        }\n    }\n    undoAction() {\n        for (let i = 0; i < this.createTracks; i += 1) {\n            this.mash.removeTrack();\n        }\n    }\n}\n\n/**\n * @category Action\n */\nclass AddClipToTrackAction extends AddTrackAction {\n    constructor(object) {\n        super(object);\n        const { clips, insertIndex, trackIndex, redoFrame, undoFrame } = object;\n        this.clips = clips;\n        this.insertIndex = insertIndex;\n        this.trackIndex = trackIndex;\n        this.redoFrame = redoFrame;\n        this.undoFrame = undoFrame;\n    }\n    clips;\n    insertIndex;\n    trackIndex;\n    get track() { return this.mash.tracks[this.trackIndex]; }\n    redoAction() {\n        super.redoAction();\n        const { mash, redoFrame, trackIndex, insertIndex, clips } = this;\n        mash.addClipToTrack(clips, trackIndex, insertIndex, redoFrame);\n    }\n    redoFrame;\n    undoAction() {\n        const { mash, clips } = this;\n        mash.removeClipFromTrack(clips);\n        super.undoAction();\n    }\n    undoFrame;\n}\n\n/**\n * @category Action\n */\nclass AddEffectAction extends Action {\n    constructor(object) {\n        super(object);\n        const { effect, effects, index } = object;\n        this.effect = effect;\n        this.effects = effects;\n        this.index = index;\n    }\n    effect;\n    effects;\n    index;\n    redoAction() { this.effects.splice(this.index, 0, this.effect); }\n    undoAction() { this.effects.splice(this.index, 1); }\n}\n\nconst isChangeActionObject = (value) => {\n    return isObject(value) && \"target\" in value && \"property\" in value;\n};\n/**\n * @category Action\n */\nclass ChangeAction extends Action {\n    constructor(object) {\n        super(object);\n        const { property, redoValue, target, undoValue } = object;\n        this.property = property;\n        this.redoValue = redoValue;\n        this.target = target;\n        this.undoValue = undoValue;\n    }\n    property;\n    redoValue;\n    target;\n    undoValue;\n    get redoValueNumeric() { return Number(this.redoValue); }\n    get undoValueNumeric() { return Number(this.undoValue); }\n    redoAction() {\n        this.target.setValue(this.redoValue, this.property);\n    }\n    undoAction() {\n        this.target.setValue(this.undoValue, this.property);\n    }\n    updateAction(object) {\n        // console.log(this.constructor.name, \"updateAction\", object)\n        const { redoValue } = object;\n        this.redoValue = redoValue;\n        this.redo();\n    }\n}\nconst isChangeAction = (value) => (value instanceof ChangeAction);\nfunction assertChangeAction(value) {\n    if (!isChangeAction(value))\n        throw new Error('expected ChangeAction');\n}\n\n/**\n * @category Action\n */\nclass ChangeFramesAction extends ChangeAction {\n    constructor(object) {\n        super(object);\n    }\n    redoAction() {\n        this.mash.changeTiming(this.target, this.property, this.redoValueNumeric);\n    }\n    undoAction() {\n        this.mash.changeTiming(this.target, this.property, this.undoValueNumeric);\n    }\n}\n\n/**\n * @category Action\n */\nclass MoveClipAction extends AddTrackAction {\n    constructor(object) {\n        super(object);\n        const { clip, insertIndex, redoFrame, trackIndex, undoFrame, undoInsertIndex, undoTrackIndex } = object;\n        this.clip = clip;\n        this.insertIndex = insertIndex;\n        this.redoFrame = redoFrame;\n        this.trackIndex = trackIndex;\n        this.undoFrame = undoFrame;\n        this.undoInsertIndex = undoInsertIndex;\n        this.undoTrackIndex = undoTrackIndex;\n    }\n    clip;\n    insertIndex;\n    trackIndex;\n    undoTrackIndex;\n    undoInsertIndex;\n    undoFrame;\n    redoFrame;\n    addClip(trackIndex, insertIndex, frame) {\n        this.mash.addClipToTrack(this.clip, trackIndex, insertIndex, frame);\n    }\n    redoAction() {\n        super.redoAction();\n        this.addClip(this.trackIndex, this.insertIndex, this.redoFrame);\n    }\n    undoAction() {\n        this.addClip(this.undoTrackIndex, this.undoInsertIndex, this.undoFrame);\n        super.undoAction();\n    }\n}\n\n/**\n * @category Action\n */\nclass MoveEffectAction extends Action {\n    constructor(object) {\n        super(object);\n        const { effects, redoEffects, undoEffects } = object;\n        this.effects = effects;\n        this.redoEffects = redoEffects;\n        this.undoEffects = undoEffects;\n    }\n    effects;\n    redoEffects;\n    redoAction() {\n        this.effects.splice(0, this.effects.length, ...this.redoEffects);\n    }\n    undoAction() {\n        this.effects.splice(0, this.effects.length, ...this.undoEffects);\n    }\n    undoEffects;\n}\n\n/**\n * @category Action\n */\nclass RemoveClipAction extends Action {\n    constructor(object) {\n        super(object);\n        const { clip, index, track } = object;\n        this.clip = clip;\n        this.index = index;\n        this.track = track;\n    }\n    track;\n    clip;\n    index;\n    get trackIndex() { return this.track.index; }\n    redoAction() {\n        this.mash.removeClipFromTrack(this.clip);\n    }\n    undoAction() {\n        this.mash.addClipToTrack(this.clip, this.trackIndex, this.index);\n    }\n}\n\n/**\n * @category Action\n */\nclass AddLayerAction extends Action {\n    constructor(object) {\n        super(object);\n        const { layerAndPosition } = object;\n        if (layerAndPosition)\n            this.layerAndPosition = layerAndPosition;\n    }\n    layerAndPosition;\n    get layer() {\n        const { layer } = this.redoSelection;\n        assertLayer(layer);\n        return layer;\n    }\n    redoAction() { this.cast.addLayer(this.layer, this.layerAndPosition); }\n    undoAction() { this.cast.removeLayer(this.layer); }\n}\n\n/**\n * @category Action\n */\nclass RemoveLayerAction extends Action {\n    get layer() {\n        const { layer } = this.redoSelection;\n        assertLayer(layer);\n        return layer;\n    }\n    layerAndPosition;\n    redoAction() { this.layerAndPosition = this.cast.removeLayer(this.layer); }\n    undoAction() { this.cast.addLayer(this.layer, this.layerAndPosition); }\n}\n\n/**\n * @category Action\n */\nclass MoveLayerAction extends AddLayerAction {\n    get layer() {\n        const { layer } = this.redoSelection;\n        assertLayer(layer);\n        return layer;\n    }\n    undoLayerAndPosition;\n    redoAction() { this.undoLayerAndPosition = this.cast.moveLayer(this.layer, this.layerAndPosition); }\n    undoAction() { this.cast.moveLayer(this.layer, this.undoLayerAndPosition); }\n}\n\n/**\n * @category Action\n */\nclass ChangeMultipleAction extends ChangeAction {\n    constructor(object) {\n        const { redoValues, undoValues } = object;\n        super(object);\n        this.undoValues = undoValues;\n        this.redoValues = redoValues;\n    }\n    redoAction() {\n        const { target, redoValues } = this;\n        Object.entries(redoValues).forEach(([property, value]) => {\n            target.setValue(value, property);\n        });\n    }\n    redoValues;\n    undoAction() {\n        const { target, undoValues } = this;\n        Object.entries(undoValues).forEach(([property, value]) => {\n            target.setValue(value, property);\n        });\n    }\n    updateAction(object) {\n        const { redoValues } = object;\n        this.redoValues = redoValues;\n        this.redo();\n    }\n    undoValues;\n}\n\nconst actionInstance = (object) => {\n    const { type } = object;\n    if (!isPopulatedString(type))\n        throw Errors.type + JSON.stringify(object);\n    switch (type) {\n        case ActionType.AddClipToTrack: return new AddClipToTrackAction(object);\n        case ActionType.AddEffect: return new AddEffectAction(object);\n        case ActionType.AddLayer: return new AddLayerAction(object);\n        case ActionType.AddTrack: return new AddTrackAction(object);\n        case ActionType.Change: return new ChangeAction(object);\n        case ActionType.ChangeFrame: return new ChangeFramesAction(object);\n        case ActionType.ChangeMultiple: return new ChangeMultipleAction(object);\n        case ActionType.MoveClip: return new MoveClipAction(object);\n        case ActionType.MoveEffect: return new MoveEffectAction(object);\n        case ActionType.MoveLayer: return new MoveLayerAction(object);\n        case ActionType.RemoveClip: return new RemoveClipAction(object);\n        case ActionType.RemoveLayer: return new RemoveLayerAction(object);\n        default: throw Errors.type + type;\n    }\n};\nconst ActionFactory = {\n    createFromObject: actionInstance\n};\n\nclass Actions {\n    editor;\n    constructor(editor) {\n        this.editor = editor;\n    }\n    add(action) {\n        const remove = this.instances.length - (this.index + 1);\n        if (isPositive(remove))\n            this.instances.splice(this.index + 1, remove);\n        this.instances.push(action);\n    }\n    get canRedo() { return this.index < this.instances.length - 1; }\n    get canSave() { return this.canUndo; }\n    get canUndo() { return this.index > -1; }\n    create(object) {\n        const { editor } = this;\n        const { undoSelection, redoSelection, type = ActionType.Change, ...rest } = object;\n        const clone = {\n            ...rest,\n            type,\n            undoSelection: undoSelection || { ...editor.selection.object },\n            redoSelection: redoSelection || { ...editor.selection.object },\n        };\n        if (isChangeActionObject(object) && this.currentActionLast) {\n            const { currentAction } = this;\n            if (isChangeAction(currentAction)) {\n                const { target, property } = object;\n                if (currentAction.target === target && currentAction.property === property) {\n                    currentAction.updateAction(object);\n                    editor.handleAction(currentAction);\n                    return;\n                }\n            }\n        }\n        const action = actionInstance(clone);\n        this.add(action);\n        editor.handleAction(this.redo());\n    }\n    get currentAction() { return this.instances[this.index]; }\n    get currentActionLast() { return this.canUndo && !this.canRedo; }\n    destroy() {\n        this.index = -1;\n        this.instances.splice(0, this.instances.length);\n    }\n    index = -1;\n    instances = [];\n    redo() {\n        this.index += 1;\n        const action = this.currentAction;\n        assertAction(action);\n        action.redo();\n        return action;\n    }\n    reusableChangeAction(target, property) {\n        if (!this.currentActionLast)\n            return;\n        const action = this.currentAction;\n        if (isChangeAction(action) && action.target === target && action.property === property) {\n            return action;\n        }\n    }\n    save() {\n        this.instances.splice(0, this.index + 1);\n        this.index = -1;\n    }\n    get selection() { return this.editor.selection; }\n    undo() {\n        const action = this.currentAction;\n        assertAction(action);\n        this.index -= 1;\n        action.undo();\n        return action;\n    }\n}\n\nconst isCastData = (data) => (isObject(data) && \"cast\" in data);\nconst isMashData = (data) => (isObject(data) && \"mash\" in data);\nfunction assertMashData(data, name) {\n    if (!isMashData(data))\n        throwError(data, 'MashData', name);\n}\n\nclass Emitter extends EventTarget {\n    dispatch(type, detail) {\n        // console.log(this.constructor.name, \"dispatch\", type, detail)\n        this.dispatchEvent(this.event(type, detail));\n    }\n    emit(type, detail) {\n        if (!this.trapped.has(type)) {\n            this.dispatch(type, detail);\n            return;\n        }\n        const listener = this.trapped.get(type);\n        // console.log(this.constructor.name, \"emit trapped\", type, !!listener)\n        if (listener)\n            listener(this.event(type, detail));\n    }\n    event(type, detail) {\n        const init = detail ? { detail } : undefined;\n        return new CustomEvent(type, init);\n    }\n    trap(type, listener) {\n        if (this.trapped.has(type))\n            return;\n        this.trapped.set(type, listener || null);\n    }\n    trapped = new Map();\n}\n\nconst isEffect = (value) => {\n    return isInstance(value) && value.type === DefinitionType.Effect;\n};\nfunction assertEffect(value) {\n    if (!isEffect(value))\n        throw new Error(\"expected Effect\");\n}\nconst isEffectDefinition = (value) => {\n    return isDefinition(value) && value.type === DefinitionType.Effect;\n};\n// TODO: consider renaming to ClipFilter\n\nconst isFontDefinition = (value) => {\n    return isDefinition(value) && value.type === DefinitionType.Font;\n};\nfunction assertFontDefinition(value) {\n    if (!isFontDefinition(value))\n        throw new Error(\"expected FontDefinition\");\n}\n\nclass LoaderClass {\n    constructor(endpoint) {\n        this.endpoint = endpoint || {};\n    }\n    absoluteUrl(path) { return path; }\n    browsing = true;\n    cacheGet(graphFile, createIfNeeded) {\n        const key = this.key(graphFile);\n        const cacheKey = this.cacheKey(graphFile);\n        const found = this.loaderCache.get(cacheKey);\n        if (found || !createIfNeeded)\n            return found;\n        const { definition, type } = graphFile;\n        const definitions = [];\n        if (isDefinition(definition))\n            definitions.push(definition);\n        const cache = { loaded: false, definitions };\n        this.cacheSet(cacheKey, cache);\n        cache.promise = this.cachePromise(key, graphFile, cache).then(loaded => {\n            cache.loaded = true;\n            cache.result = loaded;\n            return loaded;\n        }).catch(error => {\n            // console.log(this.constructor.name, \"cacheGet.cachePromise\", error, error.constructor.name)\n            cache.error = error;\n            cache.loaded = true;\n            return error;\n        });\n        return cache;\n    }\n    cacheKey(graphFile) {\n        const { type } = graphFile;\n        const key = this.key(graphFile);\n        return `${type}:/${key}`;\n    }\n    cachePromise(key, graphFile, cache) {\n        const cacheKey = this.cacheKey(graphFile);\n        const loaderFile = {\n            loaderPath: cacheKey, urlOrLoaderPath: key, loaderType: graphFile.type\n        };\n        return this.filePromise(loaderFile);\n    }\n    cacheSet(graphFile, cache) {\n        const key = isString(graphFile) ? graphFile : this.cacheKey(graphFile);\n        this.loaderCache.set(key, cache);\n    }\n    endpoint;\n    filePromise(file) {\n        throw Errors.unimplemented + 'filePromise';\n    }\n    flushFilesExcept(fileUrls = []) {\n        const retainKeys = fileUrls.map(fileUrl => this.cacheKey(fileUrl));\n        const keys = [...this.loaderCache.keys()];\n        const removeKeys = keys.filter(key => !retainKeys.includes(key));\n        removeKeys.forEach(key => {\n            const cache = this.loaderCache.get(key);\n            if (cache) {\n                // console.log(this.constructor.name, \"flushFilesExcept removing\", key)\n                this.loaderCache.delete(key);\n            }\n        });\n    }\n    getCache(path) {\n        const files = this.parseUrlPath(path);\n        const [file] = files;\n        // console.log(this.constructor.name, \"getCache\", path, file)\n        assertObject(file);\n        return this.loaderCache.get(file.loaderPath);\n    }\n    getError(graphFile) {\n        return this.cacheGet(graphFile)?.error;\n    }\n    getLoaderCache(file, createIfNeeded, definition) {\n        const { loaderPath, loaderType } = file;\n        const found = this.loaderCache.get(loaderPath);\n        if (found || !createIfNeeded) {\n            // if (found) console.log(this.constructor.name, \"getLoaderCache FOUND\", loaderPath)\n            // else console.log(this.constructor.name, \"getLoaderCache NOT FOUND\", loaderPath)\n            return found;\n        }\n        // console.log(this.constructor.name, \"getLoaderCache LOADING\", loaderPath)\n        const definitions = [];\n        if (isDefinition(definition))\n            definitions.push(definition);\n        const cache = { loaded: false, definitions };\n        if (loaderType !== GraphFileType.Svg)\n            this.setLoaderCache(loaderPath, cache);\n        cache.promise = this.filePromise(file).then(loaded => {\n            // console.log(this.constructor.name, \"getLoaderCache CACHED\", loaderPath, loaded?.constructor.name)\n            cache.loaded = true;\n            cache.result = loaded;\n            return loaded;\n        }).catch(error => {\n            // console.log(this.constructor.name, \"getLoaderCache ERROR\", loaderPath, error, error?.constructor.name)\n            cache.error = error;\n            cache.loaded = true;\n            return error;\n        });\n        return cache;\n    }\n    imagePromise(url) {\n        const image = new Image();\n        image.src = url;\n        return image.decode().then(() => image);\n    }\n    info(loaderPath) {\n        if (!loaderPath)\n            console.trace(this.constructor.name, \"info NO loaderPath\");\n        const files = this.parseUrlPath(loaderPath);\n        files.reverse();\n        for (const file of files) {\n            const cache = this.loaderCache.get(file.urlOrLoaderPath);\n            if (!cache)\n                continue;\n            const { loadedInfo } = cache;\n            if (isPopulatedObject(loadedInfo))\n                return loadedInfo;\n        }\n    }\n    key(graphFile) { throw Errors.unimplemented + 'key'; }\n    lastCssUrl(string) {\n        const exp = /url\\(([^)]+)\\)(?!.*\\1)/g;\n        const matches = string.matchAll(exp);\n        const matchesArray = [...matches];\n        const url = arrayLast(arrayLast(matchesArray));\n        // console.log(this.constructor.name, \"lastCssUrl\", string, url)\n        return url;\n    }\n    loadFilesPromise(graphFiles) {\n        const promises = graphFiles.map(file => this.loadGraphFilePromise(file));\n        return Promise.all(promises).then(EmptyMethod);\n    }\n    loadGraphFilePromise(graphFile) {\n        const { type, file, definition } = graphFile;\n        const url = `${type}:/${file}`;\n        return this.loadPromise(url, definition);\n    }\n    loadPromise(urlPath, definition) {\n        // console.log(this.constructor.name, \"loadPromise\", urlPath)\n        const cache = this.loaderCache.get(urlPath);\n        if (cache) {\n            const { promise, result, loaded, error } = cache;\n            if (loaded || error) {\n                // console.log(this.constructor.name, \"loadPromise FOUND\", error ? 'ERROR' : 'RESULT', urlPath)\n                return Promise.resolve(result);\n            }\n            // console.log(this.constructor.name, \"loadPromise FOUND PROMISE\", urlPath)\n            assertObject(promise);\n            return promise;\n        }\n        const files = this.parseUrlPath(urlPath);\n        files.reverse();\n        // console.log(this.constructor.name, \"loadPromise START\", files.map(file => file.urlOrLoaderPath))\n        const file = files.shift();\n        assertObject(file);\n        let promise = this.loaderFilePromise(file, definition);\n        files.forEach(file => {\n            promise = promise.then(() => {\n                return this.loaderFilePromise(file);\n            });\n        });\n        return promise.then(something => {\n            // console.log(this.constructor.name, \"loadPromise FINISH returning\", something?.constructor.name)\n            return something;\n        });\n    }\n    loadedFile(graphFile) {\n        const file = this.cacheGet(graphFile);\n        return !!file?.loaded;\n    }\n    loaderCache = new Map();\n    loaderFilePromise(file, definition) {\n        // const { loaderType, options, urlOrLoaderPath, loaderPath } = file\n        let cache = this.getLoaderCache(file, true, definition);\n        assertObject(cache);\n        const { promise, result, loaded, error } = cache;\n        if (result && loaded && !error) {\n            // console.log(this.constructor.name, \"loaderFilePromise RESULT\", file.loaderPath, result?.constructor.name)\n            return Promise.resolve(result);\n        }\n        // console.log(this.constructor.name, \"loaderFilePromise PROMISE\", file.loaderPath)\n        assertObject(promise);\n        return promise;\n    }\n    media(urlPath) {\n        const cache = this.loaderCache.get(urlPath);\n        if (cache) {\n            const { result, loaded, error } = cache;\n            if (loaded || error)\n                return result;\n        }\n    }\n    parseUrlPath(id) {\n        assertPopulatedString(id);\n        const urls = urlsAbsolute(id, this.endpoint);\n        return urls.map(url => {\n            const [loaderType, options, urlOrLoaderPath] = url;\n            const loaderPath = `${loaderType}:${options}/${urlOrLoaderPath}`;\n            assertLoaderType(loaderType);\n            const loaderFile = {\n                loaderPath, urlOrLoaderPath, loaderType, options: urlOptionsObject(options)\n            };\n            return loaderFile;\n        });\n    }\n    setLoaderCache(path, cache) {\n        // console.log(this.constructor.name, 'setLoaderCache', path, cache.result?.constructor.name)\n        this.loaderCache.set(path, cache);\n    }\n    sourceUrl(graphFile) {\n        const cache = this.cacheGet(graphFile);\n        if (!cache?.loaded)\n            return this.key(graphFile);\n        const { type } = graphFile;\n        const { result } = cache;\n        assertObject(result);\n        switch (type) {\n            case LoadType.Image:\n            case LoadType.Video: return result.src;\n        }\n        return '';\n    }\n    updateDefinitionDuration(definition, duration, audio) {\n        const { duration: definitionDuration } = definition;\n        if (!isAboveZero(definitionDuration)) {\n            // console.log(this.constructor.name, \"updateDefinitionDuration duration\", definitionDuration, \"=>\", duration)\n            definition.duration = duration;\n        }\n        if (audio)\n            definition.audio = true;\n    }\n    updateDefinitionSize(definition, size, alpha) {\n        const key = this.browsing ? \"previewSize\" : \"sourceSize\";\n        const { [key]: definitionSize } = definition;\n        if (!sizesEqual(size, definitionSize))\n            definition[key] = size;\n        definition.alpha ||= alpha;\n    }\n    updateDefinitionFamily(definition, family) {\n        const { family: definitionFamily } = definition;\n        if (!definitionFamily)\n            definition.family = family;\n    }\n    updateCache(cache, loadedInfo) {\n        cache.loadedInfo ||= {};\n        const { definitions, loadedInfo: cachedInfo } = cache;\n        const { duration, width, height, audible, family, info, alpha } = loadedInfo;\n        const size = { width, height };\n        const durating = isAboveZero(duration);\n        const sizing = sizeAboveZero(size);\n        const informing = isObject(info);\n        if (sizing) {\n            cachedInfo.width ||= size.width;\n            cachedInfo.height ||= size.height;\n        }\n        if (durating) {\n            if (audible)\n                cachedInfo.audible = true;\n            cachedInfo.duration ||= duration;\n        }\n        if (family)\n            cachedInfo.family ||= family;\n        // console.log(this.constructor.name, \"updateCache\", loadedInfo, definitions.length)\n        definitions.forEach(definition => {\n            if (informing && isPreloadableDefinition(definition))\n                definition.info ||= info;\n            if (sizing && isUpdatableSizeDefinition(definition)) {\n                this.updateDefinitionSize(definition, size, alpha);\n            }\n            if (durating && isUpdatableDurationDefinition(definition)) {\n                this.updateDefinitionDuration(definition, duration, audible);\n            }\n            if (family && isFontDefinition(definition)) {\n                this.updateDefinitionFamily(definition, family);\n            }\n            // console.log(this.constructor.name, \"updateCache\", definition.type, definition.label)\n        });\n    }\n    updateLoaderFile(file, info) {\n        // console.log(this.constructor.name, \"updateLoaderFile\", file, info)\n        const cache = this.getLoaderCache(file);\n        assertObject(cache);\n        this.updateCache(cache, info);\n    }\n    updateDefinitions(graphFile, info) {\n        // console.log(this.constructor.name, \"updateDefinitions\", graphFile.file, info)\n        const cache = this.cacheGet(graphFile);\n        assertObject(cache);\n        this.updateCache(cache, info);\n    }\n    videoPromise(url) {\n        return new Promise((resolve, reject) => {\n            const video = this.videoFromUrl(url);\n            video.oncanplay = () => {\n                video.oncanplay = null;\n                video.onerror = null;\n                const { videoWidth, clientWidth, videoHeight, clientHeight } = video;\n                const width = videoWidth || clientWidth;\n                const height = videoHeight || clientHeight;\n                video.width = width;\n                video.height = height;\n                // console.log(this.constructor.name, \"videoPromise.oncanplay\", width, height)\n                resolve(video);\n            };\n            video.onerror = reject;\n            video.autoplay = false;\n            // video.requestVideoFrameCallback(() => {})\n            video.load();\n        });\n    }\n    videoFromUrl(url) {\n        if (!globalThis.document)\n            throw 'wrong environment';\n        const video = globalThis.document.createElement('video');\n        // video.crossOrigin = 'anonymous'\n        video.src = url;\n        return video;\n    }\n}\n\nclass BrowserLoaderClass extends LoaderClass {\n    constructor(endpoint) {\n        super(endpoint);\n        const [canvas, context] = this.canvasContext({ width: 1, height: 1 });\n        context.fillRect(0, 0, 1, 1);\n        this.svgImagePromise(canvas.toDataURL()).then(() => {\n            this.svgImageEmitsLoadEvent = true;\n        });\n    }\n    absoluteUrl(path) {\n        return urlForEndpoint(this.endpoint, path);\n    }\n    arrayBufferPromise(url) {\n        // console.log(this.constructor.name, \"arrayBufferPromise\")\n        return fetch(url).then(response => response.arrayBuffer());\n    }\n    audioBufferPromise(audio) {\n        // console.log(this.constructor.name, \"audioBufferPromise\")\n        return AudibleContextInstance.decode(audio);\n    }\n    audioInfo(buffer) {\n        const { duration } = buffer;\n        const info = { duration, audible: true };\n        return info;\n    }\n    audioPromise(url) {\n        assertPopulatedString(url, 'url');\n        const isBlob = url.startsWith('blob:');\n        // console.log(this.constructor.name, \"audioPromise\", isBlob ? 'BLOB' : url)\n        const promise = isBlob ? this.blobAudioPromise(url) : this.arrayBufferPromise(url);\n        return promise.then(buffer => this.audioBufferPromise(buffer));\n    }\n    blobAudioPromise(url) {\n        // console.log(this.constructor.name, \"blobAudioPromise\")\n        return fetch(url).then(response => response.blob()).then(blob => {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.onload = () => { resolve(reader.result); };\n                reader.onerror = reject;\n                reader.readAsArrayBuffer(blob);\n            });\n        });\n    }\n    svgImageEmitsLoadEvent = false;\n    canvas(size) {\n        const { width, height } = size;\n        const canvas = document.createElement('canvas');\n        canvas.height = height;\n        canvas.width = width;\n        return canvas;\n    }\n    canvasContext(size) {\n        const canvas = this.canvas(size);\n        const context = canvas.getContext('2d');\n        assertTrue(context);\n        return [canvas, context];\n    }\n    copyVideoPromise(url, options) {\n        assertObject(options);\n        // console.log(this.constructor.name, \"copyVideoPromise\", url, options)\n        const key = url.split(':').pop();\n        assertPopulatedString(key);\n        const video = this.seekingVideos.get(key);\n        if (video)\n            return Promise.resolve(video);\n        const promise = this.seekingVideoPromises.get(key);\n        if (promise)\n            return promise;\n        const sourcePromise = this.sourcePromise(url);\n        const copyPromise = sourcePromise.then(source => {\n            return this.videoPromise(source).then(video => {\n                // console.log(this.constructor.name, \"copyVideoPromise.videoPromise\", source)\n                const initialSeekPromise = this.seekPromise(key, timeFromSeconds(1), video).then(() => {\n                    // console.log(this.constructor.name, \"copyVideoPromise.seekPromise\", source)\n                    this.seekingVideos.set(key, video);\n                    return video;\n                });\n                return initialSeekPromise;\n            });\n        });\n        this.seekingVideoPromises.set(key, copyPromise);\n        return copyPromise;\n    }\n    filePromise(file) {\n        const { loaderType } = file;\n        // console.log(this.constructor.name, \"filePromise\", loaderType)\n        switch (loaderType) {\n            case LoadType.Audio: return this.requestAudio(file);\n            case LoadType.Font: return this.requestFont(file);\n            case LoadType.Image: return this.requestImage(file);\n            case LoadType.Video: return this.requestVideo(file);\n            case GraphFileType.Svg: return this.requestSvgImage(file);\n        }\n        throw Errors.invalid.type + loaderType;\n    }\n    filePromises(files, size) {\n        return files.map(file => {\n            const { name: label, type: fileType } = file;\n            const type = fileType.split('/').shift();\n            const error = { label, error: '' };\n            if (!isUploadType(type)) {\n                return Promise.resolve({ ...error, error: 'import.type', value: type });\n            }\n            const id = idGenerateString();\n            const idKey = urlPrependProtocol('object', id);\n            const url = URL.createObjectURL(file);\n            const object = {\n                type, label, url: urlPrependProtocol(type, idKey), source: url, id: idTemporary()\n            };\n            const isAudio = type === LoadType.Audio;\n            const isImage = type === LoadType.Image;\n            const hasDuration = isAudio || type === LoadType.Video;\n            const hasSize = type === LoadType.Image || type === LoadType.Video;\n            const mediaPromise = this.mediaPromise(type, url);\n            return mediaPromise.then(media => {\n                const info = this.mediaInfo(media);\n                if (hasDuration) {\n                    const { duration } = info;\n                    if (!isAboveZero(duration))\n                        return {\n                            ...error, error: 'import.duration', value: duration\n                        };\n                    // we can't reliably tell if there is an audio track...\n                    // so we assume there is one, and catch problems when it's played \n                    object.audio = true;\n                    object.duration = duration;\n                    object.audioUrl = hasSize ? urlPrependProtocol('video', idKey) : idKey;\n                }\n                if (hasSize) {\n                    const inSize = sizeCopy(info);\n                    if (!sizeAboveZero(inSize))\n                        return {\n                            ...error, error: 'import.size', value: sizeString(inSize)\n                        };\n                    const previewSize = size ? sizeCover(inSize, size, true) : inSize;\n                    const { width, height } = previewSize;\n                    object.previewSize = previewSize;\n                    if (isImage) {\n                        object.icon = urlPrependProtocol('image', idKey, { width, height });\n                        object.loadedImage = media;\n                    }\n                    else {\n                        object.icon = urlPrependProtocol('video', idKey, { fps: 10, frame: 10 });\n                        object.loadedVideo = media;\n                    }\n                }\n                else\n                    object.loadedAudio = media;\n                this.loadLocalFile(media, idKey, info);\n                return object;\n            });\n        });\n    }\n    fontFamily(url) {\n        return url.replaceAll(/[^a-z0-9]/gi, '_');\n    }\n    imageInfo(size) {\n        return sizeCopy(size);\n    }\n    key(graphFile) {\n        const { file, type } = graphFile;\n        if (isLoadType(type))\n            return urlForEndpoint(this.endpoint, file);\n        return file;\n    }\n    loadLocalFile(media, cacheKey, loadedInfo) {\n        const cache = {\n            definitions: [], result: media, loadedInfo,\n            promise: Promise.resolve(media), loaded: true,\n        };\n        this.setLoaderCache(cacheKey, cache);\n    }\n    mediaInfo(media) {\n        if (isLoadedVideo(media))\n            return this.videoInfo(media);\n        if (isLoadedImage(media))\n            return this.imageInfo(media);\n        return this.audioInfo(media);\n    }\n    mediaPromise(type, url) {\n        assertLoadType(type);\n        assertPopulatedString(url, 'url');\n        switch (type) {\n            case LoadType.Audio: return this.audioPromise(url);\n            case LoadType.Image: return this.imagePromise(url);\n            case LoadType.Video: return this.videoPromise(url);\n        }\n        throw Errors.internal;\n    }\n    requestAudio(file) {\n        const { urlOrLoaderPath, options } = file;\n        // console.log(this.constructor.name, \"requestAudio\", urlOrLoaderPath)\n        assertPopulatedString(urlOrLoaderPath, 'urlOrLoaderPath');\n        const http = urlIsHttp(urlOrLoaderPath);\n        const video = http ? false : urlOrLoaderPath.startsWith('video:');\n        if (!(http || video))\n            return this.loadPromise(urlOrLoaderPath);\n        const promise = http ? this.audioPromise(urlOrLoaderPath) : this.requestVideoAudio(file);\n        return promise.then(buffer => {\n            assertObject(buffer);\n            this.updateLoaderFile(file, this.audioInfo(buffer));\n            return buffer;\n        });\n    }\n    requestFont(file) {\n        const { urlOrLoaderPath: url } = file;\n        const bufferPromise = fetch(url).then(response => {\n            const type = response.headers.get('content-type');\n            // console.log(this.constructor.name, \"requestFont.fetch\", type)\n            if (!isPopulatedString(type) || type.startsWith(LoadType.Font)) {\n                return response.arrayBuffer();\n            }\n            assertTrue(type.startsWith('text/css'));\n            return response.text().then(string => this.arrayBufferPromise(this.lastCssUrl(string)));\n        });\n        const family = this.fontFamily(url);\n        // console.log(this.constructor.name, \"requestFont\", url)\n        const facePromise = bufferPromise.then(buffer => {\n            // console.log(this.constructor.name, \"requestFont.bufferPromise\", url)\n            const face = new FontFace(family, buffer);\n            return face.load();\n        });\n        return facePromise.then(face => {\n            // console.log(this.constructor.name, \"requestFont.facePromise\", url)\n            const { fonts } = globalThis.document;\n            fonts.add(face);\n            return fonts.ready.then(() => {\n                // console.log(this.constructor.name, \"requestFont.ready\", url)\n                const info = { family };\n                this.updateLoaderFile(file, info);\n                return face;\n            });\n        });\n    }\n    requestImage(file) {\n        const { urlOrLoaderPath } = file;\n        if (!urlIsHttp(urlOrLoaderPath))\n            return this.requestLoadedImage(file);\n        return this.imagePromise(urlOrLoaderPath).then(image => {\n            const { width, height } = image;\n            // console.log(this.constructor.name, \"requestImage.imagePromise\", width, height)\n            const info = { width, height };\n            this.updateLoaderFile(file, info);\n            return image;\n        });\n    }\n    requestLoadedImage(file) {\n        const { urlOrLoaderPath, options } = file;\n        // url is loader path pointing to video or image\n        // options might be size \n        // console.log(this.constructor.name, \"requestLoadedImage\", urlOrLoaderPath, options)\n        const promise = this.loadPromise(urlOrLoaderPath);\n        const protocol = urlOrLoaderPath.split(':').shift();\n        if (!(protocol === LoadType.Video || options))\n            return promise;\n        return promise.then(videoOrImage => {\n            // console.log(this.constructor.name, \"requestLoadedImage.loadPromise\", urlOrLoaderPath, videoOrImage.constructor.name)\n            const inSize = sizeCopy(videoOrImage);\n            const size = sizeAboveZero(options) ? sizeCover(inSize, options) : inSize;\n            const { width, height } = size;\n            const [canvas, context] = this.canvasContext(size);\n            context.drawImage(videoOrImage, 0, 0, width, height);\n            return this.imagePromise(canvas.toDataURL());\n        });\n    }\n    requestSvgImage(file) {\n        const { urlOrLoaderPath, options } = file;\n        // console.log(this.constructor.name, \"requestSvgImage\", urlOrLoaderPath)\n        return this.sourcePromise(urlOrLoaderPath).then(src => {\n            // console.log(this.constructor.name, \"requestSvgImage.sourcePromise\", urlOrLoaderPath, src.length)\n            const promise = this.svgImagePromise(src);\n            if (!options) {\n                // console.log(this.constructor.name, \"requestSvgImage.sourcePromise NO OPTIONS\", urlOrLoaderPath)\n                return promise;\n            }\n            return promise.then(item => {\n                // console.log(this.constructor.name, \"requestSvgImage.svgImagePromise OPTIONS\", urlOrLoaderPath, options)\n                const { lock, ...rest } = options;\n                const lockDefined = isOrientation(lock) ? lock : undefined;\n                // console.log(this.constructor.name, \"requestSvgImage.svgImagePromise lock\", lockDefined, rest)\n                svgSetDimensionsLock(item, rest, lockDefined);\n                // console.log(this.constructor.name, \"requestSvgImage.svgImagePromise returning\", item?.constructor.name)\n                return item;\n            });\n        });\n    }\n    requestVideo(file) {\n        const { urlOrLoaderPath, options } = file;\n        // console.log(this.constructor.name, \"requestVideo\", urlOrLoaderPath, options)\n        urlIsObject(urlOrLoaderPath);\n        const isHttp = urlIsHttp(urlOrLoaderPath);\n        if (options) {\n            // console.log(this.constructor.name, \"requestVideo with OPTIONS\", urlOrLoaderPath, options)\n            return this.seekingVideoPromise(urlOrLoaderPath, options);\n        }\n        else if (isHttp) {\n            // console.log(this.constructor.name, \"requestVideo HTTP without OPTIONS\", urlOrLoaderPath)\n            return this.videoPromise(urlOrLoaderPath).then(video => {\n                const info = this.videoInfo(video);\n                this.updateLoaderFile(file, info);\n                return video;\n            });\n        }\n        // console.log(this.constructor.name, \"requestVideo LOADING\", urlOrLoaderPath, options)\n        return this.loadPromise(urlOrLoaderPath);\n    }\n    requestVideoAudio(file) {\n        const { urlOrLoaderPath } = file;\n        // console.log(this.constructor.name, \"requestVideoAudio\", urlOrLoaderPath)\n        const videoPromise = this.loadPromise(urlOrLoaderPath);\n        const audioPromise = videoPromise.then(video => {\n            const { src } = video;\n            // console.log(this.constructor.name, \"requestVideoAudio.loadPromise\", urlOrLoaderPath, src?.slice(0, 10))\n            assertPopulatedString(src);\n            return this.audioPromise(src);\n        });\n        return audioPromise;\n    }\n    seek(definitionTime, video) {\n        if (!video)\n            throw Errors.internal + 'seek';\n        video.currentTime = definitionTime.seconds;\n    }\n    seekNeeded(definitionTime, video) {\n        const { currentTime } = video;\n        if (!(currentTime || definitionTime.frame))\n            return true;\n        const videoTime = timeFromSeconds(currentTime, definitionTime.fps);\n        return !videoTime.equalsTime(definitionTime);\n    }\n    seekPromise(key, definitionTime, video) {\n        // console.log(this.constructor.name, \"seekPromise\", key, definitionTime, video.currentTime)\n        const promise = new Promise(resolve => {\n            if (!this.seekNeeded(definitionTime, video)) {\n                // console.log(this.constructor.name, \"seekPromise seekNeeded false\", key, definitionTime, video.currentTime)\n                this.seekingPromises.delete(key);\n                return resolve(video);\n            }\n            video.onseeked = () => {\n                // console.log(this.constructor.name, \"seekPromise.onseeked\", key, definitionTime, video.currentTime)\n                video.onseeked = null;\n                this.seekingPromises.delete(key);\n                resolve(video);\n            };\n            this.seek(definitionTime, video);\n        });\n        const existing = this.seekingPromises.get(key);\n        this.seekingPromises.set(key, promise);\n        if (existing)\n            return existing.then(() => promise);\n        return promise;\n    }\n    seekingVideoPromise = (url, options) => {\n        assertObject(options);\n        // console.log(this.constructor.name, \"seekingVideoPromise\", url, options)\n        const key = url.split(':').pop();\n        assertPopulatedString(key);\n        return this.copyVideoPromise(url, options).then(video => {\n            // console.log(this.constructor.name, \"seekingVideoPromise.copyVideoPromise\", key)\n            const { frame = 0, fps } = options;\n            assertPositive(frame);\n            assertPositive(fps);\n            const time = timeFromArgs(frame, fps);\n            return this.seekPromise(key, time, video);\n        });\n    };\n    seekingVideoPromises = new Map();\n    seekingPromises = new Map();\n    seekingVideos = new Map();\n    sourcePromise(path) {\n        if (urlIsHttp(path))\n            return Promise.resolve(path);\n        return this.loadPromise(path).then((loaded) => {\n            assertObject(loaded);\n            const { src } = loaded;\n            // console.log(this.constructor.name, \"sourcePromise\", path, \"->\", src?.length, src?.slice(0, 20))\n            assertPopulatedString(src);\n            return src;\n        });\n    }\n    _svgElement;\n    get svgElement() { return this._svgElement ||= svgElement(); }\n    set svgElement(value) { this._svgElement = value; }\n    svgImagePromise(url) {\n        return new Promise((resolve, reject) => {\n            const element = svgImageElement();\n            const completed = () => {\n                element.removeEventListener('error', failed);\n                element.removeEventListener('load', passed);\n                if (!this.svgImageEmitsLoadEvent)\n                    this.svgElement.removeChild(element);\n            };\n            const failed = (error) => {\n                // console.log(this.constructor.name, \"loadsSvgImagesInitialize failed\", error)\n                completed();\n                reject(error);\n            };\n            const passed = () => {\n                // console.log(this.constructor.name, \"loadsSvgImagesInitialize passed\")\n                completed();\n                resolve(element);\n            };\n            element.addEventListener('error', failed, { once: true });\n            element.addEventListener('load', passed, { once: true });\n            if (!this.svgImageEmitsLoadEvent)\n                this.svgElement.appendChild(element);\n            svgSet(element, url, 'href');\n        });\n    }\n    videoInfo(video) {\n        const { duration, videoWidth, clientWidth, videoHeight, clientHeight } = video;\n        const width = videoWidth || clientWidth;\n        const height = videoHeight || clientHeight;\n        const object = video;\n        let audible = object.mozHasAudio;\n        audible ||= Boolean(object.webkitAudioDecodedByteCount);\n        audible ||= Boolean(object.audioTracks?.length);\n        if (!audible)\n            console.log(Object.values(video));\n        const info = { width, height, duration, audible };\n        return info;\n    }\n}\n\nclass EditorSelectionClass {\n    get [SelectType.None]() { return undefined; }\n    get [SelectType.Cast]() {\n        const { cast } = this._object;\n        if (isCast(cast))\n            return cast;\n    }\n    get [SelectType.Clip]() {\n        const { clip } = this._object;\n        if (isClip(clip))\n            return clip;\n    }\n    get [SelectType.Layer]() {\n        const { layer } = this._object;\n        if (isLayer(layer))\n            return layer;\n    }\n    get [SelectType.Mash]() {\n        const { mash } = this._object;\n        if (isMash(mash))\n            return mash;\n        const { layer } = this;\n        if (isLayerMash(layer))\n            return layer.mash;\n    }\n    get [SelectType.Track]() {\n        const { clip, track } = this._object;\n        if (isTrack(track))\n            return track;\n        if (isClip(clip))\n            return clip.track;\n    }\n    get [SelectType.Container]() {\n        const { clip } = this._object;\n        if (isClip(clip))\n            return clip.container;\n    }\n    get [SelectType.Content]() {\n        const { clip } = this._object;\n        if (isClip(clip))\n            return clip.content;\n    }\n    get [SelectType.Effect]() {\n        const { effect } = this._object;\n        if (isEffect(effect))\n            return effect;\n    }\n    _editor;\n    get editor() { return this._editor; }\n    set editor(value) { this._editor = value; }\n    _focus = SelectType.Mash;\n    get focus() { return this._focus; }\n    set focus(value) { this._focus = value; }\n    get(selectType) {\n        return this[selectType];\n    }\n    unset(selectType) {\n        // console.log(this.constructor.name, \"unset\", selectType)\n        const selectable = this.object[selectType];\n        if (!selectable)\n            return;\n        const selectables = selectable.selectables();\n        assertTrue(selectables[0] === selectable);\n        selectables.shift();\n        this.object = this.selectionFromSelectables(selectables);\n    }\n    set(selectable) {\n        const { selectType } = selectable;\n        this.object = { [selectType]: selectable };\n    }\n    _object = {};\n    get object() {\n        return Object.fromEntries(SelectTypes.map(selectType => ([selectType, this.get(selectType)])));\n    }\n    set object(selection) {\n        const populated = this.selectionPopulated(selection);\n        const { object: originalObject } = this;\n        this.clear();\n        Object.assign(this._object, populated);\n        const { object: newObject } = this;\n        // if (SelectTypes.every(type => originalObject[type] === newObject[type])) return\n        const { mash: oldMash, cast: oldCast, clip: oldClip } = originalObject;\n        const { mash, cast, clip } = newObject;\n        if (clip !== oldClip) {\n            if (isClip(clip) && isPositive(clip.trackNumber))\n                clip.track.mash.clearPreview();\n            if (isClip(oldClip) && isPositive(oldClip.trackNumber))\n                oldClip.track.mash.clearPreview();\n        }\n        Object.assign(this._object, populated);\n        this.editor.eventTarget.emit(EventType.Selection);\n        if (cast !== oldCast)\n            this.editor.eventTarget.emit(EventType.Cast);\n        if (mash !== oldMash) {\n            this.editor.eventTarget.emit(EventType.Mash);\n            this.editor.eventTarget.emit(EventType.Track);\n            this.editor.eventTarget.emit(EventType.Duration);\n        }\n    }\n    clear() {\n        SelectTypes.forEach(selectType => { delete this._object[selectType]; });\n    }\n    selectionFromSelectables(selectables) {\n        return Object.fromEntries(selectables.map(selectable => ([selectable.selectType, selectable])));\n    }\n    selectionPopulated(selection) {\n        const { mash: mashOld, object } = this;\n        const { cast: castOld } = object;\n        const { clip, track, layer, cast, mash, effect } = selection;\n        const target = effect || clip || track || mash || layer || cast || castOld || mashOld;\n        assertTrue(target, 'target');\n        return this.selectionFromSelectables(target.selectables());\n    }\n    get selectTypes() {\n        const selectTypes = [];\n        const { mash, object } = this;\n        const { clip, track, cast, layer, effect } = object;\n        if (cast) {\n            selectTypes.push(SelectType.Cast);\n            if (layer)\n                selectTypes.push(SelectType.Layer);\n        }\n        if (!mash)\n            return selectTypes;\n        if (!cast)\n            selectTypes.push(SelectType.Mash);\n        if (!track)\n            return selectTypes;\n        selectTypes.push(SelectType.Track);\n        if (!isClip(clip))\n            return selectTypes;\n        selectTypes.push(SelectType.Clip);\n        selectTypes.push(SelectType.Content);\n        if (isEffect(effect))\n            selectTypes.push(SelectType.Effect);\n        if (isPopulatedString(clip.containerId)) {\n            selectTypes.push(SelectType.Container);\n        }\n        return selectTypes;\n    }\n    selectedItems(types = SelectTypes) {\n        const { selectTypes, object: selection } = this;\n        const filteredTypes = selectTypes.filter(type => types.includes(type));\n        const { clip } = selection;\n        // console.log(this.constructor.name, \"selectedItems\", this.object)\n        return filteredTypes.flatMap(type => {\n            let target = selection[type];\n            if (isClipSelectType(type) && isClip(clip))\n                target = clip[type];\n            assertTrue(target, type);\n            return target.selectedItems(this.editor.actions);\n        });\n    }\n}\n\nconst editorSelectionInstance = () => {\n    return new EditorSelectionClass();\n};\n\nconst isVideoDefinition = (value) => {\n    return isDefinition(value) && value.type === DefinitionType.Video;\n};\nconst isVideo = (value) => {\n    return isInstance(value) && value.definition.type === DefinitionType.Video;\n};\nfunction assertVideo(value) {\n    if (!isVideo(value))\n        throw new Error('expected Video');\n}\n\nconst isImageDefinition = (value) => {\n    return isDefinition(value) && value.type === DefinitionType.Image;\n};\n\nclass EditorClass {\n    constructor(args) {\n        const { autoplay, precision, loop, fps, volume, buffer, endpoint, preloader, editType, readOnly, dimensions, edited, } = args;\n        const point = isPoint(dimensions) ? pointCopy(dimensions) : PointZero;\n        const size = isSize(dimensions) ? sizeCopy(dimensions) : SizeZero;\n        this._rect = { ...point, ...size };\n        if (isEditType(editType))\n            this._editType = editType;\n        if (readOnly)\n            this.readOnly = true;\n        this.editing = !this.readOnly;\n        if (isBoolean(autoplay))\n            this.autoplay = autoplay;\n        if (isNumber(precision))\n            this.precision = precision;\n        if (isBoolean(loop))\n            this._loop = loop;\n        if (isNumber(fps))\n            this._fps = fps;\n        if (isNumber(volume))\n            this._volume = volume;\n        if (isNumber(buffer))\n            this._buffer = buffer;\n        this.actions = new Actions(this);\n        this.preloader = preloader || new BrowserLoaderClass(endpoint);\n        if (edited)\n            this.load(edited);\n    }\n    actions;\n    add(object, editorIndex) {\n        const objects = isArray(object) ? object : [object];\n        if (!objects.length)\n            return Promise.resolve([]);\n        const definitions = objects.map(definitionObject => {\n            assertPopulatedObject(definitionObject);\n            return Defined.fromObject(definitionObject);\n        });\n        if (!editorIndex)\n            return Promise.resolve(definitions);\n        const clips = definitions.map(definition => {\n            const { id, type } = definition;\n            const clipObject = {};\n            if (isContentDefinition(definition))\n                clipObject.contentId = id;\n            else\n                clipObject.containerId = id;\n            if (type === DefinitionType.Audio)\n                clipObject.containerId = '';\n            return clipDefault.instanceFromObject(clipObject);\n        });\n        const options = { editing: true, duration: true };\n        const unknownClips = clips.filter(clip => clip.intrinsicsKnown(options));\n        const files = unknownClips.flatMap(clip => clip.intrinsicGraphFiles(options));\n        const { preloader } = this;\n        const promise = preloader.loadFilesPromise(files);\n        return promise.then(() => {\n            return this.addClip(clips, editorIndex).then(() => definitions);\n        });\n    }\n    addClip(clip, editorIndex) {\n        const { clip: frameOrIndex = 0, track: trackIndex = 0 } = editorIndex;\n        const clips = isArray(clip) ? clip : [clip];\n        const [firstClip] = clips;\n        if (!firstClip)\n            return Promise.resolve();\n        const promise = this.assureMash(clip);\n        return promise.then(() => {\n            const { mash } = this.selection;\n            assertMash(mash);\n            const { tracks } = mash;\n            const { length } = tracks;\n            assertAboveZero(length);\n            const trackPositive = isPositive(trackIndex);\n            const track = trackPositive ? tracks[trackIndex] : undefined;\n            const trackClips = track?.clips || [];\n            const dense = track?.dense;\n            const redoSelection = {\n                ...this.selection.object, clip: firstClip\n            };\n            const createTracks = trackPositive ? 0 : clips.length;\n            const options = {\n                clips, type: ActionType.AddClipToTrack, trackIndex,\n                redoSelection, createTracks\n            };\n            if (dense) {\n                const insertIndex = isPositive(frameOrIndex) ? frameOrIndex : trackClips.length;\n                options.insertIndex = insertIndex;\n            }\n            else {\n                if (createTracks)\n                    options.redoFrame = isPositive(frameOrIndex) ? frameOrIndex : 0;\n                else {\n                    assertTrack(track);\n                    const frame = isPositive(frameOrIndex) ? frameOrIndex : track.frames;\n                    options.redoFrame = track.frameForClipNearFrame(firstClip, frame);\n                }\n            }\n            this.actions.create(options);\n            return this.loadMashAndDraw();\n        });\n    }\n    addEffect(effect, insertIndex = 0) {\n        // console.log(this.constructor.name, \"addEffect\", effect.definition.label, insertIndex)\n        const { clip } = this.selection;\n        if (!isClip(clip)) {\n            console.error(this.constructor.name, \"addEffect expected effectable selection\");\n            throw Errors.selection + 'effectable';\n        }\n        const { content } = clip;\n        assertContent(content);\n        const { effects } = content;\n        if (!effects)\n            throw Errors.selection;\n        const undoEffects = [...effects];\n        const redoEffects = [...effects];\n        redoEffects.splice(insertIndex, 0, effect);\n        const redoSelection = { ...this.selection.object, effect };\n        const options = {\n            effects,\n            undoEffects,\n            redoEffects,\n            redoSelection,\n            type: ActionType.MoveEffect\n        };\n        this.actions.create(options);\n        return this.loadMashAndDraw();\n    }\n    addFiles(files, editorIndex) {\n        const { preloader, eventTarget, rect } = this;\n        let promise = Promise.resolve([]);\n        preloader.filePromises(files, rect).forEach(filePromise => {\n            promise = promise.then(objects => {\n                const id = idGenerate('activity');\n                const info = { id, type: ActivityType.Analyze };\n                eventTarget.emit(EventType.Active, info);\n                return filePromise.then(definitionOrError => {\n                    const activityInfo = { ...info };\n                    const { label } = definitionOrError;\n                    activityInfo.label = label;\n                    if (isDefinitionObject(definitionOrError)) {\n                        objects.push(definitionOrError);\n                        const { url, type } = definitionOrError;\n                        assertPopulatedString(url);\n                        // console.log(this.constructor.name, \"addFiles.filePromises\", url, type)\n                        const info = preloader.info(url);\n                        assertObject(info);\n                        activityInfo.type = ActivityType.Complete;\n                        activityInfo.value = info;\n                    }\n                    else {\n                        const { error, value } = definitionOrError;\n                        activityInfo.type = ActivityType.Error;\n                        activityInfo.error = error;\n                        activityInfo.value = value;\n                    }\n                    eventTarget.emit(EventType.Active, activityInfo);\n                    return objects;\n                });\n            });\n        });\n        return promise.then(objects => {\n            return this.add(objects, editorIndex).then(definitions => {\n                if (definitions.length) {\n                    const definitionTypes = arrayUnique(definitions.map(object => object.type));\n                    this.eventTarget.emit(EventType.Added, { definitionTypes });\n                }\n                return definitions;\n            });\n        });\n    }\n    addFolder(label, layerAndPosition) {\n        const { cast } = this.selection;\n        assertCast(cast);\n        const layer = cast.createLayer({ type: LayerType.Folder, label });\n        assertLayerFolder(layer);\n        const redoSelection = { cast, layer };\n        const options = {\n            type: ActionType.AddLayer, redoSelection, layerAndPosition\n        };\n        this.actions.create(options);\n    }\n    addMash(mashAndDefinitions, layerAndPosition) {\n        const { cast } = this.selection;\n        assertCast(cast);\n        const mashObject = mashAndDefinitions?.mashObject || {};\n        // console.log(this.constructor.name, \"addMash\", mashObject)\n        const definitionObjects = mashAndDefinitions?.definitionObjects || [];\n        Defined.define(...definitionObjects);\n        const layerObject = { type: LayerType.Mash, mash: mashObject };\n        const layer = cast.createLayer(layerObject);\n        assertLayerMash(layer);\n        const { mash } = layer;\n        this.configureMash(mash);\n        const redoSelection = { cast, layer, mash };\n        const options = {\n            type: ActionType.AddLayer, redoSelection, layerAndPosition\n        };\n        this.actions.create(options);\n    }\n    addTrack() {\n        const { mash, cast } = this.selection;\n        const redoSelection = { mash, cast };\n        this.actions.create({\n            redoSelection, type: ActionType.AddTrack, createTracks: 1\n        });\n    }\n    assureMash(clip) {\n        const { selection, editType } = this;\n        const { mash } = selection;\n        if (!isMash(mash)) {\n            const first = isArray(clip) ? clip[0] : clip;\n            const { label } = first.content.definition;\n            const mashObject = { label };\n            if (editType === EditType.Mash)\n                return this.load({ mash: mashObject });\n            this.addMash({ mashObject, definitionObjects: [] });\n        }\n        return Promise.resolve();\n    }\n    autoplay = Default.editor.autoplay;\n    _buffer = Default.editor.buffer;\n    get buffer() { return this._buffer; }\n    set buffer(value) {\n        const number = Number(value);\n        if (this._buffer !== number) {\n            this._buffer = number;\n            const { edited } = this;\n            if (edited)\n                edited.buffer = number;\n        }\n    }\n    can(masherAction) {\n        const { selection } = this;\n        const { track, clip, mash, layer } = selection;\n        switch (masherAction) {\n            case MasherAction.Save: return this.actions.canSave;\n            case MasherAction.Undo: return this.actions.canUndo;\n            case MasherAction.Redo: return this.actions.canRedo;\n            case MasherAction.Remove: return !!(clip || track || layer);\n            case MasherAction.Render: return !this.actions.canSave && !!(mash?.id && !idIsTemporary(mash.id));\n            default: throw Errors.argument + 'can';\n        }\n    }\n    castDestroy() {\n        const { cast } = this.selection;\n        if (!cast)\n            return false;\n        cast.destroy();\n        this.preloader.flushFilesExcept();\n        return true;\n    }\n    clearActions() {\n        if (!this.actions.instances.length)\n            return;\n        this.actions = new Actions(this);\n        this.eventTarget.emit(EventType.Action);\n    }\n    get clips() { return this.selection.mash.clips; }\n    configureCast(cast) {\n        this.configureEdited(cast);\n        return cast.loadPromise({ editing: true, visible: true }).then(() => {\n            this.selection.set(cast);\n            this.handleDraw();\n        });\n    }\n    configureEdited(edited) {\n        edited.editor = this;\n        const { rect } = this;\n        if (sizeAboveZero(rect))\n            edited.imageSize = sizeCopy(rect);\n        edited.emitter = this.eventTarget;\n    }\n    configureMash(mash) {\n        mash.buffer = this.buffer;\n        mash.gain = this.gain;\n        mash.loop = this.loop;\n        this.configureEdited(mash);\n        return mash.loadPromise({ editing: true, visible: true }).then(() => {\n            this.selection.set(mash);\n            this.handleDraw();\n        });\n    }\n    create() { this.load({ [this.editType]: {} }); }\n    get currentTime() {\n        const { mash } = this.selection;\n        if (mash && mash.drawnTime)\n            return mash.drawnTime.seconds;\n        return 0;\n    }\n    dataPutRequest() {\n        const { edited, editType } = this;\n        assertObject(edited);\n        assertEditType(editType);\n        // set edit's label if it's empty\n        const { label } = edited;\n        if (!isPopulatedString(label)) {\n            const defaultLabel = Default[editType].label;\n            assertPopulatedString(defaultLabel, 'defaultLabel');\n            edited.setValue(defaultLabel, 'label');\n        }\n        return edited.putPromise().then(() => {\n            if (isMash(edited)) {\n                return {\n                    mash: edited.toJSON(),\n                    definitionIds: edited.definitionIds\n                };\n            }\n            if (isCast(edited)) {\n                return {\n                    cast: edited.toJSON(),\n                    definitionIds: Object.fromEntries(edited.mashes.map(mash => ([mash.id, mash.definitionIds])))\n                };\n            }\n            throw new Error(Errors.internal);\n        });\n    }\n    define(objectOrArray) {\n        const objects = Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];\n        objects.forEach(object => {\n            const { id, type } = object;\n            assertPopulatedString(id, 'define id');\n            if (Defined.fromId(id)) {\n                // redefining...\n                console.warn(this.constructor.name, \"define NOT redefining\", id);\n                return;\n            }\n            assertDefinitionType(type);\n            const definition = Factory[type].definition(object);\n            Defined.install(definition);\n        });\n    }\n    get definitions() {\n        const { mashes } = this;\n        const ids = [...new Set(mashes.flatMap(mash => mash.definitionIds))];\n        const definitions = ids.map(id => Defined.fromId(id));\n        return definitions;\n    }\n    get definitionsUnsaved() {\n        const { definitions } = this;\n        return definitions.filter(definition => {\n            const { type, id } = definition;\n            if (!isLoadType(type))\n                return false;\n            return idIsTemporary(id);\n        });\n    }\n    destroy() { if (!this.castDestroy())\n        this.mashDestroy(); }\n    dragging = false;\n    drawTimeout;\n    get duration() { return this.selection.mash?.duration || 0; }\n    _editType;\n    get editType() {\n        if (!this._editType)\n            this._editType = this.editingCast ? EditType.Cast : EditType.Mash;\n        return this._editType;\n    }\n    get edited() { return this.selection.cast || this.selection.mash; }\n    editedData;\n    editing;\n    get editingCast() { return !!this.selection.cast; }\n    get endTime() {\n        const { mash } = this.selection;\n        return mash ? mash.endTime.scale(this.fps, 'floor') : timeFromArgs();\n    }\n    eventTarget = new Emitter();\n    _fps = Default.editor.fps;\n    get fps() {\n        return this._fps || this.selection.mash?.quantize || Default.editor.fps;\n    }\n    set fps(value) {\n        const number = Number(value);\n        // setting to zero means fallback to mash rate\n        if (this._fps !== number) {\n            this._fps = number;\n            this.eventTarget.emit(EventType.Fps);\n            this.time = this.time.scale(this.fps);\n        }\n    }\n    get frame() { return this.time.frame; }\n    set frame(value) { this.goToTime(timeFromArgs(Number(value), this.fps)); }\n    get frames() { return this.endTime.frame; }\n    get gain() { return this.muted ? 0.0 : this.volume; }\n    goToTime(value) {\n        const { fps, time } = this;\n        const { frame: currentFrame } = time;\n        const goTime = value ? value.scaleToFps(fps) : timeFromArgs(0, fps);\n        const { frame: attemptFrame } = goTime;\n        const { frame: endFrame } = this.endTime;\n        const lastFrame = endFrame - 1;\n        const goFrame = lastFrame < 1 ? 0 : Math.min(attemptFrame, lastFrame);\n        if (value && currentFrame === goFrame)\n            return Promise.resolve();\n        const promise = this.selection.mash?.seekToTime(timeFromArgs(goFrame, fps));\n        if (promise)\n            return promise;\n        return Promise.resolve();\n    }\n    handleAction(action) {\n        const { edited } = this;\n        assertTrue(edited);\n        // console.log(this.constructor.name, \"handleAction\")\n        const { selection } = action;\n        const { mash } = selection;\n        if (isMash(mash)) {\n            mash.clearPreview();\n            if (action instanceof ChangeAction) {\n                const { property, target } = action;\n                switch (property) {\n                    case \"gain\": {\n                        if (isClip(target)) {\n                            mash.composition.adjustClipGain(target, mash.quantize);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n        this.selection.object = selection;\n        const promise = edited.reload() || Promise.resolve();\n        promise.then(() => {\n            if (!mash)\n                this.handleDraw();\n            // console.log(this.constructor.name, \"handleAction\", type)\n            this.eventTarget.emit(EventType.Action, { action });\n        });\n    }\n    handleDraw(event) {\n        // console.log(this.constructor.name, \"handleDraw\")\n        if (this.drawTimeout || !this.edited?.loading)\n            return;\n        this.drawTimeout = setTimeout(() => {\n            // console.log(this.constructor.name, \"handleDraw drawTimeout\")\n            this.eventTarget.dispatch(EventType.Draw);\n            delete this.drawTimeout;\n        }, 10);\n    }\n    load(data) {\n        this.editedData = data;\n        // console.log(this.constructor.name, \"load\", data)\n        return this.loadEditedData();\n    }\n    loadCastData(data = {}) {\n        const { cast: castObject = {}, definitions: definitionObjects = [] } = data;\n        Defined.undefineAll();\n        Defined.define(...definitionObjects);\n        this.eventTarget.trap(EventType.Draw, this.handleDraw.bind(this));\n        const cast = castInstance(castObject, this.preloader);\n        return this.configureCast(cast);\n    }\n    loadEditedData() {\n        const { rect, editedData: data } = this;\n        if (!sizeAboveZero(rect)) {\n            // console.log(this.constructor.name, \"loadEditedData DEFFERING LOAD\", rect)\n            return Promise.resolve();\n        }\n        assertObject(data);\n        delete this.editedData;\n        this.destroy();\n        this.paused = true;\n        this.clearActions();\n        this.selection.clear();\n        // console.log(this.constructor.name, \"loadEditedData LOADING\", rect, data)\n        if (isCastData(data))\n            return this.loadCastData(data);\n        assertMashData(data);\n        return this.loadMashData(data).then(() => {\n            return this.goToTime().then(() => {\n                const { edited: mash } = this;\n                if (isMash(mash))\n                    mash.clearPreview();\n                if (this.autoplay)\n                    this.paused = false;\n            });\n        });\n    }\n    loadMashAndDraw() {\n        const { mash } = this.selection;\n        if (!mash)\n            throw new Error(Errors.selection);\n        const args = { editing: true, visible: true };\n        if (!this.paused)\n            args.audible = true;\n        return mash.loadPromise(args).then(() => { mash.draw(); });\n    }\n    loadMashData(data = {}) {\n        const { mash: mashObject = {}, definitions: definitionObjects = [] } = data;\n        // console.log(this.constructor.name, \"loadMashData LOADING\", mashObject, definitionObjects)\n        Defined.undefineAll();\n        Defined.define(...definitionObjects);\n        const mash = mashInstance({ ...mashObject, preloader: this.preloader });\n        this.mashDestroy();\n        return this.configureMash(mash);\n    }\n    _loop = Default.editor.loop;\n    get loop() { return this._loop; }\n    set loop(value) {\n        const boolean = !!value;\n        this._loop = boolean;\n        const { mash } = this.selection;\n        if (mash)\n            mash.loop = boolean;\n    }\n    mashDestroy() {\n        const { mash } = this.selection;\n        if (!mash)\n            return false;\n        mash.destroy();\n        this.preloader.flushFilesExcept();\n        return true;\n    }\n    get mashes() {\n        const { edited } = this;\n        if (!edited)\n            return [];\n        return isCast(edited) ? edited.mashes : [edited];\n    }\n    move(object, editorIndex = {}) {\n        assertPopulatedObject(object, 'clip');\n        if (isClip(object)) {\n            this.moveClip(object, editorIndex);\n            return;\n        }\n        assertEffect(object);\n        const { clip: frameOrIndex = 0 } = editorIndex;\n        this.moveEffect(object, frameOrIndex);\n    }\n    moveClip(clip, editorIndex = {}) {\n        assertClip(clip);\n        const { clip: frameOrIndex = 0, track: track = 0 } = editorIndex;\n        assertPositive(frameOrIndex);\n        const { mash } = this.selection;\n        assertMash(mash);\n        const { tracks } = mash;\n        const { trackNumber: undoTrack } = clip;\n        const options = {\n            clip,\n            trackIndex: track,\n            undoTrackIndex: undoTrack,\n            type: ActionType.MoveClip\n        };\n        const creating = !isPositive(track);\n        if (creating)\n            options.createTracks = 1;\n        const undoDense = isPositive(undoTrack) && tracks[undoTrack].dense;\n        const redoDense = isPositive(track) && tracks[track].dense;\n        const currentIndex = creating ? -1 : tracks[track].clips.indexOf(clip);\n        if (redoDense)\n            options.insertIndex = frameOrIndex;\n        if (undoDense) {\n            options.undoInsertIndex = currentIndex;\n            if (frameOrIndex < currentIndex)\n                options.undoInsertIndex += 1;\n        }\n        if (!(redoDense && undoDense)) {\n            const { frame } = clip;\n            const insertFrame = creating ? 0 : tracks[track].frameForClipNearFrame(clip, frameOrIndex);\n            const offset = insertFrame - frame;\n            if (!offset && track === undoTrack)\n                return; // no change\n            options.undoFrame = frame;\n            options.redoFrame = frame + offset;\n        }\n        this.actions.create(options);\n    }\n    moveEffect(effect, index = 0) {\n        // console.log(this.constructor.name, \"moveEffect\", effect, index)\n        if (!isPositive(index))\n            throw Errors.argument + 'index';\n        const { clip } = this.selection;\n        if (!clip)\n            throw Errors.selection;\n        assertClip(clip);\n        const effectable = clip.content;\n        assertContent(effectable);\n        const { effects } = effectable;\n        const undoEffects = [...effects];\n        const redoEffects = undoEffects.filter(e => e !== effect);\n        const currentIndex = undoEffects.indexOf(effect);\n        const insertIndex = currentIndex < index ? index - 1 : index;\n        redoEffects.splice(insertIndex, 0, effect);\n        const options = {\n            effects, undoEffects, redoEffects, type: ActionType.MoveEffect, effectable\n        };\n        this.actions.create(options);\n    }\n    moveLayer(layer, layerAndPosition) {\n        const { cast } = this.selection;\n        assertCast(cast);\n        assertLayer(layer);\n        const redoSelection = { cast, layer };\n        const options = { type: ActionType.MoveLayer, redoSelection, layerAndPosition };\n        this.actions.create(options);\n    }\n    moveTrack() {\n        // TODO: create remove track action...\n        console.debug(this.constructor.name, \"moveTrack coming soon...\");\n    }\n    _muted = false;\n    get muted() { return this._muted; }\n    set muted(value) {\n        const boolean = !!value;\n        if (this._muted !== boolean) {\n            this._muted = boolean;\n            const { mash } = this.selection;\n            if (mash)\n                mash.gain = this.gain;\n        }\n    }\n    pause() { this.paused = true; }\n    get paused() {\n        const { mash } = this.selection;\n        return mash ? mash.paused : true;\n    }\n    set paused(value) {\n        const { mash } = this.selection;\n        if (mash)\n            mash.paused = value;\n        // bring back selection\n        if (value)\n            this.redraw();\n    }\n    play() { this.paused = false; }\n    get position() {\n        let per = 0;\n        if (this.time.frame) {\n            per = this.time.seconds / this.duration;\n            if (per !== 1)\n                per = parseFloat(per.toFixed(this.precision));\n        }\n        return per;\n    }\n    set position(value) {\n        this.goToTime(timeFromSeconds(this.duration * Number(value), this.fps));\n    }\n    get positionStep() {\n        return parseFloat(`0.${\"0\".repeat(this.precision - 1)}1`);\n    }\n    precision = Default.editor.precision;\n    preloader;\n    readOnly = false;\n    _rect;\n    get rect() { return this._rect; }\n    set rect(value) {\n        assertSizeAboveZero(value);\n        const { editedData, rect } = this;\n        // console.log(this.constructor.name, \"rect\", rect, \"=>\", value, !!editedData)\n        if (rectsEqual(rect, value))\n            return;\n        this._rect = value;\n        const promise = editedData ? this.loadEditedData() : Promise.resolve();\n        promise.then(() => {\n            const { edited, rect, eventTarget } = this;\n            if (!isEdited(edited))\n                return;\n            edited.imageSize = sizeCopy(rect);\n            eventTarget.emit(EventType.Resize, { rect: value });\n            this.redraw();\n        });\n    }\n    redo() { if (this.actions.canRedo)\n        this.handleAction(this.actions.redo()); }\n    redraw() {\n        const { edited } = this;\n        if (!edited)\n            return;\n        edited.mashes.forEach(mash => { mash.clearPreview(); });\n        this.eventTarget.dispatch(EventType.Draw);\n    }\n    removeClip(clip) {\n        const { mash } = this.selection;\n        if (!mash)\n            throw new Error(Errors.selection);\n        const { track } = clip;\n        const redoSelection = {\n            ...this.selection, clip: undefined\n        };\n        const options = {\n            redoSelection,\n            clip,\n            track,\n            index: track.clips.indexOf(clip),\n            type: ActionType.RemoveClip\n        };\n        this.actions.create(options);\n    }\n    removeEffect(effect) {\n        const { clip } = this.selection;\n        if (!clip)\n            throw Errors.selection;\n        assertClip(clip);\n        const { content } = clip;\n        assertContent(content);\n        const { effects } = content;\n        const undoEffects = [...effects];\n        const redoEffects = effects.filter(other => other !== effect);\n        const redoSelection = {\n            ...this.selection.object\n        };\n        delete redoSelection.effect;\n        // console.log(this.constructor.name, \"removeEffect\", redoSelection)\n        const options = {\n            redoSelection,\n            effects,\n            undoEffects,\n            redoEffects,\n            type: ActionType.MoveEffect\n        };\n        this.actions.create(options);\n    }\n    removeLayer(layer) {\n        const { cast } = this.selection;\n        assertCast(cast);\n        const redoSelection = { cast, layer };\n        this.actions.create({ type: ActionType.RemoveLayer, redoSelection });\n    }\n    removeTrack(track) {\n        // TODO: create remove track action...\n        console.debug(this.constructor.name, \"removeTrack coming soon...\");\n    }\n    saved(temporaryIdLookup) {\n        if (temporaryIdLookup) {\n            const { edited } = this;\n            assertTrue(edited);\n            Object.entries(temporaryIdLookup).forEach(([temporaryId, permanentId]) => {\n                if (edited.id === temporaryId) {\n                    edited.id = permanentId;\n                    return;\n                }\n                if (Defined.installed(temporaryId)) {\n                    Defined.updateDefinitionId(temporaryId, permanentId);\n                    return;\n                }\n                assertCast(edited);\n                const mash = edited.mashes.find(mash => mash.id === temporaryId);\n                assertMash(mash);\n                mash.id = permanentId;\n            });\n        }\n        this.actions.save();\n        this.eventTarget.emit(EventType.Action);\n    }\n    _selection;\n    get selection() {\n        if (this._selection)\n            return this._selection;\n        const selection = editorSelectionInstance();\n        selection.editor = this;\n        return this._selection = selection;\n    }\n    get svgElement() { return this.preloader.svgElement; }\n    set svgElement(value) { this.preloader.svgElement = value; }\n    previewItems(enabled) {\n        const { edited } = this;\n        // return an empty element if we haven't loaded anything yet\n        if (!edited) {\n            // console.log(this.constructor.name, \"previewItems NO EDITED\", this.rect)\n            return Promise.resolve([svgElement(this.rect)]);\n        }\n        const options = {};\n        if (enabled && this.paused)\n            options.editor = this;\n        // console.log(this.constructor.name, \"previewItems\", this.rect)\n        return edited.previewItems(options);\n    }\n    get time() { return this.selection.mash?.time || timeFromArgs(0, this.fps); }\n    set time(value) { this.goToTime(value); }\n    get timeRange() {\n        return this.selection.mash?.timeRange || timeRangeFromArgs(0, this.fps);\n    }\n    undo() {\n        const { canUndo } = this.actions;\n        if (canUndo)\n            this.handleAction(this.actions.undo());\n    }\n    updateDefinition(definitionObject, definition) {\n        const { id: newId, type: newType } = definitionObject;\n        const id = definitionObject.id || definition.id;\n        assertPopulatedString(id);\n        const target = definition || Defined.fromId(newId);\n        const { id: oldId, type: oldType } = target;\n        const idChanged = oldId !== id;\n        const typeChanged = isDefinitionType(newType) && oldType !== newType;\n        // console.log(this.constructor.name, \"updateDefinition\", typeChanged, idChanged, definitionObject)\n        if (typeChanged) {\n            // support changing a video to a videosequence\n            const newDefinition = Factory[newType].definition(definitionObject);\n            Defined.updateDefinition(target, newDefinition);\n        }\n        else if (idChanged) {\n            Defined.updateDefinitionId(target.id, id);\n            Object.assign(target, definitionObject);\n            if (isVideoDefinition(target))\n                delete target.loadedVideo;\n            else if (isUpdatableDurationDefinition(target))\n                delete target.loadedAudio;\n            else if (isImageDefinition(target))\n                delete target.loadedImage;\n        }\n        const { edited } = this;\n        if (!(edited && (typeChanged || idChanged)))\n            return Promise.resolve();\n        const tracks = this.mashes.flatMap(mash => mash.tracks);\n        const clips = tracks.flatMap(track => track.clips);\n        clips.forEach(clip => {\n            if (clip.containerId === oldId)\n                clip.setValue(newId, 'containerId');\n            if (clip.contentId === oldId)\n                clip.setValue(newId, 'contentId');\n        });\n        return this.loadMashAndDraw();\n    }\n    _volume = Default.editor.volume;\n    get volume() { return this._volume; }\n    set volume(value) {\n        const number = Number(value);\n        if (this._volume !== number) {\n            if (!isPositive(number))\n                throw Errors.invalid.volume;\n            this._volume = number;\n            if (isAboveZero(number))\n                this.muted = false;\n            const { mash } = this.selection;\n            if (mash)\n                mash.gain = this.gain;\n            this.eventTarget.emit(EventType.Volume);\n        }\n    }\n}\n\nlet editorSingleton;\nconst editorArgs = (options = {}) => {\n    return {\n        autoplay: Default.editor.autoplay,\n        precision: Default.editor.precision,\n        loop: Default.editor.loop,\n        fps: Default.editor.fps,\n        volume: Default.editor.volume,\n        buffer: Default.editor.buffer,\n        ...options\n    };\n};\nconst editorInstance = (options = {}) => {\n    return editorSingleton = new EditorClass(editorArgs(options));\n};\n\nconst AudioWithTweenable = TweenableMixin(InstanceBase);\nconst AudioWithContent = ContentMixin(AudioWithTweenable);\nconst AudioWithPreloadable = PreloadableMixin(AudioWithContent);\nconst AudioWithUpdatableDuration = UpdatableDurationMixin(AudioWithPreloadable);\nclass AudioClass extends AudioWithUpdatableDuration {\n    contentPreviewItemPromise(containerRect, time, range, icon) {\n        return Promise.resolve(svgPolygonElement(containerRect, '', 'currentColor'));\n    }\n    mutable() { return true; }\n}\n\nconst AudioDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst AudioDefinitionWithContent = ContentDefinitionMixin(AudioDefinitionWithTweenable);\nconst AudioDefinitionWithPreloadable = PreloadableDefinitionMixin(AudioDefinitionWithContent);\nconst AudioDefinitionWithUpdatableDuration = UpdatableDurationDefinitionMixin(AudioDefinitionWithPreloadable);\nclass AudioDefinitionClass extends AudioDefinitionWithUpdatableDuration {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { audioUrl, url } = object;\n        if (!audioUrl && url)\n            this.audioUrl = url;\n    }\n    instanceFromObject(object = {}) {\n        return new AudioClass(this.instanceArgs(object));\n    }\n    type = DefinitionType.Audio;\n    loadType = LoadType.Audio;\n}\n\nconst audioDefinition = (object) => {\n    const { id } = object;\n    if (!id)\n        throw Errors.id;\n    return new AudioDefinitionClass(object);\n};\nconst audioDefinitionFromId = (id) => {\n    return audioDefinition({ id });\n};\nconst audioInstance = (object) => {\n    const definition = audioDefinition(object);\n    const instance = definition.instanceFromObject(object);\n    return instance;\n};\nconst audioFromId = (id) => {\n    return audioInstance({ id });\n};\nFactories[DefinitionType.Audio] = {\n    definition: audioDefinition,\n    definitionFromId: audioDefinitionFromId,\n    fromId: audioFromId,\n    instance: audioInstance,\n};\n\nconst ImageWithTweenable = TweenableMixin(InstanceBase);\nconst ImageWithContainer = ContainerMixin(ImageWithTweenable);\nconst ImageWithContent = ContentMixin(ImageWithContainer);\nconst ImageWithPreloadable = PreloadableMixin(ImageWithContent);\nconst ImageWithUpdatableSize = UpdatableSizeMixin(ImageWithPreloadable);\nclass ImageClass extends ImageWithUpdatableSize {\n    visibleCommandFiles(args) {\n        const commandFiles = [];\n        const { visible, time, videoRate } = args;\n        if (!visible)\n            return commandFiles;\n        const files = this.fileUrls(args);\n        const [file] = files;\n        const duration = isTimeRange(time) ? time.lengthSeconds : 0;\n        const options = { loop: 1, framerate: videoRate };\n        if (duration)\n            options.t = duration;\n        const { id } = this;\n        const commandFile = { ...file, inputId: id, options };\n        // console.log(this.constructor.name, \"commandFiles\", id)\n        commandFiles.push(commandFile);\n        return commandFiles;\n    }\n    fileUrls(args) {\n        const { visible, editing } = args;\n        const files = [];\n        if (!visible)\n            return files;\n        const { definition } = this;\n        const { url, source } = definition;\n        const file = editing ? url : source;\n        assertPopulatedString(file, editing ? 'url' : 'source');\n        const graphFile = {\n            input: true, type: LoadType.Image, file, definition\n        };\n        files.push(graphFile);\n        return files;\n    }\n}\n\nconst ImageDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst ImageDefinitionWithContainer = ContainerDefinitionMixin(ImageDefinitionWithTweenable);\nconst ImageDefinitionWithContent = ContentDefinitionMixin(ImageDefinitionWithContainer);\nconst ImageDefinitionWithPreloadable = PreloadableDefinitionMixin(ImageDefinitionWithContent);\nconst ImageDefinitionWithUpdatable = UpdatableSizeDefinitionMixin(ImageDefinitionWithPreloadable);\nclass ImageDefinitionClass extends ImageDefinitionWithUpdatable {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { loadedImage } = object;\n        if (loadedImage)\n            this.loadedImage = loadedImage;\n    }\n    definitionIcon(loader, size) {\n        const superElement = super.definitionIcon(loader, size);\n        if (superElement)\n            return superElement;\n        const { url } = this;\n        return this.urlIcon(url, loader, size);\n    }\n    instanceFromObject(object = {}) {\n        return new ImageClass(this.instanceArgs(object));\n    }\n    loadType = LoadType.Image;\n    loadedImage;\n    type = DefinitionType.Image;\n}\n\nconst imageDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id, 'imageDefinition id');\n    return new ImageDefinitionClass(object);\n};\nconst imageDefinitionFromId = (id) => {\n    return imageDefinition({ id });\n};\nconst imageInstance = (object) => {\n    const definition = imageDefinition(object);\n    const instance = definition.instanceFromObject(object);\n    return instance;\n};\nconst imageFromId = (id) => {\n    return imageInstance({ id });\n};\nFactories[DefinitionType.Image] = {\n    definition: imageDefinition,\n    definitionFromId: imageDefinitionFromId,\n    fromId: imageFromId,\n    instance: imageInstance,\n};\n\nconst VideoWithTweenable = TweenableMixin(InstanceBase);\nconst VideoWithContainer = ContainerMixin(VideoWithTweenable);\nconst VideoWithContent = ContentMixin(VideoWithContainer);\nconst VideoWithPreloadable = PreloadableMixin(VideoWithContent);\nconst VideoWithUpdatableSize = UpdatableSizeMixin(VideoWithPreloadable);\nconst VideoWithUpdatableDuration = UpdatableDurationMixin(VideoWithUpdatableSize);\nclass VideoClass extends VideoWithUpdatableDuration {\n    fileUrls(args) {\n        const files = [];\n        const { editing, time, audible, visible, icon } = args;\n        // console.log(this.constructor.name, \"fileUrls\", audible, editing, visible)\n        const { definition } = this;\n        const { url, source } = definition;\n        const editingUrl = editing ? url : source;\n        assertPopulatedString(editingUrl, editing ? 'url' : 'source');\n        if (visible) {\n            if (!icon) {\n                const visibleGraphFile = {\n                    input: true, type: LoadType.Video, file: editingUrl, definition\n                };\n                files.push(visibleGraphFile);\n            }\n        }\n        if (audible) {\n            // const needed = editing ? time.isRange : !visible\n            // if (needed) {\n            const mutable = definition.duration ? this.mutable() : true;\n            if (mutable && !this.muted) {\n                const audioGraphFile = {\n                    input: true, type: LoadType.Audio, definition,\n                    file: this.definition.urlAudible(editing),\n                };\n                files.push(audioGraphFile);\n            }\n            // }\n        }\n        return files;\n    }\n    _foreignElement;\n    get foreignElement() {\n        return this._foreignElement ||= this.foreignElementInitialize;\n    }\n    get foreignElementInitialize() {\n        // console.log(this.constructor.name, \"foreignElementInitialize\")\n        return globalThis.document.createElementNS(NamespaceSvg, 'foreignObject');\n    }\n    iconUrl(size, time, clipTime) {\n        const inSize = sizeCopy(this.intrinsicRect(true));\n        const coverSize = sizeCover(inSize, size);\n        const { width, height } = coverSize;\n        const start = this.definitionTime(time, clipTime);\n        const { frame } = start;\n        const { fps } = clipTime;\n        const { definition } = this;\n        const { url } = definition;\n        const videoUrl = urlPrependProtocol('video', url, { frame, fps });\n        return urlPrependProtocol('image', videoUrl, { width, height });\n    }\n    itemPreviewPromise(rect, time, range) {\n        const { clientCanMaskVideo } = VideoClass;\n        const { _foreignElement, _loadedVideo } = this;\n        const predefined = !!_foreignElement;\n        if (predefined || _loadedVideo) {\n            // console.log(this.constructor.name, \"itemPreviewPromise LOADED\")\n            this.updateForeignElement(rect, time, range, predefined);\n            return Promise.resolve(clientCanMaskVideo ? this.foreignElement : this.loadedVideo);\n        }\n        return this.loadVideoPromise.then(() => {\n            this.updateForeignElement(rect, time, range);\n            return clientCanMaskVideo ? this.foreignElement : this.loadedVideo;\n        });\n    }\n    _loadedVideo;\n    get loadedVideo() { return this._loadedVideo; }\n    get loadVideoPromise() {\n        // console.log(this.constructor.name, \"loadVideoPromise\")\n        const { _loadedVideo } = this;\n        if (_loadedVideo)\n            return Promise.resolve(_loadedVideo);\n        const { definition } = this;\n        const { loadedVideo } = definition;\n        if (loadedVideo) {\n            this._loadedVideo = loadedVideo.cloneNode();\n            return Promise.resolve(this._loadedVideo);\n        }\n        const { preloader } = this.clip.track.mash;\n        const file = this.intrinsicGraphFile({ editing: true, size: true });\n        const { file: url } = file;\n        const videoUrl = urlPrependProtocol('video', url);\n        return preloader.loadPromise(videoUrl).then((video) => {\n            definition.loadedVideo = video;\n            return this._loadedVideo = video.cloneNode();\n        });\n    }\n    updateVideo(rect, time, range) {\n        const { loadedVideo } = this;\n        const { currentTime } = loadedVideo;\n        const definitionTime = this.definitionTime(time, range);\n        const maxDistance = time.isRange ? 1 : 1.0 / time.fps;\n        const { seconds } = definitionTime;\n        if (Math.abs(seconds - currentTime) > maxDistance) {\n            loadedVideo.currentTime = seconds;\n        }\n        const { width, height } = rect;\n        loadedVideo.width = width;\n        loadedVideo.height = height;\n        return loadedVideo;\n    }\n    updateForeignElement(rect, time, range, foreignElementDefined) {\n        const { clientCanMaskVideo } = VideoClass;\n        if (clientCanMaskVideo) {\n            const { foreignElement } = this;\n            if (!foreignElementDefined)\n                foreignElement.appendChild(this.loadedVideo);\n            svgSetDimensions(foreignElement, rect);\n        }\n        this.updateVideo(rect, time, range);\n    }\n    static _clientCanMaskVideo;\n    static get clientCanMaskVideo() {\n        const { _clientCanMaskVideo } = this;\n        if (isBoolean(_clientCanMaskVideo))\n            return _clientCanMaskVideo;\n        const { navigator } = globalThis;\n        const { userAgent } = navigator;\n        const safari = userAgent.includes('Safari') && !userAgent.includes('Chrome');\n        return this._clientCanMaskVideo = !safari;\n    }\n}\n\nconst VideoDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst VideoDefinitionWithContainer = ContainerDefinitionMixin(VideoDefinitionWithTweenable);\nconst VideoDefinitionWithContent = ContentDefinitionMixin(VideoDefinitionWithContainer);\nconst VideoDefinitionWithPreloadable = PreloadableDefinitionMixin(VideoDefinitionWithContent);\nconst VideoDefinitionWithUpdatableSize = UpdatableSizeDefinitionMixin(VideoDefinitionWithPreloadable);\nconst VideoDefinitionWithUpdatableDuration = UpdatableDurationDefinitionMixin(VideoDefinitionWithUpdatableSize);\nclass VideoDefinitionClass extends VideoDefinitionWithUpdatableDuration {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { loadedVideo } = object;\n        if (loadedVideo)\n            this.loadedVideo = loadedVideo;\n        // TODO: support speed\n        // this.properties.push(propertyInstance({ name: \"speed\", type: DataType.Number, value: 1.0 }))\n    }\n    instanceFromObject(object = {}) {\n        return new VideoClass(this.instanceArgs(object));\n    }\n    loadType = LoadType.Video;\n    loadedVideo;\n    pattern = '%.jpg';\n    toJSON() {\n        const object = super.toJSON();\n        object.url = this.url;\n        if (this.source)\n            object.source = this.source;\n        return object;\n    }\n    type = DefinitionType.Video;\n}\n\nconst videoDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id);\n    return new VideoDefinitionClass(object);\n};\nconst videoDefinitionFromId = (id) => {\n    return videoDefinition({ id });\n};\nconst videoInstance = (object) => {\n    const definition = videoDefinition(object);\n    return definition.instanceFromObject(object);\n};\nconst videoFromId = (id) => {\n    return videoInstance({ id });\n};\nFactories[DefinitionType.Video] = {\n    definition: videoDefinition,\n    definitionFromId: videoDefinitionFromId,\n    fromId: videoFromId,\n    instance: videoInstance,\n};\n\nconst VideoSequenceWithTweenable = TweenableMixin(InstanceBase);\nconst VideoSequenceWithContainer = ContainerMixin(VideoSequenceWithTweenable);\nconst VideoSequenceWithContent = ContentMixin(VideoSequenceWithContainer);\nconst VideoSequenceWithPreloadable = PreloadableMixin(VideoSequenceWithContent);\nconst VideoSequenceWithUpdatableSize = UpdatableSizeMixin(VideoSequenceWithPreloadable);\nconst VideoSequenceWithUpdatableDuration = UpdatableDurationMixin(VideoSequenceWithUpdatableSize);\nclass VideoSequenceClass extends VideoSequenceWithUpdatableDuration {\n    visibleCommandFiles(args) {\n        const files = super.visibleCommandFiles(args);\n        const { streaming, visible } = args;\n        if (!(visible && streaming))\n            return files;\n        files.forEach(file => {\n            const { options = {} } = file;\n            options.loop = 1;\n            options.re = '';\n            file.options = options;\n        });\n        return files;\n    }\n    fileUrls(args) {\n        const { time, clipTime, editing, visible } = args;\n        const definitionTime = this.definitionTime(time, clipTime);\n        const definitionArgs = { ...args, time: definitionTime };\n        const files = super.fileUrls(definitionArgs);\n        if (visible) {\n            const { definition } = this;\n            if (editing) {\n                const frames = definition.framesArray(definitionTime);\n                const files = frames.map(frame => {\n                    const graphFile = {\n                        type: LoadType.Image, file: definition.urlForFrame(frame),\n                        input: true, definition\n                    };\n                    return graphFile;\n                });\n                files.push(...files);\n            }\n            else {\n                const graphFile = {\n                    type: LoadType.Video, file: definition.source, definition, input: true\n                };\n                files.push(graphFile);\n            }\n        }\n        return files;\n    }\n    iconUrl(size, time, range) {\n        const definitionTime = this.definitionTime(time, range);\n        const { definition } = this;\n        const frames = definition.framesArray(definitionTime);\n        const [frame] = frames;\n        return definition.urlForFrame(frame);\n    }\n    // itemPreviewPromise(rect: Rect, time: Time, range: TimeRange, stretch?: boolean): Promise<SvgItem> {\n    //   return this.itemIconPromise(rect, time, range, stretch).then(svgItem => {\n    //     return svgItem\n    //   })\n    // }\n    // private itemPromise(time: Time, range: TimeRange, icon?: boolean): Promise<SvgItem> {\n    //   const definitionTime = this.definitionTime(time, range)\n    //   const { definition } = this\n    //   const frames = definition.framesArray(definitionTime)\n    //   const [frame] = frames\n    //   const url = definition.urlForFrame(frame)\n    //   const svgUrl = `svg:/${url}`\n    //   const { preloader } = this.clip.track.mash\n    //   return preloader.loadPromise(svgUrl, definition)\n    // }\n    // itemPromise(containerRect: Rect, time: Time, range: TimeRange, stretch?: boolean, icon?: boolean): Promise<SvgItem> {\n    //   const { container } = this\n    //   const rect = container ? containerRect : this.contentRect(containerRect, time, range)\n    //   const lock = stretch ? undefined : Orientation.V\n    //   return this.itemPromise(time, range, icon).then(item => {\n    //     svgSetDimensionsLock(item, rect, lock)\n    //     return item\n    //   })\n    // }\n    speed = 1.0;\n    toJSON() {\n        const object = super.toJSON();\n        if (this.speed !== 1.0)\n            object.speed = this.speed;\n        return object;\n    }\n}\n\nconst VideoSequenceDefinitionWithTweenable = TweenableDefinitionMixin(DefinitionBase);\nconst VideoSequenceDefinitionWithContent = ContentDefinitionMixin(VideoSequenceDefinitionWithTweenable);\nconst VideoSequenceDefinitionWithPreloadable = PreloadableDefinitionMixin(VideoSequenceDefinitionWithContent);\nconst VideoSequenceDefinitionWithUpdatableSize = UpdatableSizeDefinitionMixin(VideoSequenceDefinitionWithPreloadable);\nconst VideoSequenceDefinitionWithUpdatableDuration = UpdatableDurationDefinitionMixin(VideoSequenceDefinitionWithUpdatableSize);\nclass VideoSequenceDefinitionClass extends VideoSequenceDefinitionWithUpdatableDuration {\n    constructor(...args) {\n        super(...args);\n        const [object] = args;\n        const { padding, begin, fps, increment, pattern } = object;\n        if (isPositive(begin))\n            this.begin = begin;\n        if (fps)\n            this.fps = fps;\n        if (increment)\n            this.increment = increment;\n        if (pattern)\n            this.pattern = pattern;\n        if (padding)\n            this.padding = padding;\n        else {\n            const lastFrame = this.begin + (this.increment * this.framesMax - this.begin);\n            this.padding = String(lastFrame).length;\n        }\n        // TODO: support speed\n        // this.properties.push(propertyInstance({ name: \"speed\", type: DataType.Number, value: 1.0 }))\n    }\n    begin = Default.definition.videosequence.begin;\n    fps = Default.definition.videosequence.fps;\n    framesArray(start) {\n        const { duration, fps } = this;\n        return start.durationFrames(duration, fps);\n        // const frames : number[] = []\n        // const startFrame = Math.min(framesMax, start.scale(fps, \"floor\").frame)\n        // if (start.isRange) {\n        //   const endFrame = Math.min(framesMax + 1, start.timeRange.endTime.scale(fps, \"ceil\").frame)\n        //   for (let frame = startFrame; frame < endFrame; frame += 1) {\n        //     frames.push(frame)\n        //   }\n        // } else frames.push(startFrame)\n        // // console.log(this.constructor.name, \"framesArray\", start, fps, framesMax, frames)\n        // return frames\n    }\n    get framesMax() {\n        const { fps, duration } = this;\n        // console.log(this.constructor.name, \"framesMax\", fps, duration)\n        return Math.floor(fps * duration) - 2;\n    }\n    increment = Default.definition.videosequence.increment;\n    instanceFromObject(object = {}) {\n        return new VideoSequenceClass(this.instanceArgs(object));\n    }\n    loadType = LoadType.Image;\n    padding;\n    pattern = '%.jpg';\n    toJSON() {\n        const json = super.toJSON();\n        const { videosequence } = Default.definition;\n        const { pattern, increment, begin, fps, padding } = this;\n        if (pattern !== videosequence.pattern)\n            json.pattern = pattern;\n        if (increment !== videosequence.increment)\n            json.increment = increment;\n        if (begin !== videosequence.begin)\n            json.begin = begin;\n        if (fps !== videosequence.fps)\n            json.fps = fps;\n        if (padding !== videosequence.padding)\n            json.padding = padding;\n        return json;\n    }\n    type = DefinitionType.VideoSequence;\n    urlForFrame(frame) {\n        const { increment, begin, padding, url, pattern } = this;\n        // console.log(this.constructor.name, \"urlForFrame\", frame, increment, begin, padding, url, pattern )\n        let s = String((frame * increment) + begin);\n        if (padding)\n            s = s.padStart(padding, '0');\n        return (url + pattern).replaceAll('%', s);\n    }\n}\n\nconst videoSequenceDefinition = (object) => {\n    const { id } = object;\n    assertPopulatedString(id);\n    return new VideoSequenceDefinitionClass(object);\n};\nconst videoSequenceDefinitionFromId = (id) => {\n    return videoSequenceDefinition({ id });\n};\nconst videoSequenceInstance = (object) => {\n    const definition = videoSequenceDefinition(object);\n    return definition.instanceFromObject(object);\n};\nconst videoSequenceFromId = (id) => {\n    return videoSequenceInstance({ id });\n};\nFactories[DefinitionType.VideoSequence] = {\n    definition: videoSequenceDefinition,\n    definitionFromId: videoSequenceDefinitionFromId,\n    fromId: videoSequenceFromId,\n    instance: videoSequenceInstance,\n};\n\nclass RenderingOutputClass {\n    args;\n    constructor(args) {\n        this.args = args;\n        // console.log(this.constructor.name, \"upload\", this.args.upload)\n    }\n    assureClipFrames() {\n        const { durationClips, args } = this;\n        const { quantize } = args.mash;\n        durationClips.forEach(clip => {\n            const { content } = clip;\n            const { definition } = content;\n            if (isUpdatableDurationDefinition(definition)) {\n                const frames = definition.frames(quantize);\n                // console.log(this.constructor.name, \"assureClipFrames\", clip.label, frames, definition.duration)\n                if (frames)\n                    clip.frames = frames;\n            }\n        });\n    }\n    _avType = AVType.Both;\n    get avType() { return this._avType; }\n    get avTypeNeededForClips() {\n        const { avType } = this;\n        if (avType !== AVType.Both)\n            return avType;\n        const { renderingClips } = this;\n        const types = new Set();\n        renderingClips.forEach(renderingClip => {\n            if (renderingClip.audible)\n                types.add(AVType.Audio);\n            if (renderingClip.visible)\n                types.add(AVType.Video);\n        });\n        // console.log(this.constructor.name, \"avTypeNeededForClips\", types)\n        if (types.size === 2)\n            return avType;\n        const [type] = types;\n        return type;\n    }\n    get commandOutput() { return this.args.commandOutput; }\n    get duration() { return this.timeRange.lengthSeconds; }\n    _durationClips;\n    get durationClips() { return this._durationClips ||= this.durationClipsInitialize; }\n    get durationClipsInitialize() {\n        const { mash } = this.args;\n        const { frames } = mash;\n        if (isPositive(frames))\n            return [];\n        const { clips } = mash;\n        const options = { duration: true };\n        const zeroClips = clips.filter(clip => !clip.intrinsicsKnown(options));\n        return zeroClips;\n    }\n    get endTime() {\n        return this.args.endTime || this.args.mash.endTime;\n    }\n    // private _filterGraphs?: FilterGraphsthis._filterGraphs =\n    get filterGraphs() {\n        const { filterGraphsOptions } = this;\n        // console.log(this.constructor.name, \"filterGraphs\", filterGraphsOptions.upload)\n        return this.args.mash.filterGraphs(filterGraphsOptions);\n    }\n    get filterGraphsOptions() {\n        const { timeRange: time, graphType, videoRate, args } = this;\n        const { upload } = args;\n        const size = this.sizeCovered();\n        const filterGraphsOptions = {\n            time, graphType, videoRate, size,\n            avType: this.avTypeNeededForClips, upload\n        };\n        // console.log(this.constructor.name, \"filterGraphsOptions upload\", upload, filterGraphsOptions.upload)\n        return filterGraphsOptions;\n    }\n    graphType = GraphType.Mash;\n    get mashDurationPromise() {\n        const clips = this.durationClips;\n        if (!clips.length) {\n            // console.log(this.constructor.name, \"mashDurationPromise no durationClips\")\n            return Promise.resolve();\n        }\n        const { mash } = this.args;\n        const options = { duration: true };\n        const files = clips.flatMap(clip => clip.intrinsicGraphFiles(options));\n        const { preloader } = mash;\n        // console.log(this.constructor.name, \"mashDurationPromise files\", files.map(f => f.file))\n        return preloader.loadFilesPromise(files);\n    }\n    get mashSize() {\n        const { visibleGraphFiles: graphFiles } = this;\n        const definitions = graphFiles.map(graphFile => graphFile.definition);\n        const updatable = definitions.filter(def => isUpdatableSizeDefinition(def));\n        const set = new Set(updatable);\n        const unique = [...set];\n        const sized = unique.filter(definition => definition.sourceSize);\n        if (!sized.length)\n            return;\n        const sizes = sized.map(definition => definition.sourceSize);\n        return {\n            width: Math.max(...sizes.map(size => size.width)),\n            height: Math.max(...sizes.map(size => size.height))\n        };\n    }\n    get outputCover() { return !!this.args.commandOutput.cover; }\n    get outputSize() {\n        const { width, height } = this.args.commandOutput;\n        if (!(width && height)) {\n            if (this.avType === AVType.Audio)\n                return { width: 0, height: 0 };\n            // console.error(this.constructor.name, \"outputSize\", this.args.commandOutput)\n            throw Errors.invalid.size + this.outputType + '.outputSize for avType ' + this.avType;\n        }\n        return { width, height };\n    }\n    outputType;\n    get preloadPromise() {\n        // console.log(this.constructor.name, \"preloadPromise\")\n        return this.filterGraphs.loadPromise;\n    }\n    get renderingClips() {\n        return this.args.mash.clipsInTimeOfType(this.timeRange, this.avType);\n    }\n    renderingDescriptionPromise(renderingResults) {\n        // console.log(this.constructor.name, \"renderingDescriptionPromise\")\n        let promise = this.mashDurationPromise;\n        promise = promise.then(() => {\n            this.assureClipFrames();\n        });\n        promise = promise.then(() => {\n            // console.log(this.constructor.name, \"renderingDescriptionPromise mashDurationPromise done\")\n            return this.sizePromise;\n        });\n        promise = promise.then(() => {\n            // console.log(this.constructor.name, \"renderingDescriptionPromise sizePromise\")\n            return this.preloadPromise;\n        });\n        return promise.then(() => {\n            // console.log(this.constructor.name, \"renderingDescriptionPromise preloadPromise calling done, calling assureClipFrames\")\n            this.assureClipFrames();\n            const { commandOutput } = this;\n            const renderingDescription = { commandOutput };\n            const avType = this.avTypeNeededForClips;\n            const { filterGraphs } = this;\n            // console.log(this.constructor.name, \"renderingDescriptionPromise avType\", avType)\n            if (avType !== AVType.Audio) {\n                const { filterGraphsVisible } = filterGraphs;\n                const visibleCommandDescriptions = filterGraphsVisible.map(filterGraph => {\n                    const { commandInputs: inputs, commandFilters, duration } = filterGraph;\n                    const commandDescription = { inputs, commandFilters, duration, avType: AVType.Video };\n                    // console.log(this.constructor.name, \"renderingDescriptionPromise inputs, commandFilters\", inputs, commandFilters)\n                    return commandDescription;\n                });\n                renderingDescription.visibleCommandDescriptions = visibleCommandDescriptions;\n            }\n            if (avType !== AVType.Video) {\n                const { filterGraphAudible, duration } = filterGraphs;\n                if (filterGraphAudible) {\n                    const { commandFilters, commandInputs: inputs } = filterGraphAudible;\n                    const commandDescription = {\n                        inputs, commandFilters, duration, avType: AVType.Audio\n                    };\n                    renderingDescription.audibleCommandDescription = commandDescription;\n                }\n            }\n            return renderingDescription;\n        });\n    }\n    // get renderingDescription(): RenderingDescription {\n    //   const { commandOutput } = this\n    //   const renderingDescription: RenderingDescription = { commandOutput }\n    //   const avType = this.avTypeNeededForClips\n    //   const { filterGraphs } = this\n    //   // console.log(this.constructor.name, \"renderingDescriptionPromise avType\", avType)\n    //   if (avType !== AVType.Audio) {\n    //     const { filterGraphsVisible } = filterGraphs\n    //     const visibleCommandDescriptions = filterGraphsVisible.map(filterGraph => {\n    //       const { commandFilters, commandInputs: inputs, duration } = filterGraph\n    //       const commandDescription: CommandDescription = { inputs, commandFilters, duration, avType: AVType.Video }\n    //     // console.log(this.constructor.name, \"renderingDescriptionPromise inputs, commandFilters\", inputs, commandFilters)\n    //       return commandDescription\n    //     })\n    //     renderingDescription.visibleCommandDescriptions = visibleCommandDescriptions\n    //   }\n    //   if (avType !== AVType.Video) {\n    //     const { filterGraphAudible, duration } = filterGraphs\n    //     if (filterGraphAudible) {\n    //       const { commandFilters, commandInputs: inputs } = filterGraphAudible\n    //       const commandDescription: CommandDescription = {\n    //         inputs, commandFilters, duration, avType: AVType.Audio\n    //       }\n    //       renderingDescription.audibleCommandDescription = commandDescription\n    //     }\n    //   }\n    //   return renderingDescription\n    // }\n    get startTime() {\n        if (this.args.startTime)\n            return this.args.startTime;\n        const { quantize, frame } = this.args.mash;\n        return timeFromArgs(frame, quantize);\n    }\n    sizeCovered() {\n        const { outputSize, outputCover } = this;\n        if (!outputCover) {\n            // console.log(this.constructor.name, \"sizeCovered mashSize false outputCover\", outputSize)\n            return outputSize;\n        }\n        const { mashSize } = this;\n        if (!isSize(mashSize)) {\n            // console.log(this.constructor.name, \"sizeCovered mashSize false outputSize\", outputSize)\n            return outputSize; // mash doesn't care about size\n        }\n        const { width, height } = mashSize;\n        assertAboveZero(width);\n        assertAboveZero(height);\n        return sizeCover(mashSize, outputSize);\n    }\n    get sizePromise() {\n        // console.log(this.constructor.name, \"sizePromise\")\n        if (this.avType === AVType.Audio || !this.outputCover)\n            return Promise.resolve();\n        const { visibleGraphFiles } = this;\n        // console.log(this.constructor.name, \"sizePromise\", visibleGraphFiles.length, \"visibleGraphFile(s)\")\n        if (!visibleGraphFiles.length)\n            return Promise.resolve();\n        const { preloader } = this.args.mash;\n        return preloader.loadFilesPromise(visibleGraphFiles);\n    }\n    get timeRange() { return timeRangeFromTimes(this.startTime, this.endTime); }\n    get videoRate() { return this.args.commandOutput.videoRate || 0; }\n    get visibleGraphFiles() {\n        const { timeRange: time, args } = this;\n        const { mash } = args;\n        const clips = mash.clipsInTimeOfType(time, AVType.Video);\n        const options = { size: true };\n        const unknownClips = clips.filter(clip => !clip.intrinsicsKnown(options));\n        const files = unknownClips.flatMap(clip => clip.intrinsicGraphFiles(options));\n        return files;\n    }\n}\n\nclass AudioOutputClass extends RenderingOutputClass {\n    _avType = AVType.Audio;\n    outputType = OutputType.Audio;\n}\n\nconst options$8 = {\n};\nconst audioBitrate$5 = 160;\nconst audioCodec$5 = \"libmp3lame\";\nconst audioChannels$5 = 2;\nconst audioRate$5 = 44100;\nconst extension$8 = \"mp3\";\nconst outputType$5 = \"audio\";\nvar outputDefaultAudioJson = {\n  options: options$8,\n  audioBitrate: audioBitrate$5,\n  audioCodec: audioCodec$5,\n  audioChannels: audioChannels$5,\n  audioRate: audioRate$5,\n  extension: extension$8,\n  outputType: outputType$5\n};\n\nconst options$7 = {\n};\nconst width$7 = 320;\nconst height$7 = 240;\nconst extension$7 = \"jpg\";\nconst outputType$4 = \"image\";\nconst cover$3 = true;\nconst offset$1 = 0;\nvar outputDefaultImageJson = {\n  options: options$7,\n  width: width$7,\n  height: height$7,\n  extension: extension$7,\n  outputType: outputType$4,\n  cover: cover$3,\n  offset: offset$1\n};\n\nconst options$6 = {\n};\nconst width$6 = 320;\nconst height$6 = 240;\nconst extension$6 = \"png\";\nconst outputType$3 = \"image\";\nconst format$5 = \"image2\";\nconst cover$2 = true;\nconst offset = 0;\nvar outputDefaultImagePngJson = {\n  options: options$6,\n  width: width$6,\n  height: height$6,\n  extension: extension$6,\n  outputType: outputType$3,\n  format: format$5,\n  cover: cover$2,\n  offset: offset\n};\n\nconst options$5 = {\n  g: 60,\n  level: 41,\n  movflags: \"faststart\"\n};\nconst width$5 = 1920;\nconst height$5 = 1080;\nconst videoRate$4 = 30;\nconst videoBitrate$3 = 2000;\nconst audioBitrate$4 = 160;\nconst audioCodec$4 = \"aac\";\nconst videoCodec$3 = \"libx264\";\nconst audioChannels$4 = 2;\nconst audioRate$4 = 44100;\nconst g = 0;\nconst format$4 = \"mp4\";\nconst extension$5 = \"mp4\";\nconst outputType$2 = \"video\";\nconst cover$1 = false;\nvar outputDefaultVideoJson = {\n  options: options$5,\n  width: width$5,\n  height: height$5,\n  videoRate: videoRate$4,\n  videoBitrate: videoBitrate$3,\n  audioBitrate: audioBitrate$4,\n  audioCodec: audioCodec$4,\n  videoCodec: videoCodec$3,\n  audioChannels: audioChannels$4,\n  audioRate: audioRate$4,\n  g: g,\n  format: format$4,\n  extension: extension$5,\n  outputType: outputType$2,\n  cover: cover$1\n};\n\nconst options$4 = {\n};\nconst format$3 = \"image2\";\nconst width$4 = 320;\nconst height$4 = 240;\nconst videoRate$3 = 10;\nconst extension$4 = \"jpg\";\nconst outputType$1 = \"imagesequence\";\nconst cover = false;\nvar outputDefaultImageSequenceJson = {\n  options: options$4,\n  format: format$3,\n  width: width$4,\n  height: height$4,\n  videoRate: videoRate$3,\n  extension: extension$4,\n  outputType: outputType$1,\n  cover: cover\n};\n\nconst options$3 = {\n};\nconst width$3 = 320;\nconst height$3 = 240;\nconst forecolor = \"#000000\";\nconst backcolor = \"#00000000\";\nconst audioBitrate$3 = 160;\nconst audioCodec$3 = \"aac\";\nconst audioChannels$3 = 2;\nconst audioRate$3 = 44100;\nconst extension$3 = \"png\";\nconst outputType = \"waveform\";\nvar outputDefaultWaveformJson = {\n  options: options$3,\n  width: width$3,\n  height: height$3,\n  forecolor: forecolor,\n  backcolor: backcolor,\n  audioBitrate: audioBitrate$3,\n  audioCodec: audioCodec$3,\n  audioChannels: audioChannels$3,\n  audioRate: audioRate$3,\n  extension: extension$3,\n  outputType: outputType\n};\n\nconst width$2 = 320;\nconst height$2 = 240;\nconst videoRate$2 = 30;\nconst videoBitrate$2 = 2000;\nconst audioBitrate$2 = 160;\nconst audioCodec$2 = \"aac\";\nconst videoCodec$2 = \"libx264\";\nconst audioChannels$2 = 2;\nconst audioRate$2 = 44100;\nconst format$2 = \"mdash\";\nconst extension$2 = \"dash\";\nconst streamingFormat$2 = \"mdash\";\nconst options$2 = {\n  hls_delete_threshold: 10,\n  g: 60\n};\nvar outputDefaultDashJson = {\n  width: width$2,\n  height: height$2,\n  videoRate: videoRate$2,\n  videoBitrate: videoBitrate$2,\n  audioBitrate: audioBitrate$2,\n  audioCodec: audioCodec$2,\n  videoCodec: videoCodec$2,\n  audioChannels: audioChannels$2,\n  audioRate: audioRate$2,\n  format: format$2,\n  extension: extension$2,\n  streamingFormat: streamingFormat$2,\n  options: options$2\n};\n\nconst width$1 = 320;\nconst height$1 = 240;\nconst videoRate$1 = 30;\nconst videoBitrate$1 = 2000;\nconst audioBitrate$1 = 160;\nconst audioCodec$1 = \"aac\";\nconst videoCodec$1 = \"libx264\";\nconst audioChannels$1 = 2;\nconst audioRate$1 = 44100;\nconst format$1 = \"hls\";\nconst extension$1 = \"m3u8\";\nconst streamingFormat$1 = \"hls\";\nconst options$1 = {\n  hls_segment_filename: \"%06d.ts\",\n  hls_time: 6,\n  hls_list_size: 10,\n  hls_flags: \"delete_segments\",\n  hls_delete_threshold: 10,\n  g: 60\n};\nvar outputDefaultHlsJson = {\n  width: width$1,\n  height: height$1,\n  videoRate: videoRate$1,\n  videoBitrate: videoBitrate$1,\n  audioBitrate: audioBitrate$1,\n  audioCodec: audioCodec$1,\n  videoCodec: videoCodec$1,\n  audioChannels: audioChannels$1,\n  audioRate: audioRate$1,\n  format: format$1,\n  extension: extension$1,\n  streamingFormat: streamingFormat$1,\n  options: options$1\n};\n\nconst width = 320;\nconst height = 240;\nconst videoRate = 30;\nconst videoBitrate = 2000;\nconst audioBitrate = 160;\nconst audioCodec = \"aac\";\nconst videoCodec = \"libx264\";\nconst audioChannels = 2;\nconst audioRate = 44100;\nconst format = \"flv\";\nconst extension = \"flv\";\nconst streamingFormat = \"rtmp\";\nconst options = {\n  g: 60\n};\nvar outputDefaultRtmpJson = {\n  width: width,\n  height: height,\n  videoRate: videoRate,\n  videoBitrate: videoBitrate,\n  audioBitrate: audioBitrate,\n  audioCodec: audioCodec,\n  videoCodec: videoCodec,\n  audioChannels: audioChannels,\n  audioRate: audioRate,\n  format: format,\n  extension: extension,\n  streamingFormat: streamingFormat,\n  options: options\n};\n\nconst outputDefaultAudio = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultAudioJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultVideo = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultVideoJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultImageSequence = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultImageSequenceJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultWaveform = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultWaveformJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultPng = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultImagePngJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultImage = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultImageJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultPopulate = (overrides) => {\n    const { outputType } = overrides;\n    switch (outputType) {\n        case OutputType.Audio: return outputDefaultAudio(overrides);\n        case OutputType.Image: return outputDefaultImage(overrides);\n        case OutputType.Video: return outputDefaultVideo(overrides);\n        case OutputType.ImageSequence: return outputDefaultImageSequence(overrides);\n        case OutputType.Waveform: return outputDefaultWaveform(overrides);\n    }\n};\nconst outputDefaultRendering = (outputType, overrides) => {\n    return outputDefaultPopulate({ ...overrides, outputType });\n};\nconst outputDefaultTypeByFormat = {\n    [OutputFormat.AudioConcat]: OutputType.Audio,\n    [OutputFormat.Mdash]: OutputType.Video,\n    [OutputFormat.Flv]: OutputType.Video,\n    [OutputFormat.Hls]: OutputType.Video,\n    [OutputFormat.Jpeg]: OutputType.Image,\n    [OutputFormat.Mp3]: OutputType.Audio,\n    [OutputFormat.Mp4]: OutputType.Video,\n    [OutputFormat.Png]: OutputType.Image,\n    [OutputFormat.Rtmp]: OutputType.Video,\n    [OutputFormat.VideoConcat]: OutputType.Video,\n};\nconst outputDefaultFormatByType = {\n    [OutputType.Audio]: OutputFormat.Mp3,\n    [OutputType.Image]: OutputFormat.Png,\n    [OutputType.Video]: OutputFormat.Mp4,\n    [OutputType.ImageSequence]: OutputFormat.Jpeg,\n    [OutputType.Waveform]: OutputFormat.Png,\n};\nconst outputDefaultStreaming = (overrides) => {\n    const { format } = overrides;\n    switch (format) {\n        case OutputFormat.Mdash: return outputDefaultDash(overrides);\n        case OutputFormat.Rtmp: return outputDefaultRtmp(overrides);\n        case OutputFormat.Hls:\n        default: return outputDefaultHls(overrides);\n    }\n};\nconst outputDefaultHls = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultHlsJson;\n    return { ...commandOutput, ...object };\n};\nconst outputDefaultDash = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultDashJson;\n    return { ...commandOutput, ...object };\n    // TODO: figure out what this should be\n    /* from http://underpop.online.fr/f/ffmpeg/help/dash-2.htm.gz\n    ffmpeg -re -i <input> -map 0 -map 0 -c:a libfdk_aac -c:v libx264\n    -b:v:0 800k -b:v:1 300k -s:v:1 320x170 -profile:v:1 baseline\n    -profile:v:0 main -bf 1 -keyint_min 120 -g 120 -sc_threshold 0\n    -b_strategy 0 -ar:a:1 22050 -use_timeline 1 -use_template 1\n    -window_size 5 -adaptation_sets \"id=0,streams=v id=1,streams=a\"\n      - f dash / path / to / out.mpd\n    */\n};\nconst outputDefaultRtmp = (overrides) => {\n    const object = overrides || {};\n    const commandOutput = outputDefaultRtmpJson;\n    return { ...commandOutput, ...object };\n    // TODO: figure out what this should be\n    // IVS suggests, but it currently fails:\n    // '-profile:v main', '-preset veryfast', '-x264opts \"nal-hrd=cbr:no-scenecut\"',\n    // '-minrate 3000', '-maxrate 3000', '-g 60'\n};\n\nclass ImageOutputClass extends RenderingOutputClass {\n    _avType = AVType.Video;\n    get commandOutput() {\n        const { upload, commandOutput } = this.args;\n        if (!upload) {\n            // console.log(this.constructor.name, \"commandOutput NOT UPLOAD\")\n            return commandOutput;\n        }\n        const { renderingClips } = this;\n        const [clip] = renderingClips;\n        const { definition } = clip.content;\n        // console.log(this.constructor.name, \"commandOutput\", definition.label)\n        assertPreloadableDefinition(definition);\n        const { info } = definition;\n        assertObject(info);\n        const { streams } = info;\n        const [stream] = streams;\n        const { pix_fmt, codec_name } = stream;\n        if (codec_name !== 'png') {\n            // console.log(\"commandOutput codec_name\", codec_name)\n            return commandOutput;\n        }\n        const { width, height, basename } = commandOutput;\n        const overrides = { width, height, basename };\n        const output = outputDefaultPng(overrides);\n        // console.log(\"commandOutput output\", output, commandOutput)\n        return output;\n    }\n    get endTime() { return; }\n    get filterGraphsOptions() {\n        const { args, graphType, avType, startTime: time } = this;\n        const { mash, upload } = args;\n        const { quantize: videoRate } = mash;\n        const filterGraphsOptions = {\n            time, graphType, videoRate, size: this.sizeCovered(),\n            avType, upload\n        };\n        return filterGraphsOptions;\n    }\n    outputType = OutputType.Image;\n    get startTime() {\n        const { commandOutput, mash } = this.args;\n        const { offset } = commandOutput;\n        const needDuration = offset || mash.frames < 0;\n        if (needDuration)\n            return timeFromArgs(0, mash.quantize);\n        return mash.timeRange.positionTime(Number(offset || 0), 'ceil');\n    }\n}\n\nclass ImageSequenceOutputClass extends AudioOutputClass {\n    _avType = AVType.Video;\n    outputType = OutputType.ImageSequence;\n}\n\nclass VideoOutputClass extends AudioOutputClass {\n    get avType() {\n        return this.args.commandOutput.mute ? AVType.Video : AVType.Both;\n    }\n    get outputCover() { return !!this.args.commandOutput.cover; }\n    outputType = OutputType.Video;\n}\n\nclass WaveformOutputClass extends RenderingOutputClass {\n    _avType = AVType.Audio;\n    outputType = OutputType.Waveform;\n    get sizePromise() { return Promise.resolve(); }\n}\n// layers = []\n// layers << \"color=s=#{output[:dimensions]}:c=##{output[:backcolor]}[bg]\"\n// layers << \"[0:a]aformat=channel_layouts=mono,showwavespic=colors=##{output[:forecolor]}:s=#{output[:dimensions]}[fg]\"\n// layers << \"[bg][fg]overlay=format=rgb\"\n\nconst outputInstanceAudio = (object) => {\n    return new AudioOutputClass(object);\n};\nconst outputInstanceImage = (object) => {\n    return new ImageOutputClass(object);\n};\nconst outputInstanceVideo = (object) => {\n    return new VideoOutputClass(object);\n};\nconst outputInstanceVideoSequence = (object) => {\n    return new ImageSequenceOutputClass(object);\n};\nconst outputInstanceWaveform = (object) => {\n    return new WaveformOutputClass(object);\n};\n/**\n * @category Factory\n */\nconst OutputFactory = {\n    [OutputType.Audio]: outputInstanceAudio,\n    [OutputType.Image]: outputInstanceImage,\n    [OutputType.Video]: outputInstanceVideo,\n    [OutputType.ImageSequence]: outputInstanceVideoSequence,\n    [OutputType.Waveform]: outputInstanceWaveform,\n};\n\nclass StreamingOutputClass {\n    constructor(args) {\n        this.args = args;\n    }\n    args;\n    streamingDescription(renderingResults) {\n        const { mashes } = this.args;\n        const promises = mashes.map(mash => {\n            const options = {\n                audible: true, visible: true, streaming: true,\n            };\n            return mash.preloader.loadFilesPromise(mash.editedGraphFiles(options));\n        });\n        let promise = Promise.all(promises).then(() => {\n            const files = [];\n            const commandFilters = [];\n            const commandInputs = [];\n            const avType = AVType.Both;\n            mashes.forEach(mash => {\n                const args = {\n                    size: this.outputSize,\n                    videoRate: this.args.commandOutput.videoRate,\n                    graphType: GraphType.Cast,\n                    avType\n                };\n                const filterGraphs = mash.filterGraphs(args);\n                const { filterGraphVisible } = filterGraphs;\n                commandInputs.push(...filterGraphVisible.commandInputs);\n                files.push(...filterGraphs.fileUrls.filter(graphFile => graphFile.input));\n                commandFilters.push(...filterGraphVisible.commandFilters);\n            });\n            const options = { ...this.args.commandOutput.options };\n            const commandOutput = { ...this.args.commandOutput, options };\n            const commandOptions = {\n                inputs: commandInputs, commandFilters, commandOutput, avType\n            };\n            return commandOptions;\n        });\n        return promise;\n    }\n    mashes = [];\n    get outputSize() {\n        const { width, height } = this.args.commandOutput;\n        return { width, height };\n    }\n}\n\nclass VideoStreamOutputClass extends StreamingOutputClass {\n}\n\nexport { AVType, Action, ActionFactory, ActionType, Actions, ActivityType, AddClipToTrackAction, AddEffectAction, AddLayerAction, AddTrackAction, AlphamergeFilter, Anchor, Anchors, ApiVersion, AudibleContext, AudibleContextInstance, AudioClass, AudioDefinitionClass, AudioOutputClass, AudioPreview, BrowserLoaderClass, CastClass, ChangeAction, ChangeFramesAction, ChangeMultipleAction, ChromaKeyFilter, ClassButton, ClassCollapsed, ClassDisabled, ClassDropping, ClassDroppingAfter, ClassDroppingBefore, ClassSelected, ClipClass, ClipDefinitionClass, ClipSelectTypes, Color, ColorChannelMixerFilter, ColorContentClass, ColorContentDefinitionClass, ColorFilter, ColorizeFilter, Colors, ContainerDefinitionMixin, ContainerMixin, ContainerTypes, ContentDefinitionMixin, ContentMixin, ContentTypes, ContextFactory, ConvolutionFilter, CropFilter, DataGroup, DataGroups, DataType, DataTypes, Default, DefaultContainerId, DefaultContentId, Defined, DefinitionBase, DefinitionType, DefinitionTypes, Direction, DirectionLabels, Directions, DroppingPosition, Duration, EditType, EditTypes, EditedClass, EditorClass, EditorSelectionClass, EffectClass, EffectDefinitionClass, Emitter, EmptyMethod, Endpoints, Errors, EventType, EventTypes, ExtDash, ExtHls, ExtJpeg, ExtJson, ExtPng, ExtRtmp, ExtText, ExtTs, Factories, Factory, FillType, FillTypes, FilterClass, FilterDefinitionClass, FilterGraphClass, FilterGraphInputAudible, FilterGraphInputVisible, FilterGraphsClass, FilterIdPrefix, FontClass, FontDefinitionClass, FpsFilter, GraphFileType, GraphFileTypes, GraphType, IdPrefix, IdSuffix, ImageClass, ImageDefinitionClass, ImageOutputClass, ImageSequenceOutputClass, InstanceBase, LayerClass, LayerFolderClass, LayerMashClass, LayerType, LayerTypes, LoadType, LoadTypes, LoaderClass, MashClass, MasherAction, ModularDefinitionMixin, ModularMixin, MoveClipAction, MoveEffectAction, MoveLayerAction, MoveType, NamespaceLink, NamespaceSvg, NamespaceXhtml, NonePreview, OpacityFilter, Orientation, Orientations, OutputFactory, OutputFilterGraphPadding, OutputFormat, OutputType, OutputTypes, OverlayFilter, Parameter, PointZero, PreloadableDefinitionMixin, PreloadableMixin, PreviewClass, PropertiedClass, PropertyTweenSuffix, PropertyTypesNumeric, RectZero, RemoveClipAction, RemoveLayerAction, RenderingOutputClass, ScaleFilter, SelectType, SelectTypes, ServerType, ServerTypes, SetptsFilter, SetsarFilter, ShapeContainerClass, ShapeContainerDefinitionClass, SizeIcon, SizeOutput, SizePreview, SizeZero, Sizing, SizingDefinitionTypes, Sizings, StreamingFormat, StreamingOutputClass, TextContainerClass, TextContainerDefinitionClass, TextContainerId, TextFilter, TimeClass, TimeRangeClass, Timing, TimingDefinitionTypes, Timings, TrackClass, TrackFactory, TrackPreviewClass, TrackPreviewHandleSize, TrackPreviewLineSize, TransformType, TriggerType, TriggerTypes, TrimFilter, TweenableDefinitionMixin, TweenableMixin, UpdatableDurationDefinitionMixin, UpdatableDurationDefinitionTypes, UpdatableDurationMixin, UpdatableSizeDefinitionMixin, UpdatableSizeDefinitionType, UpdatableSizeMixin, UploadTypes, VideoClass, VideoDefinitionClass, VideoOutputClass, VideoSequenceClass, VideoSequenceDefinitionClass, VideoStreamOutputClass, WaveformOutputClass, actionInstance, arrayLast, arrayReversed, arraySet, arrayUnique, assertAboveZero, assertAction, assertArray, assertBoolean, assertCast, assertChangeAction, assertClip, assertContainer, assertContainerObject, assertContainerType, assertContent, assertContentType, assertConvolutionServerFilter, assertDataGroup, assertDataType, assertDefined, assertDefinition, assertDefinitionType, assertDirection, assertEditType, assertEdited, assertEffect, assertFontDefinition, assertLayer, assertLayerFolder, assertLayerMash, assertLayerType, assertLoadType, assertLoaderPath, assertLoaderType, assertMash, assertMashClass, assertMashData, assertNumber, assertObject, assertPoint, assertPopulatedArray, assertPopulatedObject, assertPopulatedString, assertPositive, assertPreloadable, assertPreloadableDefinition, assertProperty, assertRect, assertRgb, assertSelectType, assertSize, assertSizeAboveZero, assertString, assertTextContainer, assertTime, assertTimeRange, assertTrack, assertTrue, assertTweenable, assertTweenableDefinition, assertUpdatableDuration, assertUpdatableDurationDefinition, assertUpdatableSize, assertUpdatableSizeDefinition, assertValue, assertValueObject, assertVideo, audioDefinition, audioDefinitionFromId, audioFromId, audioInstance, castInstance, centerPoint, clipDefault, clipDefaultId, clipDefaults, clipDefinition, clipDefinitionFromId, clipFromId, clipInstance, colorAlpha, colorAlphaColor, colorBlack, colorBlackOpaque, colorBlackTransparent, colorBlue, colorFromRgb, colorFromRgba, colorGreen, colorHexRegex, colorHexToRgb, colorHexToRgba, colorName, colorRed, colorRgb, colorRgbDifference, colorRgbKeys, colorRgbRegex, colorRgbToHex, colorRgbToYuv, colorRgba, colorRgbaKeys, colorRgbaRegex, colorRgbaToHex, colorRgbaToRgba, colorRgbaTransparent, colorServer, colorStrip, colorToRgb, colorToRgba, colorTransparent, colorValid, colorValidHex, colorValidRgb, colorValidRgba, colorWhite, colorWhiteOpaque, colorWhiteTransparent, colorYellow, colorYuvBlend, colorYuvDifference, colorYuvToRgb, commandFilesInput, commandFilesInputIndex, containerDefaults, containerDefinition, containerDefinitionFromId, containerFromId, containerInstance, contentDefaults, contentDefinition, contentDefinitionFromId, contentFromId, contentInstance, editorArgs, editorInstance, editorSelectionInstance, editorSingleton, effectDefaults, effectDefinition, effectDefinitionFromId, effectFromId, effectInstance, eventStop, fetchCallback, filterDefaults, filterDefinition, filterDefinitionFromId, filterFromId, filterInstance, fontDefault, fontDefaults, fontDefinition, fontDefinitionFromId, fontFromId, fontInstance, getChunksFromString, hex256, idGenerate, idGenerateString, idIsTemporary, idPrefixSet, idTemporary, imageDefinition, imageDefinitionFromId, imageFromId, imageInstance, isAboveZero, isAction, isActionEvent, isActionInit, isArray, isAudio, isAudioDefinition, isBelowOne, isBoolean, isCast, isCastData, isChangeAction, isChangeActionObject, isClip, isClipObject, isClipSelectType, isColorContent, isContainer, isContainerDefinition, isContainerObject, isContainerType, isContent, isContentDefinition, isContentType, isConvolutionServerFilter, isCustomEvent, isDataGroup, isDataType, isDefined, isDefinition, isDefinitionObject, isDefinitionType, isDirection, isEditType, isEdited, isEffect, isEffectDefinition, isEventType, isFillType, isFloat, isFontDefinition, isGraphFileType, isImageDefinition, isInstance, isInstanceObject, isInteger, isLayer, isLayerFolder, isLayerFolderObject, isLayerMash, isLayerMashObject, isLayerObject, isLayerType, isLoadType, isLoadedAudio, isLoadedImage, isLoadedVideo, isLoaderPath, isLoaderType, isMash, isMashAndDefinitionsObject, isMashClass, isMashData, isMethod, isNan, isNumber, isNumberOrNaN, isNumeric, isObject, isOrientation, isPoint, isPopulatedArray, isPopulatedObject, isPopulatedString, isPositive, isPreloadable, isPreloadableDefinition, isPropertied, isProperty, isRect, isRgb, isSelectType, isSelectedProperty, isShapeContainer, isSize, isSizingDefinitionType, isString, isTextContainer, isTime, isTimeRange, isTimingDefinitionType, isTrack, isTriggerType, isTrueValue, isTweenable, isTweenableDefinition, isUndefined, isUpdatableDuration, isUpdatableDurationDefinition, isUpdatableDurationType, isUpdatableSize, isUpdatableSizeDefinition, isUpdatableSizeType, isUploadType, isValue, isValueObject, isVideo, isVideoDefinition, layerFolderInstance, layerInstance, layerMashInstance, mashInstance, outputDefaultAudio, outputDefaultDash, outputDefaultFormatByType, outputDefaultHls, outputDefaultImage, outputDefaultImageSequence, outputDefaultPng, outputDefaultPopulate, outputDefaultRendering, outputDefaultRtmp, outputDefaultStreaming, outputDefaultTypeByFormat, outputDefaultVideo, outputDefaultWaveform, outputInstanceAudio, outputInstanceImage, outputInstanceVideo, outputInstanceVideoSequence, outputInstanceWaveform, pixelColor, pixelFromFrame, pixelNeighboringRgbas, pixelPerFrame, pixelRgbaAtIndex, pixelToFrame, pixelsMixRbg, pixelsMixRbga, pixelsRemoveRgba, pixelsReplaceRgba, pointCopy, pointNegate, pointRound, pointString, pointValueString, pointsEqual, propertyInstance, propertyTypeCoerce, propertyTypeDefault, propertyTypeIsString, propertyTypeValid, rectCopy, rectFromSize, rectRound, rectString, rectsEqual, rectsFromSizes, rgbNumeric, rgbValue, roundMethod, roundWithMethod, selectedPropertiesScalarObject, selectedPropertyObject, sizeAboveZero, sizeCeil, sizeCopy, sizeCover, sizeEven, sizeFloor, sizeFromElement, sizeLock, sizeLockNegative, sizeRound, sizeScale, sizeString, sizedEven, sizesEqual, sortByFrame, sortByIndex, sortByLabel, sortByTrack, stringFamilySizeRect, stringPluralize, stringSeconds, svgAddClass, svgAppend, svgDefsElement, svgDifferenceDefs, svgElement, svgFeImageElement, svgFilter, svgFilterElement, svgFunc, svgGroupElement, svgId, svgImageElement, svgMaskElement, svgPathElement, svgPatternElement, svgPolygonElement, svgRectPoints, svgSet, svgSetBox, svgSetChildren, svgSetDimensions, svgSetDimensionsLock, svgSetTransform, svgSetTransformPoint, svgSetTransformRects, svgTransform, svgUrl, svgUseElement, throwError, timeEqualizeRates, timeFromArgs, timeFromSeconds, timeRangeFromArgs, timeRangeFromSeconds, timeRangeFromTime, timeRangeFromTimes, trackInstance, tweenColorStep, tweenColors, tweenCoverPoints, tweenCoverSizes, tweenInputTime, tweenMaxSize, tweenMinMax, tweenMinSize, tweenNumberObject, tweenNumberStep, tweenOption, tweenOverPoint, tweenOverRect, tweenOverSize, tweenPad, tweenPosition, tweenRectLock, tweenRects, tweenRectsLock, tweenScaleSizeRatioLock, tweenScaleSizeToRect, tweenableRects, tweeningPoints, urlCombine, urlEndpoint, urlForEndpoint, urlFromEndpoint, urlHasProtocol, urlIsHttp, urlIsObject, urlIsRootProtocol, urlOptions, urlOptionsObject, urlParse, urlPrependProtocol, urlProtocol, urlsAbsolute, urlsParsed, videoDefinition, videoDefinitionFromId, videoFromId, videoInstance, videoSequenceDefinition, videoSequenceDefinitionFromId, videoSequenceFromId, videoSequenceInstance, yuvNumeric };\n"],
  "mappings": "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",
  "names": ["type", "value", "DroppingPosition", "LayerType", "ActionType", "EditType", "AVType", "SelectType", "OutputFormat", "StreamingFormat", "OutputType", "FillType", "GraphFileType", "LoadType", "DefinitionType", "DataType", "Orientation", "Direction", "Anchor", "TriggerType", "TransformType", "EventType", "MoveType", "MasherAction", "GraphType", "ServerType", "Duration", "Timing", "Sizing", "definition", "id", "Color", "color", "g", "properties", "width", "height", "DataGroup", "label", "path", "filters", "filtered", "options", "length", "svgUrl", "property", "videoRate", "offset", "ActivityType", "document", "format", "containerId", "tweenRects", "forecolor", "target", "undoValue", "pathHeight", "pathWidth", "source", "time", "rect", "classes", "contentId", "defaultContent", "defaultContainer", "clip", "promise", "file", "video", "isAudio", "info", "mash", "files", "outputType"]
}
